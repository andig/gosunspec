package main

import (
	_ "embed"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"sort"
	"strings"
	"text/template"
)

//go:embed model.tpl
var file string

const loader = `
package models

// Code generated by ../../generators/models.go. DO NOT EDIT.
// You can regenerate it by running 'go generate ./models' from the directory above.

{{$top := .TopPackage}}
import (
{{range .Names}}   _ "{{$top}}/models/{{.}}"
{{end}}
)
`

func main() {
	var jsonDir string
	var modelDir string
	var topPackage string

	flag.StringVar(&jsonDir, "json-dir", "../spec/json", "The location of the JSON directory")
	flag.StringVar(&modelDir, "model-dir", "../models", "The location of the models directory")
	flag.StringVar(&topPackage, "top-package", "github.com/andig/gosunspec", "The go path to the package containing the models package.")
	flag.Parse()

	modelDir = strings.TrimRight(modelDir, "/")

	files, err := ioutil.ReadDir(jsonDir)
	if err != nil {
		log.Fatal(err)
	}

	models := []Model{}
	for _, file := range files {
		if strings.HasPrefix(file.Name(), "model_") {
			smdxFile, err := os.OpenFile(jsonDir+"/"+file.Name(), os.O_RDONLY, 0644)
			if err != nil {
				log.Fatal(err)
			}

			println(file.Name())

			def, err := FromJSON(smdxFile)
			if err != nil {
				smdxFile.Close()
				log.Fatal(err)
			}
			smdxFile.Close()

			models = append(models, def)
		}
	}

	t := template.New("file")
	t.Funcs(map[string]interface{}{
		"goType": func(sstype string) string {
			switch sstype {
			case "uint16", "uint32", "uint64", "int16", "float32", "int32", "int64", "string":
				return sstype
			case "sunssf":
				return "sunspec.ScaleFactor"
			default:
				return "sunspec." + strings.Title(sstype)
			}
		},
		"optF": func(n, v string) string {
			if len(v) > 0 {
				return "," + n + ": \"" + v + "\""
			} else {
				return ""
			}
		},
		"title": func(in string) string {
			switch in {
			case "sunssf":
				return "ScaleFactor"
			default:
				return strings.Title(in)
			}
		},
		"uniqueNames": func(m Group) []string {
			seen := map[string]bool{}
			for _, p := range filteredPoints(m.Points) {
				seen[p.Name] = true
			}
			for _, b := range m.Groups {
				for _, p := range b.Points {
					seen[p.Name] = true
				}
			}
			result := []string{}
			for n := range seen {
				result = append(result, n)
			}
			sort.Strings(result)
			return result
		},
		"filteredPoints": filteredPoints,
		"toLower":        strings.ToLower,
		"quote": func(s string) string {
			if strings.Contains(s, `"`) {
				return strings.ReplaceAll(s, `"`, `'`)
			}
			return s
		},
	})
	modelTemplate := template.Must(t.Parse(file))

	// write out all the model files

	for _, m := range models {
		m.Prepare()

		dir := fmt.Sprintf(modelDir+"/model%d", m.Id)
		if err := os.MkdirAll(dir, 0777); err != nil {
			log.Fatalf("%v", err)
		}
		outputFilename := dir + "/model.go.tmp"
		outputFile, err := os.OpenFile(outputFilename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
		if err != nil {
			log.Fatal(err)
		}
		if err := modelTemplate.Execute(outputFile, map[string]interface{}{
			"Model": m,
		}); err != nil {
			log.Fatalf("template execution failed: %v", err)
		}
		outputFile.Close()
		cmd := exec.Command("/bin/sh", "-c", "gofmt -w "+outputFilename)
		if err := cmd.Run(); err != nil {
			log.Fatalf("gofmt failed: %v", err)
		}
		if err := os.Rename(outputFilename, dir+"/model.go"); err != nil {
			log.Fatalf("replacing models.go failed: %v", err)
		}
	}

	// write out a loader module

	files, err = ioutil.ReadDir(modelDir)
	if err != nil {
		log.Fatal(err)
	}
	names := []string{}
	for _, f := range files {
		if f.IsDir() && strings.HasPrefix(f.Name(), "model") {
			names = append(names, f.Name())
		}
	}
	outputFile, err := os.OpenFile(modelDir+"/loader.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Fatal(err)
	}
	loaderTemplate := template.Must(t.Parse(loader))
	if err := loaderTemplate.Execute(outputFile, map[string]interface{}{
		"Names":      names,
		"TopPackage": topPackage,
	}); err != nil {
		log.Fatal(err)
	}
	outputFile.Close()

	cmd := exec.Command("/bin/sh", "-c", "gofmt -w "+modelDir+"/loader.go")
	if err := cmd.Run(); err != nil {
		log.Fatalf("gofmt failed: %v", err)
	}
}
