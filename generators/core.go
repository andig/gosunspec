package main

import (
	"github.com/crabmusket/gosunspec/smdx"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
)

const preamble = `// NOTICE
// This file was automatically generated by ../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package core
`

const model = `
type {{.Name}} struct {
}
`

func main() {
	outputFilename := "../core/models.go.tmp"
	outputFile, err := os.OpenFile(outputFilename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer outputFile.Close()

	smdxDir := "../models/smdx/"
	files, err := ioutil.ReadDir(smdxDir)
	if err != nil {
		log.Fatal(err)
	}

	_, err = outputFile.WriteString(preamble)
	if err != nil {
		log.Fatal(err)
	}

	modelTemplate := template.Must(template.New("model").Parse(model))

	for _, file := range files {
		if strings.HasPrefix(file.Name(), "smdx_") {
			smdxFile, err := os.OpenFile(smdxDir+file.Name(), os.O_RDONLY, 0644)
			if err != nil {
				log.Fatal(err)
			}

			def, err := smdx.FromXML(smdxFile)
			if err != nil {
				smdxFile.Close()
				log.Fatal(err)
			}

			if len(def.Models) < 1 {
				smdxFile.Close()
				continue
			}

			for _, model := range def.Models {
				modelId := "Model" + model.Id

				modelTemplate.Execute(outputFile, map[string]string{
					"Name": modelId,
				})
			}

			smdxFile.Close()
		}
	}
}
