package main

import (
	"github.com/crabmusket/gosunspec/smdx"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

const preamble = `// NOTICE
// This file was automatically generated by ../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package core

import (
	"github.com/crabmusket/gosunspec/smdx"
)
`

const model = `
{{define "point"}}{{.Id}} {{.Type|goType}} ` + "`" + `sunspec:"offset={{.Offset}}{{if gt .Length 0}},len={{.Length}}{{end}}{{if ne .ScaleFactor ""}},sf={{.ScaleFactor}}{{end}}{{if ne .Access ""}},access={{.Access}}{{end}}"` + "`" + `{{end}}
{{$model := .Model }}

// Block{{.Model.Id}} - {{.Strings.ModelStrings.Label}} - {{.Strings.ModelStrings.Description}}
{{range (repeatingBlocks .Model)}}
type Block{{$model.Id}}Repeat struct {
	{{range .Points}}{{template "point" .}}
{{end}}
}
{{end}}

type Block{{.Model.Id}} struct {
{{range (fixedBlocks .Model)}}
{{range .Points}}    {{template "point" .}}
{{end}}
	{{end}}
{{range (repeatingBlocks .Model)}}
  Repeats []Block{{$model.Id}}Repeat
{{end}}
}

func (self *Block{{.Model.Id}}) GetId() ModelId {
  return {{.Model.Id}}
}

var model{{.Model.Id}} = smdx.ModelElement{
	Id: {{.Model.Id}},
	Name: "{{.Model.Name}}",
	Length: {{.Model.Length}},
	Blocks: []smdx.BlockElement{ {{range .Model.Blocks}}
			smdx.BlockElement{ {{if gt (len .Name) 0 }}Name: "{{.Name}}",{{end}}
				Length: {{.Length}},
				{{if gt (len .Type) 0 }}Type: "{{.Type}}",{{end}}
				Points: []smdx.PointElement{ {{range .Points}}
					smdx.PointElement{Id: "{{.Id}}",Offset: {{.Offset}},Type: "{{.Type}}"{{optF "ScaleFactor" .ScaleFactor}}{{optF "Units" .Units}}{{optF "Access" .Access}}{{if gt (.Length) 0}},Length: {{.Length}}{{end}}{{if .Mandatory}},Mandatory: {{.Mandatory}}{{end}},}, {{end}}
				},
			}, {{end}}
	},
}

func init() { smdx.RegisterModel(&model{{.Model.Id}}) }
`

func main() {
	outputFilename := "../core/models.go.tmp"
	outputFile, err := os.OpenFile(outputFilename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer outputFile.Close()

	smdxDir := "../models/smdx/"
	files, err := ioutil.ReadDir(smdxDir)
	if err != nil {
		log.Fatal(err)
	}

	_, err = outputFile.WriteString(preamble)
	if err != nil {
		log.Fatal(err)
	}

	t := template.New("model")
	t.Funcs(map[string]interface{}{
		"goType": func(sstype string) string {
			switch sstype {
			case "uint16", "uint32", "uint64", "int16", "float32", "int32", "int64":
				return sstype
			case "sunssf":
				return "ScaleFactor"
			case "eui48":
				return strings.ToUpper(sstype)
			default:
				return strings.Title(sstype)
			}
		},
		"repeatingBlocks": func(m smdx.ModelElement) []smdx.BlockElement {
			if len(m.Blocks) == 1 && m.Blocks[0].Type == "repeating" {
				return m.Blocks
			} else if len(m.Blocks) > 1 {
				return m.Blocks[1:]
			} else {
				return []smdx.BlockElement{}
			}
		},
		"fixedBlocks": func(m smdx.ModelElement) []smdx.BlockElement {
			if len(m.Blocks) > 0 && m.Blocks[0].Type != "repeating" {
				return m.Blocks[0:1]
			} else {
				return []smdx.BlockElement{}
			}
		},
		"optF": func(n, v string) string {
			if len(v) > 0 {
				return "," + n + ": \"" + v + "\""
			} else {
				return ""
			}
		},
	})
	modelTemplate := template.Must(t.Parse(model))

	for _, file := range files {
		if strings.HasPrefix(file.Name(), "smdx_") {
			smdxFile, err := os.OpenFile(smdxDir+file.Name(), os.O_RDONLY, 0644)
			if err != nil {
				log.Fatal(err)
			}

			def, err := smdx.FromXML(smdxFile)
			if err != nil {
				smdxFile.Close()
				log.Fatal(err)
			}

			if len(def.Models) < 1 {
				smdxFile.Close()
				continue
			}

			for _, model := range def.Models {

				err := modelTemplate.Execute(outputFile, map[string]interface{}{
					"Model":   model,
					"Strings": def.Strings[0],
				})
				if err != nil {
					log.Fatalf("template execution failed: %v", err)
				}
			}

			smdxFile.Close()
		}
	}

	outputFile.Close()
	cmd := exec.Command("/bin/sh", "-c", "gofmt -w "+outputFilename)
	if err := cmd.Run(); err != nil {
		log.Fatalf("gofmt failed: %v", err)
	}
	if err := os.Rename("../core/models.go.tmp", "../core/models.go"); err != nil {
		log.Fatalf("replacing models.go failed: %v", err)
	}
}
