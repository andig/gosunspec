package model711

// Code generated by ../../generators/models.go. DO NOT EDIT.
// You can regenerate it by running 'go generate ./models' from the directory above.

import (
	"github.com/andig/gosunspec"
	"github.com/andig/gosunspec/smdx"
	"github.com/andig/gosunspec/typelabel"
)

// Block711 - DER Frequency Droop - DER Frequency Droop model.

const (
	ModelID          = 711
	ModelLabel       = "DER Frequency Droop"
	ModelDescription = "DER Frequency Droop model."
)

const (
	AdptCtlReq  = "AdptCtlReq"
	AdptCtlRslt = "AdptCtlRslt"
	DbOf        = "DbOf"
	DbUf        = "DbUf"
	Db_SF       = "Db_SF"
	Ena         = "Ena"
	KOf         = "KOf"
	KUf         = "KUf"
	K_SF        = "K_SF"
	NCtl        = "NCtl"
	ReadOnly    = "ReadOnly"
	RspTms      = "RspTms"
	RspTms_SF   = "RspTms_SF"
	RvrtCtl     = "RvrtCtl"
	RvrtRem     = "RvrtRem"
	RvrtTms     = "RvrtTms"
)

type Block711Repeat struct {
	DbOf     uint32         `sunspec:"offset=0,len=2,sf=Db_SF,access=rw"`
	DbUf     uint32         `sunspec:"offset=2,len=2,sf=Db_SF,access=rw"`
	KOf      uint16         `sunspec:"offset=4,len=1,sf=K_SF,access=rw"`
	KUf      uint16         `sunspec:"offset=5,len=1,sf=K_SF,access=rw"`
	RspTms   uint32         `sunspec:"offset=6,len=2,sf=RspTms_SF,access=rw"`
	ReadOnly sunspec.Enum16 `sunspec:"offset=8,len=1,access=r"`
}

type Block711 struct {
	Ena         sunspec.Enum16      `sunspec:"offset=0,len=1,access=rw"`
	AdptCtlReq  uint16              `sunspec:"offset=1,len=1,access=rw"`
	AdptCtlRslt sunspec.Enum16      `sunspec:"offset=2,len=1,access=r"`
	NCtl        uint16              `sunspec:"offset=3,len=1,access=r"`
	RvrtTms     uint32              `sunspec:"offset=4,len=2,access=rw"`
	RvrtRem     uint32              `sunspec:"offset=6,len=2,access=r"`
	RvrtCtl     uint16              `sunspec:"offset=8,len=1,access=rw"`
	Db_SF       sunspec.ScaleFactor `sunspec:"offset=9,len=1,access=r"`
	K_SF        sunspec.ScaleFactor `sunspec:"offset=10,len=1,access=r"`
	RspTms_SF   sunspec.ScaleFactor `sunspec:"offset=11,len=1,access=r"`

	Repeats []Block711Repeat
}

func (block *Block711) GetId() sunspec.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "DERFreqDroop",
		Length: 21,
		Blocks: []smdx.BlockElement{
			{
				Length: 12,
				Points: []smdx.PointElement{
					{Id: Ena, Offset: 0, Type: typelabel.Enum16, Access: "rw", Length: 1, Mandatory: true, Label: "DER Frequency Droop Enable", Description: "DER Frequency-Watt (Frequency-Droop) control enable."},
					{Id: AdptCtlReq, Offset: 1, Type: typelabel.Uint16, Access: "rw", Length: 1, Mandatory: true, Label: "Set Active Control Request", Description: "Set active control. 0 = No active control."},
					{Id: AdptCtlRslt, Offset: 2, Type: typelabel.Enum16, Access: "r", Length: 1, Mandatory: true, Label: "Set Active Control Result", Description: "Result of last set active control operation."},
					{Id: NCtl, Offset: 3, Type: typelabel.Uint16, Access: "r", Length: 1, Mandatory: true, Label: "Stored Curve Count", Description: "Number of stored curves supported."},
					{Id: RvrtTms, Offset: 4, Type: typelabel.Uint32, Access: "rw", Length: 2, Label: "Reversion Timeout", Description: "Reversion time in seconds.  0 = No reversion time"},
					{Id: RvrtRem, Offset: 6, Type: typelabel.Uint32, Access: "r", Length: 2, Label: "Reversion Time Left", Description: "Reversion time remaining in seconds"},
					{Id: RvrtCtl, Offset: 8, Type: typelabel.Uint16, Access: "rw", Length: 1, Label: "Reversion Control", Description: "Default control after reversion timeout."},
					{Id: Db_SF, Offset: 9, Type: typelabel.ScaleFactor, Access: "r", Length: 1, Mandatory: true, Label: "Deadband Scale Factor", Description: "Deadband scale factor."},
					{Id: K_SF, Offset: 10, Type: typelabel.ScaleFactor, Access: "r", Length: 1, Mandatory: true, Label: "Frequency Change Scale Factor", Description: "Frequency change scale factor."},
					{Id: RspTms_SF, Offset: 11, Type: typelabel.ScaleFactor, Access: "r", Length: 1, Mandatory: true, Label: "Open-Loop Scale Factor", Description: "Open loop response time scale factor."},
				},
			},
			{Name: "Ctl",
				Length: 9,
				Type:   "repeating",
				Points: []smdx.PointElement{
					{Id: DbOf, Offset: 0, Type: typelabel.Uint32, ScaleFactor: "Db_SF", Units: "Hz", Access: "rw", Length: 2, Mandatory: true, Label: "Over-Frequency Deadband", Description: "The deadband value for over-frequency conditions in Hz."},
					{Id: DbUf, Offset: 2, Type: typelabel.Uint32, ScaleFactor: "Db_SF", Units: "Hz", Access: "rw", Length: 2, Mandatory: true, Label: "Under-Frequency Deadband", Description: "The deadband value for under-frequency conditions in Hz."},
					{Id: KOf, Offset: 4, Type: typelabel.Uint16, ScaleFactor: "K_SF", Access: "rw", Length: 1, Mandatory: true, Label: "Over-Frequency Change Ratio", Description: "Frequency droop per-unit frequency change for over-frequency conditions corresponding to 1 per-unit power output change."},
					{Id: KUf, Offset: 5, Type: typelabel.Uint16, ScaleFactor: "K_SF", Access: "rw", Length: 1, Mandatory: true, Label: "Under-Frequency Change Ratio", Description: "Frequency droop per-unit frequency change for under-frequency conditions corresponding to 1 per-unit power output change."},
					{Id: RspTms, Offset: 6, Type: typelabel.Uint32, ScaleFactor: "RspTms_SF", Units: "Secs", Access: "rw", Length: 2, Mandatory: true, Label: "Open-Loop Response Time", Description: "The open-loop response time in seconds."},
					{Id: ReadOnly, Offset: 8, Type: typelabel.Enum16, Access: "r", Length: 1, Label: "Control Access", Description: "Control read-write access."},
				},
			},
		}})
}
