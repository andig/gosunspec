// NOTICE
// This file was automatically generated by ../../../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package model127

import (
	"github.com/crabmusket/gosunspec/core"
	"github.com/crabmusket/gosunspec/core/typelabel"
	"github.com/crabmusket/gosunspec/smdx"
)

// Block127 - Freq-Watt Param - Parameterized Frequency-Watt

const (
	ModelID = 127
)

const (
	HysEna       = "HysEna"
	HzStop       = "HzStop"
	HzStopWGra   = "HzStopWGra"
	HzStr        = "HzStr"
	HzStrStop_SF = "HzStrStop_SF"
	ModEna       = "ModEna"
	Pad          = "Pad"
	RmpIncDec_SF = "RmpIncDec_SF"
	WGra         = "WGra"
	WGra_SF      = "WGra_SF"
)

type Block127 struct {
	WGra         uint16           `sunspec:"offset=0,len=1,sf=WGra_SF,access=rw"`
	HzStr        int16            `sunspec:"offset=1,len=1,sf=HzStrStop_SF,access=rw"`
	HzStop       int16            `sunspec:"offset=2,len=1,sf=HzStrStop_SF,access=rw"`
	HysEna       core.Bitfield16  `sunspec:"offset=3,len=1,access=rw"`
	ModEna       core.Bitfield16  `sunspec:"offset=4,len=1,access=rw"`
	HzStopWGra   uint16           `sunspec:"offset=5,len=1,sf=RmpIncDec_SF,access=rw"`
	WGra_SF      core.ScaleFactor `sunspec:"offset=6,len=1,access=r"`
	HzStrStop_SF core.ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	RmpIncDec_SF core.ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad          core.Pad         `sunspec:"offset=9,len=1,access=r"`
}

func (self *Block127) GetId() core.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "freq_watt_param",
		Length: 10,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: WGra, Offset: 0, Type: typelabel.Uint16, ScaleFactor: "WGra_SF", Units: "% PM/Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: HzStr, Offset: 1, Type: typelabel.Int16, ScaleFactor: "HzStrStop_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: HzStop, Offset: 2, Type: typelabel.Int16, ScaleFactor: "HzStrStop_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: HysEna, Offset: 3, Type: typelabel.Bitfield16, Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: ModEna, Offset: 4, Type: typelabel.Bitfield16, Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: HzStopWGra, Offset: 5, Type: typelabel.Uint16, ScaleFactor: "RmpIncDec_SF", Units: "% WMax/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: WGra_SF, Offset: 6, Type: typelabel.Sunssf, Access: "r", Length: 1},
					smdx.PointElement{Id: HzStrStop_SF, Offset: 7, Type: typelabel.Sunssf, Access: "r", Length: 1},
					smdx.PointElement{Id: RmpIncDec_SF, Offset: 8, Type: typelabel.Sunssf, Access: "r", Length: 1},
					smdx.PointElement{Id: Pad, Offset: 9, Type: typelabel.Pad, Access: "r", Length: 1},
				},
			},
		}})
}
