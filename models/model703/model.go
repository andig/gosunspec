package model703

// Code generated by ../../generators/models.go. DO NOT EDIT.
// You can regenerate it by running 'go generate ./models' from the directory above.

import (
	"github.com/andig/gosunspec"
	"github.com/andig/gosunspec/smdx"
	"github.com/andig/gosunspec/typelabel"
)

// Block703 - Enter Service - Enter service.

const (
	ModelID          = 703
	ModelLabel       = "Enter Service"
	ModelDescription = "Enter service."
)

const (
	ES       = "ES"
	ESDlyTms = "ESDlyTms"
	ESHzHi   = "ESHzHi"
	ESHzLo   = "ESHzLo"
	ESRmpTms = "ESRmpTms"
	ESRndTms = "ESRndTms"
	ESVHi    = "ESVHi"
	ESVLo    = "ESVLo"
	Hz_SF    = "Hz_SF"
	V_SF     = "V_SF"
)

type Block703 struct {
	ES       sunspec.Enum16      `sunspec:"offset=0,len=1,access=rw"`
	ESVHi    uint16              `sunspec:"offset=1,len=1,sf=V_SF,access=rw"`
	ESVLo    uint16              `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	ESHzHi   uint32              `sunspec:"offset=3,len=2,sf=Hz_SF,access=rw"`
	ESHzLo   uint32              `sunspec:"offset=5,len=2,sf=Hz_SF,access=rw"`
	ESDlyTms uint32              `sunspec:"offset=7,len=2,access=rw"`
	ESRndTms uint32              `sunspec:"offset=9,len=2,access=rw"`
	ESRmpTms uint32              `sunspec:"offset=11,len=2,access=rw"`
	V_SF     sunspec.ScaleFactor `sunspec:"offset=13,len=1,access=r"`
	Hz_SF    sunspec.ScaleFactor `sunspec:"offset=14,len=1,access=r"`
}

func (block *Block703) GetId() sunspec.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "DEREnterService",
		Length: 15,
		Blocks: []smdx.BlockElement{
			{
				Length: 15,
				Points: []smdx.PointElement{
					{Id: ES, Offset: 0, Type: typelabel.Enum16, Access: "rw", Length: 1, Label: "Permit Enter Service", Description: "Permit enter service."},
					{Id: ESVHi, Offset: 1, Type: typelabel.Uint16, ScaleFactor: "V_SF", Units: "Pct", Access: "rw", Length: 1, Label: "Enter Service Voltage High", Description: "Enter service voltage high threshold as percent of normal voltage."},
					{Id: ESVLo, Offset: 2, Type: typelabel.Uint16, ScaleFactor: "V_SF", Units: "Pct", Access: "rw", Length: 1, Label: "Enter Service Voltage Low", Description: "Enter service voltage low threshold as percent of normal voltage."},
					{Id: ESHzHi, Offset: 3, Type: typelabel.Uint32, ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 2, Label: "Enter Service Frequency High", Description: "Enter service frequency high threshold."},
					{Id: ESHzLo, Offset: 5, Type: typelabel.Uint32, ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 2, Label: "Enter Service Frequency Low", Description: "Enter service frequency low threshold."},
					{Id: ESDlyTms, Offset: 7, Type: typelabel.Uint32, Units: "Secs", Access: "rw", Length: 2, Label: "Enter Service Delay Time", Description: "Enter service delay time in seconds."},
					{Id: ESRndTms, Offset: 9, Type: typelabel.Uint32, Units: "Secs", Access: "rw", Length: 2, Label: "Enter Service Random Delay", Description: "Enter service random delay in seconds."},
					{Id: ESRmpTms, Offset: 11, Type: typelabel.Uint32, Units: "Secs", Access: "rw", Length: 2, Label: "Enter Service Ramp Time", Description: "Enter service ramp time in seconds."},
					{Id: V_SF, Offset: 13, Type: typelabel.ScaleFactor, Access: "r", Length: 1, Label: "Voltage Scale Factor", Description: "Voltage scale factor."},
					{Id: Hz_SF, Offset: 14, Type: typelabel.ScaleFactor, Access: "r", Length: 1, Label: "Frequency Scale Factor", Description: "Frequency scale factor."},
				},
			},
		}})
}
