// NOTICE
// This file was automatically generated by ../../generators/models.go. Do not edit it!
// You can regenerate it by running 'go generate ./models' from the directory above.

package model11

import (
	"github.com/crabmusket/gosunspec"
	"github.com/crabmusket/gosunspec/smdx"
	"github.com/crabmusket/gosunspec/typelabel"
)

// Block11 - Ethernet Link Layer - Include to support a wired ethernet port

const (
	ModelID = 11
)

const (
	CfgSt  = "CfgSt"
	Ctl    = "Ctl"
	FrcSpd = "FrcSpd"
	MAC    = "MAC"
	Nam    = "Nam"
	Spd    = "Spd"
	St     = "St"
)

type Block11 struct {
	Spd    uint16             `sunspec:"offset=0"`
	CfgSt  sunspec.Bitfield16 `sunspec:"offset=1"`
	St     sunspec.Enum16     `sunspec:"offset=2"`
	MAC    sunspec.EUI48      `sunspec:"offset=3"`
	Nam    string             `sunspec:"offset=7,len=4,access=rw"`
	Ctl    sunspec.Bitfield16 `sunspec:"offset=11,access=rw"`
	FrcSpd uint16             `sunspec:"offset=12,access=rw"`
}

func (self *Block11) GetId() sunspec.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "",
		Length: 13,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 13,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: Spd, Offset: 0, Type: typelabel.Uint16, Units: "Mbps", Mandatory: true},
					smdx.PointElement{Id: CfgSt, Offset: 1, Type: typelabel.Bitfield16, Mandatory: true},
					smdx.PointElement{Id: St, Offset: 2, Type: typelabel.Enum16, Mandatory: true},
					smdx.PointElement{Id: MAC, Offset: 3, Type: typelabel.Eui48},
					smdx.PointElement{Id: Nam, Offset: 7, Type: typelabel.String, Access: "rw", Length: 4},
					smdx.PointElement{Id: Ctl, Offset: 11, Type: typelabel.Bitfield16, Access: "rw"},
					smdx.PointElement{Id: FrcSpd, Offset: 12, Type: typelabel.Uint16, Units: "Mbps", Access: "rw"},
				},
			},
		}})
}
