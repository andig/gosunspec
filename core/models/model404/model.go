// NOTICE
// This file was automatically generated by ../../../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package model404

import (
	"github.com/crabmusket/gosunspec/core"
	"github.com/crabmusket/gosunspec/core/typelabel"
	"github.com/crabmusket/gosunspec/smdx"
)

// Block404 - String Combiner (Advanced) - An advanced string combiner including voltage and energy measurements

const (
	ModelID = 404
)

const (
	DCA        = "DCA"
	DCAMax     = "DCAMax"
	DCA_SF     = "DCA_SF"
	DCAhr      = "DCAhr"
	DCAhr_SF   = "DCAhr_SF"
	DCPR       = "DCPR"
	DCV        = "DCV"
	DCV_SF     = "DCV_SF"
	DCW        = "DCW"
	DCW_SF     = "DCW_SF"
	DCWh       = "DCWh"
	DCWh_SF    = "DCWh_SF"
	Evt        = "Evt"
	EvtVnd     = "EvtVnd"
	InDCA      = "InDCA"
	InDCA_SF   = "InDCA_SF"
	InDCAhr    = "InDCAhr"
	InDCAhr_SF = "InDCAhr_SF"
	InDCPR     = "InDCPR"
	InDCV      = "InDCV"
	InDCV_SF   = "InDCV_SF"
	InDCW      = "InDCW"
	InDCW_SF   = "InDCW_SF"
	InDCWh     = "InDCWh"
	InDCWh_SF  = "InDCWh_SF"
	InEvt      = "InEvt"
	InEvtVnd   = "InEvtVnd"
	InID       = "InID"
	InN        = "InN"
	N          = "N"
	Tmp        = "Tmp"
)

type Block404Repeat struct {
	InID     uint16          `sunspec:"offset=0"`
	InEvt    core.Bitfield32 `sunspec:"offset=1"`
	InEvtVnd core.Bitfield32 `sunspec:"offset=3"`
	InDCA    int16           `sunspec:"offset=5,sf=InDCA_SF"`
	InDCAhr  core.Acc32      `sunspec:"offset=6,sf=InDCAhr_SF"`
	InDCV    int16           `sunspec:"offset=8,sf=InDCV_SF"`
	InDCW    int16           `sunspec:"offset=9,sf=InDCW_SF"`
	InDCWh   core.Acc32      `sunspec:"offset=10,sf=InDCWh_SF"`
	InDCPR   uint16          `sunspec:"offset=12"`
	InN      uint16          `sunspec:"offset=13"`
}

type Block404 struct {
	DCA_SF     core.ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF   core.ScaleFactor `sunspec:"offset=1"`
	DCV_SF     core.ScaleFactor `sunspec:"offset=2"`
	DCW_SF     core.ScaleFactor `sunspec:"offset=3"`
	DCWh_SF    core.ScaleFactor `sunspec:"offset=4"`
	DCAMax     uint16           `sunspec:"offset=5,sf=DCA_SF"`
	N          core.Count       `sunspec:"offset=6"`
	Evt        core.Bitfield32  `sunspec:"offset=7"`
	EvtVnd     core.Bitfield32  `sunspec:"offset=9"`
	DCA        int16            `sunspec:"offset=11,sf=DCA_SF"`
	DCAhr      core.Acc32       `sunspec:"offset=12,sf=DCAhr_SF"`
	DCV        int16            `sunspec:"offset=14,sf=DCV_SF"`
	Tmp        int16            `sunspec:"offset=15"`
	DCW        int16            `sunspec:"offset=16,sf=DCW_SF"`
	DCPR       int16            `sunspec:"offset=17"`
	DCWh       core.Acc32       `sunspec:"offset=18,sf=DCWh_SF"`
	InDCA_SF   core.ScaleFactor `sunspec:"offset=20"`
	InDCAhr_SF core.ScaleFactor `sunspec:"offset=21"`
	InDCV_SF   core.ScaleFactor `sunspec:"offset=22"`
	InDCW_SF   core.ScaleFactor `sunspec:"offset=23"`
	InDCWh_SF  core.ScaleFactor `sunspec:"offset=24"`

	Repeats []Block404Repeat
}

func (self *Block404) GetId() core.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "string_combiner",
		Length: 39,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 25,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: DCA_SF, Offset: 0, Type: typelabel.Sunssf, Mandatory: true},
					smdx.PointElement{Id: DCAhr_SF, Offset: 1, Type: typelabel.Sunssf},
					smdx.PointElement{Id: DCV_SF, Offset: 2, Type: typelabel.Sunssf},
					smdx.PointElement{Id: DCW_SF, Offset: 3, Type: typelabel.Sunssf},
					smdx.PointElement{Id: DCWh_SF, Offset: 4, Type: typelabel.Sunssf},
					smdx.PointElement{Id: DCAMax, Offset: 5, Type: typelabel.Uint16, ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: N, Offset: 6, Type: typelabel.Count, Mandatory: true},
					smdx.PointElement{Id: Evt, Offset: 7, Type: typelabel.Bitfield32, Mandatory: true},
					smdx.PointElement{Id: EvtVnd, Offset: 9, Type: typelabel.Bitfield32},
					smdx.PointElement{Id: DCA, Offset: 11, Type: typelabel.Int16, ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: DCAhr, Offset: 12, Type: typelabel.Acc32, ScaleFactor: "DCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: DCV, Offset: 14, Type: typelabel.Int16, ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: Tmp, Offset: 15, Type: typelabel.Int16, Units: "C"},
					smdx.PointElement{Id: DCW, Offset: 16, Type: typelabel.Int16, ScaleFactor: "DCW_SF", Units: "W"},
					smdx.PointElement{Id: DCPR, Offset: 17, Type: typelabel.Int16, Units: "Pct"},
					smdx.PointElement{Id: DCWh, Offset: 18, Type: typelabel.Acc32, ScaleFactor: "DCWh_SF", Units: "Wh"},
					smdx.PointElement{Id: InDCA_SF, Offset: 20, Type: typelabel.Sunssf},
					smdx.PointElement{Id: InDCAhr_SF, Offset: 21, Type: typelabel.Sunssf},
					smdx.PointElement{Id: InDCV_SF, Offset: 22, Type: typelabel.Sunssf},
					smdx.PointElement{Id: InDCW_SF, Offset: 23, Type: typelabel.Sunssf},
					smdx.PointElement{Id: InDCWh_SF, Offset: 24, Type: typelabel.Sunssf},
				},
			},
			smdx.BlockElement{Name: "string",
				Length: 14,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: InID, Offset: 0, Type: typelabel.Uint16, Mandatory: true},
					smdx.PointElement{Id: InEvt, Offset: 1, Type: typelabel.Bitfield32, Mandatory: true},
					smdx.PointElement{Id: InEvtVnd, Offset: 3, Type: typelabel.Bitfield32},
					smdx.PointElement{Id: InDCA, Offset: 5, Type: typelabel.Int16, ScaleFactor: "InDCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: InDCAhr, Offset: 6, Type: typelabel.Acc32, ScaleFactor: "InDCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: InDCV, Offset: 8, Type: typelabel.Int16, ScaleFactor: "InDCV_SF", Units: "V"},
					smdx.PointElement{Id: InDCW, Offset: 9, Type: typelabel.Int16, ScaleFactor: "InDCW_SF", Units: "W"},
					smdx.PointElement{Id: InDCWh, Offset: 10, Type: typelabel.Acc32, ScaleFactor: "InDCWh_SF", Units: "Wh"},
					smdx.PointElement{Id: InDCPR, Offset: 12, Type: typelabel.Uint16, Units: "Pct"},
					smdx.PointElement{Id: InN, Offset: 13, Type: typelabel.Uint16},
				},
			},
		}})
}
