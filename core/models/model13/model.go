// NOTICE
// This file was automatically generated by ../../../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package model13

import (
	"github.com/crabmusket/gosunspec/core"
	"github.com/crabmusket/gosunspec/smdx"
)

// Block13 - IPv6 - Include to support an IPv6 protocol stack on this interface

const (
	ModelID = 13
)

const (
	Addr    = "Addr"
	CIDR    = "CIDR"
	Cap     = "Cap"
	Cfg     = "Cfg"
	CfgSt   = "CfgSt"
	ChgSt   = "ChgSt"
	Ctl     = "Ctl"
	DNS1    = "DNS1"
	DNS2    = "DNS2"
	DomNam  = "DomNam"
	Gw      = "Gw"
	HostNam = "HostNam"
	NTP1    = "NTP1"
	NTP2    = "NTP2"
	Nam     = "Nam"
	Pad     = "Pad"
)

type Block13 struct {
	Nam     core.String     `sunspec:"offset=0,len=4,access=rw"`
	CfgSt   core.Enum16     `sunspec:"offset=4"`
	ChgSt   core.Bitfield16 `sunspec:"offset=5"`
	Cap     core.Bitfield16 `sunspec:"offset=6"`
	Cfg     core.Enum16     `sunspec:"offset=7,access=rw"`
	Ctl     core.Enum16     `sunspec:"offset=8,access=rw"`
	Addr    core.String     `sunspec:"offset=9,len=20,access=rw"`
	CIDR    core.String     `sunspec:"offset=29,len=20,access=rw"`
	Gw      core.String     `sunspec:"offset=49,len=20,access=rw"`
	DNS1    core.String     `sunspec:"offset=69,len=20,access=rw"`
	DNS2    core.String     `sunspec:"offset=89,len=20,access=rw"`
	NTP1    core.String     `sunspec:"offset=109,len=20,access=rw"`
	NTP2    core.String     `sunspec:"offset=129,len=20,access=rw"`
	DomNam  core.String     `sunspec:"offset=149,len=12,access=rw"`
	HostNam core.String     `sunspec:"offset=161,len=12,access=rw"`
	Pad     core.Pad        `sunspec:"offset=173"`
}

func (self *Block13) GetId() core.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "",
		Length: 174,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 174,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: Nam, Offset: 0, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: CfgSt, Offset: 4, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: ChgSt, Offset: 5, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: Cap, Offset: 6, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: Cfg, Offset: 7, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: Ctl, Offset: 8, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: Addr, Offset: 9, Type: "string", Access: "rw", Length: 20, Mandatory: true},
					smdx.PointElement{Id: CIDR, Offset: 29, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: Gw, Offset: 49, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: DNS1, Offset: 69, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: DNS2, Offset: 89, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: NTP1, Offset: 109, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: NTP2, Offset: 129, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: DomNam, Offset: 149, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: HostNam, Offset: 161, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: Pad, Offset: 173, Type: "pad"},
				},
			},
		}})
}
