// NOTICE
// This file was automatically generated by ../../../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package model402

import (
	"github.com/crabmusket/gosunspec/core"
	"github.com/crabmusket/gosunspec/smdx"
)

// Block402 - String Combiner (Advanced) - An advanced string combiner

const (
	ModelID = 402
)

const (
	DCA      = "DCA"
	DCAMax   = "DCAMax"
	DCA_SF   = "DCA_SF"
	DCAhr    = "DCAhr"
	DCAhr_SF = "DCAhr_SF"
	DCPR     = "DCPR"
	DCV      = "DCV"
	DCV_SF   = "DCV_SF"
	DCW      = "DCW"
	DCW_SF   = "DCW_SF"
	DCWh     = "DCWh"
	DCWh_SF  = "DCWh_SF"
	Evt      = "Evt"
	EvtVnd   = "EvtVnd"
	InDCA    = "InDCA"
	InDCAhr  = "InDCAhr"
	InDCPR   = "InDCPR"
	InDCV    = "InDCV"
	InDCW    = "InDCW"
	InDCWh   = "InDCWh"
	InEvt    = "InEvt"
	InID     = "InID"
	InN      = "InN"
	N        = "N"
	Tmp      = "Tmp"
)

type Block402Repeat struct {
	InID    uint16          `sunspec:"offset=0"`
	InEvt   core.Bitfield32 `sunspec:"offset=1"`
	EvtVnd  core.Bitfield32 `sunspec:"offset=3"`
	InDCA   int16           `sunspec:"offset=5,sf=DCA_SF"`
	InDCAhr uint32          `sunspec:"offset=6,sf=DCAhr_SF"`
	InDCV   uint16          `sunspec:"offset=8,sf=DCV_SF"`
	InDCW   int16           `sunspec:"offset=9,sf=DCWh_SF"`
	InDCWh  uint32          `sunspec:"offset=10"`
	InDCPR  uint16          `sunspec:"offset=12"`
	InN     uint16          `sunspec:"offset=13"`
}

type Block402 struct {
	DCA_SF   core.ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF core.ScaleFactor `sunspec:"offset=1"`
	DCV_SF   core.ScaleFactor `sunspec:"offset=2"`
	DCW_SF   core.ScaleFactor `sunspec:"offset=3"`
	DCWh_SF  core.ScaleFactor `sunspec:"offset=4"`
	DCAMax   uint16           `sunspec:"offset=5"`
	N        core.Count       `sunspec:"offset=6"`
	Evt      core.Bitfield32  `sunspec:"offset=7"`
	EvtVnd   core.Bitfield32  `sunspec:"offset=9"`
	DCA      int16            `sunspec:"offset=11,sf=DCA_SF"`
	DCAhr    uint32           `sunspec:"offset=12,sf=DCAhr_SF"`
	DCV      uint16           `sunspec:"offset=14,sf=DCV_SF"`
	Tmp      int16            `sunspec:"offset=15"`
	DCW      int16            `sunspec:"offset=16,sf=DCW_SF"`
	DCPR     uint16           `sunspec:"offset=17"`
	DCWh     uint32           `sunspec:"offset=18,sf=DCWh_SF"`

	Repeats []Block402Repeat
}

func (self *Block402) GetId() core.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "string_combiner",
		Length: 33,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 20,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: DCA_SF, Offset: 0, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: DCAhr_SF, Offset: 1, Type: "sunssf"},
					smdx.PointElement{Id: DCV_SF, Offset: 2, Type: "sunssf"},
					smdx.PointElement{Id: DCW_SF, Offset: 3, Type: "sunssf"},
					smdx.PointElement{Id: DCWh_SF, Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: DCAMax, Offset: 5, Type: "uint16", Units: "A"},
					smdx.PointElement{Id: N, Offset: 6, Type: "count"},
					smdx.PointElement{Id: Evt, Offset: 7, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: EvtVnd, Offset: 9, Type: "bitfield32"},
					smdx.PointElement{Id: DCA, Offset: 11, Type: "int16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: DCAhr, Offset: 12, Type: "uint32", ScaleFactor: "DCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: DCV, Offset: 14, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: Tmp, Offset: 15, Type: "int16", Units: "C"},
					smdx.PointElement{Id: DCW, Offset: 16, Type: "int16", ScaleFactor: "DCW_SF", Units: "W"},
					smdx.PointElement{Id: DCPR, Offset: 17, Type: "uint16", Units: "Pct"},
					smdx.PointElement{Id: DCWh, Offset: 18, Type: "uint32", ScaleFactor: "DCWh_SF", Units: "Wh", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "string",
				Length: 14,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: InID, Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: InEvt, Offset: 1, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: EvtVnd, Offset: 3, Type: "bitfield32"},
					smdx.PointElement{Id: InDCA, Offset: 5, Type: "int16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: InDCAhr, Offset: 6, Type: "uint32", ScaleFactor: "DCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: InDCV, Offset: 8, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: InDCW, Offset: 9, Type: "int16", ScaleFactor: "DCWh_SF", Units: "W"},
					smdx.PointElement{Id: InDCWh, Offset: 10, Type: "uint32", Units: "Wh"},
					smdx.PointElement{Id: InDCPR, Offset: 12, Type: "uint16", Units: "Pct"},
					smdx.PointElement{Id: InN, Offset: 13, Type: "uint16"},
				},
			},
		}})
}
