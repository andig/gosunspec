// NOTICE
// This file was automatically generated by ../../../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package model111

import (
	"github.com/crabmusket/gosunspec/core"
	"github.com/crabmusket/gosunspec/smdx"
)

// Block111 - Inverter (Single Phase) FLOAT - Include this model for single phase inverter monitoring using float values

const (
	ModelID = 111
)

const (
	A       = "A"
	AphA    = "AphA"
	AphB    = "AphB"
	AphC    = "AphC"
	DCA     = "DCA"
	DCV     = "DCV"
	DCW     = "DCW"
	Evt1    = "Evt1"
	Evt2    = "Evt2"
	EvtVnd1 = "EvtVnd1"
	EvtVnd2 = "EvtVnd2"
	EvtVnd3 = "EvtVnd3"
	EvtVnd4 = "EvtVnd4"
	Hz      = "Hz"
	PF      = "PF"
	PPVphAB = "PPVphAB"
	PPVphBC = "PPVphBC"
	PPVphCA = "PPVphCA"
	PhVphA  = "PhVphA"
	PhVphB  = "PhVphB"
	PhVphC  = "PhVphC"
	St      = "St"
	StVnd   = "StVnd"
	TmpCab  = "TmpCab"
	TmpOt   = "TmpOt"
	TmpSnk  = "TmpSnk"
	TmpTrns = "TmpTrns"
	VA      = "VA"
	VAr     = "VAr"
	W       = "W"
	WH      = "WH"
)

type Block111 struct {
	A       float32         `sunspec:"offset=0"`
	AphA    float32         `sunspec:"offset=2"`
	AphB    float32         `sunspec:"offset=4"`
	AphC    float32         `sunspec:"offset=6"`
	PPVphAB float32         `sunspec:"offset=8"`
	PPVphBC float32         `sunspec:"offset=10"`
	PPVphCA float32         `sunspec:"offset=12"`
	PhVphA  float32         `sunspec:"offset=14"`
	PhVphB  float32         `sunspec:"offset=16"`
	PhVphC  float32         `sunspec:"offset=18"`
	W       float32         `sunspec:"offset=20"`
	Hz      float32         `sunspec:"offset=22"`
	VA      float32         `sunspec:"offset=24"`
	VAr     float32         `sunspec:"offset=26"`
	PF      float32         `sunspec:"offset=28"`
	WH      float32         `sunspec:"offset=30"`
	DCA     float32         `sunspec:"offset=32"`
	DCV     float32         `sunspec:"offset=34"`
	DCW     float32         `sunspec:"offset=36"`
	TmpCab  float32         `sunspec:"offset=38"`
	TmpSnk  float32         `sunspec:"offset=40"`
	TmpTrns float32         `sunspec:"offset=42"`
	TmpOt   float32         `sunspec:"offset=44"`
	St      core.Enum16     `sunspec:"offset=46"`
	StVnd   core.Enum16     `sunspec:"offset=47"`
	Evt1    core.Bitfield32 `sunspec:"offset=48"`
	Evt2    core.Bitfield32 `sunspec:"offset=50"`
	EvtVnd1 core.Bitfield32 `sunspec:"offset=52"`
	EvtVnd2 core.Bitfield32 `sunspec:"offset=54"`
	EvtVnd3 core.Bitfield32 `sunspec:"offset=56"`
	EvtVnd4 core.Bitfield32 `sunspec:"offset=58"`
}

func (self *Block111) GetId() core.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "inverter",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 60,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: A, Offset: 0, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: AphA, Offset: 2, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: AphB, Offset: 4, Type: "float32", Units: "A"},
					smdx.PointElement{Id: AphC, Offset: 6, Type: "float32", Units: "A"},
					smdx.PointElement{Id: PPVphAB, Offset: 8, Type: "float32", Units: "V"},
					smdx.PointElement{Id: PPVphBC, Offset: 10, Type: "float32", Units: "V"},
					smdx.PointElement{Id: PPVphCA, Offset: 12, Type: "float32", Units: "V"},
					smdx.PointElement{Id: PhVphA, Offset: 14, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: PhVphB, Offset: 16, Type: "float32", Units: "V"},
					smdx.PointElement{Id: PhVphC, Offset: 18, Type: "float32", Units: "V"},
					smdx.PointElement{Id: W, Offset: 20, Type: "float32", Units: "W", Mandatory: true},
					smdx.PointElement{Id: Hz, Offset: 22, Type: "float32", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: VA, Offset: 24, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: VAr, Offset: 26, Type: "float32", Units: "var"},
					smdx.PointElement{Id: PF, Offset: 28, Type: "float32", Units: "Pct"},
					smdx.PointElement{Id: WH, Offset: 30, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: DCA, Offset: 32, Type: "float32", Units: "A"},
					smdx.PointElement{Id: DCV, Offset: 34, Type: "float32", Units: "V"},
					smdx.PointElement{Id: DCW, Offset: 36, Type: "float32", Units: "W"},
					smdx.PointElement{Id: TmpCab, Offset: 38, Type: "float32", Units: "C", Mandatory: true},
					smdx.PointElement{Id: TmpSnk, Offset: 40, Type: "float32", Units: "C"},
					smdx.PointElement{Id: TmpTrns, Offset: 42, Type: "float32", Units: "C"},
					smdx.PointElement{Id: TmpOt, Offset: 44, Type: "float32", Units: "C"},
					smdx.PointElement{Id: St, Offset: 46, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: StVnd, Offset: 47, Type: "enum16"},
					smdx.PointElement{Id: Evt1, Offset: 48, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: Evt2, Offset: 50, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: EvtVnd1, Offset: 52, Type: "bitfield32"},
					smdx.PointElement{Id: EvtVnd2, Offset: 54, Type: "bitfield32"},
					smdx.PointElement{Id: EvtVnd3, Offset: 56, Type: "bitfield32"},
					smdx.PointElement{Id: EvtVnd4, Offset: 58, Type: "bitfield32"},
				},
			},
		}})
}
