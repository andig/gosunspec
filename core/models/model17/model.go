// NOTICE
// This file was automatically generated by ../../../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package model17

import (
	"github.com/crabmusket/gosunspec/core"
	"github.com/crabmusket/gosunspec/core/typelabel"
	"github.com/crabmusket/gosunspec/smdx"
)

// Block17 - Serial Interface - Include this model for serial interface configuration support

const (
	ModelID = 17
)

const (
	Bits = "Bits"
	Dup  = "Dup"
	Flw  = "Flw"
	Nam  = "Nam"
	Pcol = "Pcol"
	Pty  = "Pty"
	Rte  = "Rte"
	Typ  = "Typ"
)

type Block17 struct {
	Nam  core.String `sunspec:"offset=0,len=4,access=rw"`
	Rte  uint32      `sunspec:"offset=4,access=rw"`
	Bits uint16      `sunspec:"offset=6,access=rw"`
	Pty  core.Enum16 `sunspec:"offset=7,access=rw"`
	Dup  core.Enum16 `sunspec:"offset=8,access=rw"`
	Flw  core.Enum16 `sunspec:"offset=9,access=rw"`
	Typ  core.Enum16 `sunspec:"offset=10"`
	Pcol core.Enum16 `sunspec:"offset=11"`
}

func (self *Block17) GetId() core.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "",
		Length: 12,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 12,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: Nam, Offset: 0, Type: typelabel.String, Access: "rw", Length: 4},
					smdx.PointElement{Id: Rte, Offset: 4, Type: typelabel.Uint32, Units: "bps", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: Bits, Offset: 6, Type: typelabel.Uint16, Access: "rw", Mandatory: true},
					smdx.PointElement{Id: Pty, Offset: 7, Type: typelabel.Enum16, Access: "rw", Mandatory: true},
					smdx.PointElement{Id: Dup, Offset: 8, Type: typelabel.Enum16, Access: "rw"},
					smdx.PointElement{Id: Flw, Offset: 9, Type: typelabel.Enum16, Access: "rw"},
					smdx.PointElement{Id: Typ, Offset: 10, Type: typelabel.Enum16},
					smdx.PointElement{Id: Pcol, Offset: 11, Type: typelabel.Enum16},
				},
			},
		}})
}
