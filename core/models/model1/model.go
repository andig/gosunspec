// NOTICE
// This file was automatically generated by ../../../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package model1

import (
	"github.com/crabmusket/gosunspec/core"
	"github.com/crabmusket/gosunspec/core/typelabel"
	"github.com/crabmusket/gosunspec/smdx"
)

// Block1 - Common - All SunSpec compliant devices must include this as the first model

const (
	ModelID = 1
)

const (
	DA  = "DA"
	Md  = "Md"
	Mn  = "Mn"
	Opt = "Opt"
	Pad = "Pad"
	SN  = "SN"
	Vr  = "Vr"
)

type Block1 struct {
	Mn  core.String `sunspec:"offset=0,len=16"`
	Md  core.String `sunspec:"offset=16,len=16"`
	Opt core.String `sunspec:"offset=32,len=8"`
	Vr  core.String `sunspec:"offset=40,len=8"`
	SN  core.String `sunspec:"offset=48,len=16"`
	DA  uint16      `sunspec:"offset=64,access=rw"`
	Pad core.Pad    `sunspec:"offset=65,access=r"`
}

func (self *Block1) GetId() core.ModelId {
	return ModelID
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     ModelID,
		Name:   "common",
		Length: 66,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 66,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: Mn, Offset: 0, Type: typelabel.String, Length: 16, Mandatory: true},
					smdx.PointElement{Id: Md, Offset: 16, Type: typelabel.String, Length: 16, Mandatory: true},
					smdx.PointElement{Id: Opt, Offset: 32, Type: typelabel.String, Length: 8},
					smdx.PointElement{Id: Vr, Offset: 40, Type: typelabel.String, Length: 8},
					smdx.PointElement{Id: SN, Offset: 48, Type: typelabel.String, Length: 16, Mandatory: true},
					smdx.PointElement{Id: DA, Offset: 64, Type: typelabel.Uint16, Access: "rw"},
					smdx.PointElement{Id: Pad, Offset: 65, Type: typelabel.Pad, Access: "r"},
				},
			},
		}})
}
