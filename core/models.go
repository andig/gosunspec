// NOTICE
// This file was automatically generated by ../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package core

// Block1 - Common - All SunSpec compliant devices must include this as the first model

type Block1 struct {
	Mn  String `sunspec:"offset=0,len=16"`
	Md  String `sunspec:"offset=16,len=16"`
	Opt String `sunspec:"offset=32,len=8"`
	Vr  String `sunspec:"offset=40,len=8"`
	SN  String `sunspec:"offset=48,len=16"`
	DA  uint16 `sunspec:"offset=64,access=rw"`
	Pad Pad    `sunspec:"offset=65,access=r"`
}

func (self *Block1) GetId() ModelId {
	return 1
}

// Block2 - Basic Aggregator - Aggregates a collection of models for a given model id

type Block2 struct {
	AID    uint16     `sunspec:"offset=0"`
	N      uint16     `sunspec:"offset=1"`
	UN     uint16     `sunspec:"offset=2"`
	St     Enum16     `sunspec:"offset=3"`
	StVnd  Enum16     `sunspec:"offset=4"`
	Evt    Bitfield32 `sunspec:"offset=5"`
	EvtVnd Bitfield32 `sunspec:"offset=7"`
	Ctl    Enum16     `sunspec:"offset=9"`
	CtlVnd Enum32     `sunspec:"offset=10"`
	CtlVl  Enum32     `sunspec:"offset=12"`
}

func (self *Block2) GetId() ModelId {
	return 2
}

// Block3 - Secure Dataset Read Request - Request a digial signature over a specifed set of data registers

type Block3Repeat struct {
	DS uint16 `sunspec:"offset=0,access=r"`
}

type Block3 struct {
	X     uint16 `sunspec:"offset=0,access=rw"`
	Off1  uint16 `sunspec:"offset=1,access=rw"`
	Off2  uint16 `sunspec:"offset=2,access=rw"`
	Off3  uint16 `sunspec:"offset=3,access=rw"`
	Off4  uint16 `sunspec:"offset=4,access=rw"`
	Off5  uint16 `sunspec:"offset=5,access=rw"`
	Off6  uint16 `sunspec:"offset=6,access=rw"`
	Off7  uint16 `sunspec:"offset=7,access=rw"`
	Off8  uint16 `sunspec:"offset=8,access=rw"`
	Off9  uint16 `sunspec:"offset=9,access=rw"`
	Off10 uint16 `sunspec:"offset=10,access=rw"`
	Off11 uint16 `sunspec:"offset=11,access=rw"`
	Off12 uint16 `sunspec:"offset=12,access=rw"`
	Off13 uint16 `sunspec:"offset=13,access=rw"`
	Off14 uint16 `sunspec:"offset=14,access=rw"`
	Off15 uint16 `sunspec:"offset=15,access=rw"`
	Off16 uint16 `sunspec:"offset=16,access=rw"`
	Off17 uint16 `sunspec:"offset=17,access=rw"`
	Off18 uint16 `sunspec:"offset=18,access=rw"`
	Off19 uint16 `sunspec:"offset=19,access=rw"`
	Off20 uint16 `sunspec:"offset=20,access=rw"`
	Off21 uint16 `sunspec:"offset=21,access=rw"`
	Off22 uint16 `sunspec:"offset=22,access=rw"`
	Off23 uint16 `sunspec:"offset=23,access=rw"`
	Off24 uint16 `sunspec:"offset=24,access=rw"`
	Off25 uint16 `sunspec:"offset=25,access=rw"`
	Off26 uint16 `sunspec:"offset=26,access=rw"`
	Off27 uint16 `sunspec:"offset=27,access=rw"`
	Off28 uint16 `sunspec:"offset=28,access=rw"`
	Off29 uint16 `sunspec:"offset=29,access=rw"`
	Off30 uint16 `sunspec:"offset=30,access=rw"`
	Off31 uint16 `sunspec:"offset=31,access=rw"`
	Off32 uint16 `sunspec:"offset=32,access=rw"`
	Off33 uint16 `sunspec:"offset=33,access=rw"`
	Off34 uint16 `sunspec:"offset=34,access=rw"`
	Off35 uint16 `sunspec:"offset=35,access=rw"`
	Off36 uint16 `sunspec:"offset=36,access=rw"`
	Off37 uint16 `sunspec:"offset=37,access=rw"`
	Off38 uint16 `sunspec:"offset=38,access=rw"`
	Off39 uint16 `sunspec:"offset=39,access=rw"`
	Off40 uint16 `sunspec:"offset=40,access=rw"`
	Off41 uint16 `sunspec:"offset=41,access=rw"`
	Off42 uint16 `sunspec:"offset=42,access=rw"`
	Off43 uint16 `sunspec:"offset=43,access=rw"`
	Off44 uint16 `sunspec:"offset=44,access=rw"`
	Off45 uint16 `sunspec:"offset=45,access=rw"`
	Off46 uint16 `sunspec:"offset=46,access=rw"`
	Off47 uint16 `sunspec:"offset=47,access=rw"`
	Off48 uint16 `sunspec:"offset=48,access=rw"`
	Off49 uint16 `sunspec:"offset=49,access=rw"`
	Off50 uint16 `sunspec:"offset=50,access=rw"`
	Ts    uint32 `sunspec:"offset=51,access=rw"`
	Ms    uint16 `sunspec:"offset=53,access=rw"`
	Seq   uint16 `sunspec:"offset=54,access=rw"`
	Role  uint16 `sunspec:"offset=55,access=rw"`
	Alg   Enum16 `sunspec:"offset=56,access=r"`
	N     uint16 `sunspec:"offset=57,access=r"`

	Repeats []Block3Repeat
}

func (self *Block3) GetId() ModelId {
	return 3
}

// Block4 - Secure Dataset Read Response - Compute a digial signature over a specifed set of data registers

type Block4Repeat struct {
	DS uint16 `sunspec:"offset=0,access=r"`
}

type Block4 struct {
	RqSeq uint16 `sunspec:"offset=0,access=r"`
	Sts   uint16 `sunspec:"offset=1,access=r"`
	X     uint16 `sunspec:"offset=2,access=r"`
	Val1  uint16 `sunspec:"offset=3,access=r"`
	Val2  uint16 `sunspec:"offset=4,access=r"`
	Val3  uint16 `sunspec:"offset=5,access=r"`
	Val4  uint16 `sunspec:"offset=6,access=r"`
	Val5  uint16 `sunspec:"offset=7,access=r"`
	Val6  uint16 `sunspec:"offset=8,access=r"`
	Val7  uint16 `sunspec:"offset=9,access=r"`
	Val8  uint16 `sunspec:"offset=10,access=r"`
	Val9  uint16 `sunspec:"offset=11,access=r"`
	Val10 uint16 `sunspec:"offset=12,access=r"`
	Val11 uint16 `sunspec:"offset=13,access=r"`
	Val12 uint16 `sunspec:"offset=14,access=r"`
	Val13 uint16 `sunspec:"offset=15,access=r"`
	Val14 uint16 `sunspec:"offset=16,access=r"`
	Val15 uint16 `sunspec:"offset=17,access=r"`
	Val16 uint16 `sunspec:"offset=18,access=r"`
	Val17 uint16 `sunspec:"offset=19,access=r"`
	Val18 uint16 `sunspec:"offset=20,access=r"`
	Val19 uint16 `sunspec:"offset=21,access=r"`
	Val20 uint16 `sunspec:"offset=22,access=r"`
	Val21 uint16 `sunspec:"offset=23,access=r"`
	Val22 uint16 `sunspec:"offset=24,access=r"`
	Val23 uint16 `sunspec:"offset=25,access=r"`
	Val24 uint16 `sunspec:"offset=26,access=r"`
	Val25 uint16 `sunspec:"offset=27,access=r"`
	Val26 uint16 `sunspec:"offset=28,access=r"`
	Val27 uint16 `sunspec:"offset=29,access=r"`
	Val28 uint16 `sunspec:"offset=30,access=r"`
	Val29 uint16 `sunspec:"offset=31,access=r"`
	Val30 uint16 `sunspec:"offset=32,access=r"`
	Val31 uint16 `sunspec:"offset=33,access=r"`
	Val32 uint16 `sunspec:"offset=34,access=r"`
	Val33 uint16 `sunspec:"offset=35,access=r"`
	Val34 uint16 `sunspec:"offset=36,access=r"`
	Val35 uint16 `sunspec:"offset=37,access=r"`
	Val36 uint16 `sunspec:"offset=38,access=r"`
	Val37 uint16 `sunspec:"offset=39,access=r"`
	Val38 uint16 `sunspec:"offset=40,access=r"`
	Val39 uint16 `sunspec:"offset=41,access=r"`
	Val40 uint16 `sunspec:"offset=42,access=r"`
	Val41 uint16 `sunspec:"offset=43,access=r"`
	Val42 uint16 `sunspec:"offset=44,access=r"`
	Val43 uint16 `sunspec:"offset=45,access=r"`
	Val44 uint16 `sunspec:"offset=46,access=r"`
	Val45 uint16 `sunspec:"offset=47,access=r"`
	Val46 uint16 `sunspec:"offset=48,access=r"`
	Val47 uint16 `sunspec:"offset=49,access=r"`
	Val48 uint16 `sunspec:"offset=50,access=r"`
	Val49 uint16 `sunspec:"offset=51,access=r"`
	Val50 uint16 `sunspec:"offset=52,access=r"`
	Ts    uint32 `sunspec:"offset=53,access=r"`
	Ms    uint16 `sunspec:"offset=55,access=r"`
	Seq   uint16 `sunspec:"offset=56,access=r"`
	Alm   Enum16 `sunspec:"offset=57"`
	Alg   Enum16 `sunspec:"offset=58,access=r"`
	N     uint16 `sunspec:"offset=59,access=r"`

	Repeats []Block4Repeat
}

func (self *Block4) GetId() ModelId {
	return 4
}

// Block5 - Secure Write Request - Include a digial signature along with the control data

type Block5Repeat struct {
	DS uint16 `sunspec:"offset=0,access=rw"`
}

type Block5 struct {
	X     uint16 `sunspec:"offset=0,access=rw"`
	Off1  uint16 `sunspec:"offset=1,access=rw"`
	Val1  uint16 `sunspec:"offset=2,access=rw"`
	Off2  uint16 `sunspec:"offset=3,access=rw"`
	Val2  uint16 `sunspec:"offset=4,access=rw"`
	Off3  uint16 `sunspec:"offset=5,access=rw"`
	Val3  uint16 `sunspec:"offset=6,access=rw"`
	Off4  uint16 `sunspec:"offset=7,access=rw"`
	Val4  uint16 `sunspec:"offset=8,access=rw"`
	Off5  uint16 `sunspec:"offset=9,access=rw"`
	Val5  uint16 `sunspec:"offset=10,access=rw"`
	Off6  uint16 `sunspec:"offset=11,access=rw"`
	Val6  uint16 `sunspec:"offset=12,access=rw"`
	Off7  uint16 `sunspec:"offset=13,access=rw"`
	Val7  uint16 `sunspec:"offset=14,access=rw"`
	Off8  uint16 `sunspec:"offset=15,access=rw"`
	Val8  uint16 `sunspec:"offset=16,access=rw"`
	Off9  uint16 `sunspec:"offset=17,access=rw"`
	Val9  uint16 `sunspec:"offset=18,access=rw"`
	Off10 uint16 `sunspec:"offset=19,access=rw"`
	Val10 uint16 `sunspec:"offset=20,access=rw"`
	Off11 uint16 `sunspec:"offset=21,access=rw"`
	Val11 uint16 `sunspec:"offset=22,access=rw"`
	Off12 uint16 `sunspec:"offset=23,access=rw"`
	Val12 uint16 `sunspec:"offset=24,access=rw"`
	Off13 uint16 `sunspec:"offset=25,access=rw"`
	Val13 uint16 `sunspec:"offset=26,access=rw"`
	Off14 uint16 `sunspec:"offset=27,access=rw"`
	Val14 uint16 `sunspec:"offset=28,access=rw"`
	Off15 uint16 `sunspec:"offset=29,access=rw"`
	Val15 uint16 `sunspec:"offset=30,access=rw"`
	Off16 uint16 `sunspec:"offset=31,access=rw"`
	Val16 uint16 `sunspec:"offset=32,access=rw"`
	Off17 uint16 `sunspec:"offset=33,access=rw"`
	Val17 uint16 `sunspec:"offset=34,access=rw"`
	Off18 uint16 `sunspec:"offset=35,access=rw"`
	Val18 uint16 `sunspec:"offset=36,access=rw"`
	Off19 uint16 `sunspec:"offset=37,access=rw"`
	Val19 uint16 `sunspec:"offset=38,access=rw"`
	Off20 uint16 `sunspec:"offset=39,access=rw"`
	Val20 uint16 `sunspec:"offset=40,access=rw"`
	Off21 uint16 `sunspec:"offset=41,access=rw"`
	Val21 uint16 `sunspec:"offset=42,access=rw"`
	Off22 uint16 `sunspec:"offset=43,access=rw"`
	Val22 uint16 `sunspec:"offset=44,access=rw"`
	Off23 uint16 `sunspec:"offset=45,access=rw"`
	Val23 uint16 `sunspec:"offset=46,access=rw"`
	Off24 uint16 `sunspec:"offset=47,access=rw"`
	Val24 uint16 `sunspec:"offset=48,access=rw"`
	Off25 uint16 `sunspec:"offset=49,access=rw"`
	Val25 uint16 `sunspec:"offset=50,access=rw"`
	Off26 uint16 `sunspec:"offset=51,access=rw"`
	Val26 uint16 `sunspec:"offset=52,access=rw"`
	Off27 uint16 `sunspec:"offset=53,access=rw"`
	Val27 uint16 `sunspec:"offset=54,access=rw"`
	Off28 uint16 `sunspec:"offset=55,access=rw"`
	Val28 uint16 `sunspec:"offset=56,access=rw"`
	Off29 uint16 `sunspec:"offset=57,access=rw"`
	Val29 uint16 `sunspec:"offset=58,access=rw"`
	Off30 uint16 `sunspec:"offset=59,access=rw"`
	Val30 uint16 `sunspec:"offset=60,access=rw"`
	Off31 uint16 `sunspec:"offset=61,access=rw"`
	Val31 uint16 `sunspec:"offset=62,access=rw"`
	Off32 uint16 `sunspec:"offset=63,access=rw"`
	Val32 uint16 `sunspec:"offset=64,access=rw"`
	Off33 uint16 `sunspec:"offset=65,access=rw"`
	Val33 uint16 `sunspec:"offset=66,access=rw"`
	Off34 uint16 `sunspec:"offset=67,access=rw"`
	Val34 uint16 `sunspec:"offset=68,access=rw"`
	Off35 uint16 `sunspec:"offset=69,access=rw"`
	Val35 uint16 `sunspec:"offset=70,access=rw"`
	Off36 uint16 `sunspec:"offset=71,access=rw"`
	Val36 uint16 `sunspec:"offset=72,access=rw"`
	Off37 uint16 `sunspec:"offset=73,access=rw"`
	Val37 uint16 `sunspec:"offset=74,access=rw"`
	Off38 uint16 `sunspec:"offset=75,access=rw"`
	Val38 uint16 `sunspec:"offset=76,access=rw"`
	Off39 uint16 `sunspec:"offset=77,access=rw"`
	Val39 uint16 `sunspec:"offset=78,access=rw"`
	Off40 uint16 `sunspec:"offset=79,access=rw"`
	Val40 uint16 `sunspec:"offset=80,access=rw"`
	Ts    uint32 `sunspec:"offset=81,access=rw"`
	Ms    uint16 `sunspec:"offset=83,access=rw"`
	Seq   uint16 `sunspec:"offset=84,access=rw"`
	Role  uint16 `sunspec:"offset=85,access=rw"`
	Alg   Enum16 `sunspec:"offset=86,access=rw"`
	N     uint16 `sunspec:"offset=87,access=rw"`

	Repeats []Block5Repeat
}

func (self *Block5) GetId() ModelId {
	return 5
}

// Block6 - Secure Write Sequential Request - Include a digial signature along with the control data

type Block6Repeat struct {
	DS uint16 `sunspec:"offset=0,access=rw"`
}

type Block6 struct {
	X     uint16 `sunspec:"offset=0,access=rw"`
	Off   uint16 `sunspec:"offset=1,access=rw"`
	Val1  uint16 `sunspec:"offset=2,access=rw"`
	Val2  uint16 `sunspec:"offset=3,access=rw"`
	Val3  uint16 `sunspec:"offset=4,access=rw"`
	Val4  uint16 `sunspec:"offset=5,access=rw"`
	Val5  uint16 `sunspec:"offset=6,access=rw"`
	Val6  uint16 `sunspec:"offset=7,access=rw"`
	Val7  uint16 `sunspec:"offset=8,access=rw"`
	Val8  uint16 `sunspec:"offset=9,access=rw"`
	Val9  uint16 `sunspec:"offset=10,access=rw"`
	Val10 uint16 `sunspec:"offset=11,access=rw"`
	Val11 uint16 `sunspec:"offset=12,access=rw"`
	Val12 uint16 `sunspec:"offset=13,access=rw"`
	Val13 uint16 `sunspec:"offset=14,access=rw"`
	Val14 uint16 `sunspec:"offset=15,access=rw"`
	Val15 uint16 `sunspec:"offset=16,access=rw"`
	Val16 uint16 `sunspec:"offset=17,access=rw"`
	Val17 uint16 `sunspec:"offset=18,access=rw"`
	Val18 uint16 `sunspec:"offset=19,access=rw"`
	Val19 uint16 `sunspec:"offset=20,access=rw"`
	Val20 uint16 `sunspec:"offset=21,access=rw"`
	Val21 uint16 `sunspec:"offset=22,access=rw"`
	Val22 uint16 `sunspec:"offset=23,access=rw"`
	Val23 uint16 `sunspec:"offset=24,access=rw"`
	Val24 uint16 `sunspec:"offset=25,access=rw"`
	Val25 uint16 `sunspec:"offset=26,access=rw"`
	Val26 uint16 `sunspec:"offset=27,access=rw"`
	Val27 uint16 `sunspec:"offset=28,access=rw"`
	Val28 uint16 `sunspec:"offset=29,access=rw"`
	Val29 uint16 `sunspec:"offset=30,access=rw"`
	Val30 uint16 `sunspec:"offset=31,access=rw"`
	Val31 uint16 `sunspec:"offset=32,access=rw"`
	Val32 uint16 `sunspec:"offset=33,access=rw"`
	Val33 uint16 `sunspec:"offset=34,access=rw"`
	Val34 uint16 `sunspec:"offset=35,access=rw"`
	Val35 uint16 `sunspec:"offset=36,access=rw"`
	Val36 uint16 `sunspec:"offset=37,access=rw"`
	Val37 uint16 `sunspec:"offset=38,access=rw"`
	Val38 uint16 `sunspec:"offset=39,access=rw"`
	Val39 uint16 `sunspec:"offset=40,access=rw"`
	Val40 uint16 `sunspec:"offset=41,access=rw"`
	Val41 uint16 `sunspec:"offset=42,access=rw"`
	Val42 uint16 `sunspec:"offset=43,access=rw"`
	Val43 uint16 `sunspec:"offset=44,access=rw"`
	Val44 uint16 `sunspec:"offset=45,access=rw"`
	Val45 uint16 `sunspec:"offset=46,access=rw"`
	Val46 uint16 `sunspec:"offset=47,access=rw"`
	Val47 uint16 `sunspec:"offset=48,access=rw"`
	Val48 uint16 `sunspec:"offset=49,access=rw"`
	Val49 uint16 `sunspec:"offset=50,access=rw"`
	Val50 uint16 `sunspec:"offset=51,access=rw"`
	Val51 uint16 `sunspec:"offset=52,access=rw"`
	Val52 uint16 `sunspec:"offset=53,access=rw"`
	Val53 uint16 `sunspec:"offset=54,access=rw"`
	Val54 uint16 `sunspec:"offset=55,access=rw"`
	Val55 uint16 `sunspec:"offset=56,access=rw"`
	Val56 uint16 `sunspec:"offset=57,access=rw"`
	Val57 uint16 `sunspec:"offset=58,access=rw"`
	Val58 uint16 `sunspec:"offset=59,access=rw"`
	Val59 uint16 `sunspec:"offset=60,access=rw"`
	Val60 uint16 `sunspec:"offset=61,access=rw"`
	Val61 uint16 `sunspec:"offset=62,access=rw"`
	Val62 uint16 `sunspec:"offset=63,access=rw"`
	Val63 uint16 `sunspec:"offset=64,access=rw"`
	Val64 uint16 `sunspec:"offset=65,access=rw"`
	Val65 uint16 `sunspec:"offset=66,access=rw"`
	Val66 uint16 `sunspec:"offset=67,access=rw"`
	Val67 uint16 `sunspec:"offset=68,access=rw"`
	Val68 uint16 `sunspec:"offset=69,access=rw"`
	Val69 uint16 `sunspec:"offset=70,access=rw"`
	Val70 uint16 `sunspec:"offset=71,access=rw"`
	Val71 uint16 `sunspec:"offset=72,access=rw"`
	Val72 uint16 `sunspec:"offset=73,access=rw"`
	Val73 uint16 `sunspec:"offset=74,access=rw"`
	Val74 uint16 `sunspec:"offset=75,access=rw"`
	Val75 uint16 `sunspec:"offset=76,access=rw"`
	Val76 uint16 `sunspec:"offset=77,access=rw"`
	Val77 uint16 `sunspec:"offset=78,access=rw"`
	Val78 uint16 `sunspec:"offset=79,access=rw"`
	Val79 uint16 `sunspec:"offset=80,access=rw"`
	Val80 uint16 `sunspec:"offset=81,access=rw"`
	Ts    uint32 `sunspec:"offset=82,access=rw"`
	Ms    uint16 `sunspec:"offset=84,access=rw"`
	Seq   uint16 `sunspec:"offset=85,access=rw"`
	Role  uint16 `sunspec:"offset=86,access=rw"`
	Rsrvd Pad    `sunspec:"offset=87,access=rw"`
	Alg   Enum16 `sunspec:"offset=88,access=rw"`
	N     uint16 `sunspec:"offset=89,access=rw"`

	Repeats []Block6Repeat
}

func (self *Block6) GetId() ModelId {
	return 6
}

// Block7 - Secure Write Response Model (DRAFT 1) - Include a digital signature over the response

type Block7Repeat struct {
	DS uint16 `sunspec:"offset=0,access=rw"`
}

type Block7 struct {
	RqSeq uint16 `sunspec:"offset=0,access=r"`
	Sts   Enum16 `sunspec:"offset=1,access=r"`
	Ts    uint32 `sunspec:"offset=2,access=r"`
	Ms    uint16 `sunspec:"offset=4,access=r"`
	Seq   uint16 `sunspec:"offset=5,access=r"`
	Alm   Enum16 `sunspec:"offset=6"`
	Rsrvd Pad    `sunspec:"offset=7,access=r"`
	Alg   Enum16 `sunspec:"offset=8,access=r"`
	N     uint16 `sunspec:"offset=9,access=rw"`

	Repeats []Block7Repeat
}

func (self *Block7) GetId() ModelId {
	return 7
}

// Block8 - Get Device Security Certificate - Security model for PKI

type Block8Repeat struct {
	Cert uint16 `sunspec:"offset=0,access=r"`
}

type Block8 struct {
	Fmt Enum16 `sunspec:"offset=0,access=r"`
	N   uint16 `sunspec:"offset=1,access=r"`

	Repeats []Block8Repeat
}

func (self *Block8) GetId() ModelId {
	return 8
}

// Block9 - Set Operator Security Certificate - Security model for PKI

type Block9Repeat struct {
	Cert uint16 `sunspec:"offset=0,access=rw"`
}

type Block9 struct {
	CertUID  uint16 `sunspec:"offset=0,access=rw"`
	CertRole uint16 `sunspec:"offset=1,access=rw"`
	Fmt      Enum16 `sunspec:"offset=2,access=rw"`
	Typ      Enum16 `sunspec:"offset=3,access=rw"`
	TotLn    uint16 `sunspec:"offset=4,access=rw"`
	FrgLn    uint16 `sunspec:"offset=5,access=rw"`
	Frg1     uint16 `sunspec:"offset=6,access=rw"`
	Frg2     uint16 `sunspec:"offset=7,access=rw"`
	Frg3     uint16 `sunspec:"offset=8,access=rw"`
	Frg4     uint16 `sunspec:"offset=9,access=rw"`
	Frg5     uint16 `sunspec:"offset=10,access=rw"`
	Frg6     uint16 `sunspec:"offset=11,access=rw"`
	Frg7     uint16 `sunspec:"offset=12,access=rw"`
	Frg8     uint16 `sunspec:"offset=13,access=rw"`
	Frg9     uint16 `sunspec:"offset=14,access=rw"`
	Frg10    uint16 `sunspec:"offset=15,access=rw"`
	Frg11    uint16 `sunspec:"offset=16,access=rw"`
	Frg12    uint16 `sunspec:"offset=17,access=rw"`
	Frg13    uint16 `sunspec:"offset=18,access=rw"`
	Frg14    uint16 `sunspec:"offset=19,access=rw"`
	Frg15    uint16 `sunspec:"offset=20,access=rw"`
	Frg16    uint16 `sunspec:"offset=21,access=rw"`
	Frg17    uint16 `sunspec:"offset=22,access=rw"`
	Frg18    uint16 `sunspec:"offset=23,access=rw"`
	Frg19    uint16 `sunspec:"offset=24,access=rw"`
	Frg20    uint16 `sunspec:"offset=25,access=rw"`
	Frg21    uint16 `sunspec:"offset=26,access=rw"`
	Frg22    uint16 `sunspec:"offset=27,access=rw"`
	Frg23    uint16 `sunspec:"offset=28,access=rw"`
	Frg24    uint16 `sunspec:"offset=29,access=rw"`
	Frg25    uint16 `sunspec:"offset=30,access=rw"`
	Frg26    uint16 `sunspec:"offset=31,access=rw"`
	Frg27    uint16 `sunspec:"offset=32,access=rw"`
	Frg28    uint16 `sunspec:"offset=33,access=rw"`
	Frg29    uint16 `sunspec:"offset=34,access=rw"`
	Frg30    uint16 `sunspec:"offset=35,access=rw"`
	Frg31    uint16 `sunspec:"offset=36,access=rw"`
	Frg32    uint16 `sunspec:"offset=37,access=rw"`
	Frg33    uint16 `sunspec:"offset=38,access=rw"`
	Frg34    uint16 `sunspec:"offset=39,access=rw"`
	Frg35    uint16 `sunspec:"offset=40,access=rw"`
	Frg36    uint16 `sunspec:"offset=41,access=rw"`
	Frg37    uint16 `sunspec:"offset=42,access=rw"`
	Frg38    uint16 `sunspec:"offset=43,access=rw"`
	Frg39    uint16 `sunspec:"offset=44,access=rw"`
	Frg40    uint16 `sunspec:"offset=45,access=rw"`
	Frg41    uint16 `sunspec:"offset=46,access=rw"`
	Frg42    uint16 `sunspec:"offset=47,access=rw"`
	Frg43    uint16 `sunspec:"offset=48,access=rw"`
	Frg44    uint16 `sunspec:"offset=49,access=rw"`
	Frg45    uint16 `sunspec:"offset=50,access=rw"`
	Frg46    uint16 `sunspec:"offset=51,access=rw"`
	Frg47    uint16 `sunspec:"offset=52,access=rw"`
	Frg48    uint16 `sunspec:"offset=53,access=rw"`
	Frg49    uint16 `sunspec:"offset=54,access=rw"`
	Frg50    uint16 `sunspec:"offset=55,access=rw"`
	Frg51    uint16 `sunspec:"offset=56,access=rw"`
	Frg52    uint16 `sunspec:"offset=57,access=rw"`
	Frg53    uint16 `sunspec:"offset=58,access=rw"`
	Frg54    uint16 `sunspec:"offset=59,access=rw"`
	Frg55    uint16 `sunspec:"offset=60,access=rw"`
	Frg56    uint16 `sunspec:"offset=61,access=rw"`
	Frg57    uint16 `sunspec:"offset=62,access=rw"`
	Frg58    uint16 `sunspec:"offset=63,access=rw"`
	Frg59    uint16 `sunspec:"offset=64,access=rw"`
	Frg60    uint16 `sunspec:"offset=65,access=rw"`
	Frg61    uint16 `sunspec:"offset=66,access=rw"`
	Frg62    uint16 `sunspec:"offset=67,access=rw"`
	Frg63    uint16 `sunspec:"offset=68,access=rw"`
	Frg64    uint16 `sunspec:"offset=69,access=rw"`
	Frg65    uint16 `sunspec:"offset=70,access=rw"`
	Frg66    uint16 `sunspec:"offset=71,access=rw"`
	Frg67    uint16 `sunspec:"offset=72,access=rw"`
	Frg68    uint16 `sunspec:"offset=73,access=rw"`
	Frg69    uint16 `sunspec:"offset=74,access=rw"`
	Frg70    uint16 `sunspec:"offset=75,access=rw"`
	Frg71    uint16 `sunspec:"offset=76,access=rw"`
	Frg72    uint16 `sunspec:"offset=77,access=rw"`
	Frg73    uint16 `sunspec:"offset=78,access=rw"`
	Frg74    uint16 `sunspec:"offset=79,access=rw"`
	Frg75    uint16 `sunspec:"offset=80,access=rw"`
	Frg78    uint16 `sunspec:"offset=81,access=rw"`
	Frg79    uint16 `sunspec:"offset=82,access=rw"`
	Frg80    uint16 `sunspec:"offset=83,access=rw"`
	Ts       uint32 `sunspec:"offset=84,access=rw"`
	Ms       uint16 `sunspec:"offset=86,access=rw"`
	Seq      uint16 `sunspec:"offset=87,access=rw"`
	UID      uint16 `sunspec:"offset=88,access=rw"`
	Role     uint16 `sunspec:"offset=89,access=rw"`
	Alg      Enum16 `sunspec:"offset=90,access=rw"`
	N        uint16 `sunspec:"offset=91,access=rw"`

	Repeats []Block9Repeat
}

func (self *Block9) GetId() ModelId {
	return 9
}

// Block10 - Communication Interface Header - To be included first for a complete interface description

type Block10 struct {
	St  Enum16 `sunspec:"offset=0"`
	Ctl uint16 `sunspec:"offset=1,access=rw"`
	Typ Enum16 `sunspec:"offset=2"`
	Pad Pad    `sunspec:"offset=3"`
}

func (self *Block10) GetId() ModelId {
	return 10
}

// Block11 - Ethernet Link Layer - Include to support a wired ethernet port

type Block11 struct {
	Spd    uint16     `sunspec:"offset=0"`
	CfgSt  Bitfield16 `sunspec:"offset=1"`
	St     Enum16     `sunspec:"offset=2"`
	MAC    EUI48      `sunspec:"offset=3"`
	Nam    String     `sunspec:"offset=7,len=4,access=rw"`
	Ctl    Bitfield16 `sunspec:"offset=11,access=rw"`
	FrcSpd uint16     `sunspec:"offset=12,access=rw"`
}

func (self *Block11) GetId() ModelId {
	return 11
}

// Block12 - IPv4 - Include to support an IPv4 protocol stack on this interface

type Block12 struct {
	Nam     String     `sunspec:"offset=0,len=4,access=rw"`
	CfgSt   Enum16     `sunspec:"offset=4"`
	ChgSt   Bitfield16 `sunspec:"offset=5"`
	Cap     Bitfield16 `sunspec:"offset=6"`
	Cfg     Enum16     `sunspec:"offset=7,access=rw"`
	Ctl     Enum16     `sunspec:"offset=8,access=rw"`
	Addr    String     `sunspec:"offset=9,len=8,access=rw"`
	Msk     String     `sunspec:"offset=17,len=8,access=rw"`
	Gw      String     `sunspec:"offset=25,len=8,access=rw"`
	DNS1    String     `sunspec:"offset=33,len=8,access=rw"`
	DNS2    String     `sunspec:"offset=41,len=8,access=rw"`
	NTP1    String     `sunspec:"offset=49,len=12,access=rw"`
	NTP2    String     `sunspec:"offset=61,len=12,access=rw"`
	DomNam  String     `sunspec:"offset=73,len=12,access=rw"`
	HostNam String     `sunspec:"offset=85,len=12,access=rw"`
	Pad     Pad        `sunspec:"offset=97"`
}

func (self *Block12) GetId() ModelId {
	return 12
}

// Block13 - IPv6 - Include to support an IPv6 protocol stack on this interface

type Block13 struct {
	Nam     String     `sunspec:"offset=0,len=4,access=rw"`
	CfgSt   Enum16     `sunspec:"offset=4"`
	ChgSt   Bitfield16 `sunspec:"offset=5"`
	Cap     Bitfield16 `sunspec:"offset=6"`
	Cfg     Enum16     `sunspec:"offset=7,access=rw"`
	Ctl     Enum16     `sunspec:"offset=8,access=rw"`
	Addr    String     `sunspec:"offset=9,len=20,access=rw"`
	CIDR    String     `sunspec:"offset=29,len=20,access=rw"`
	Gw      String     `sunspec:"offset=49,len=20,access=rw"`
	DNS1    String     `sunspec:"offset=69,len=20,access=rw"`
	DNS2    String     `sunspec:"offset=89,len=20,access=rw"`
	NTP1    String     `sunspec:"offset=109,len=20,access=rw"`
	NTP2    String     `sunspec:"offset=129,len=20,access=rw"`
	DomNam  String     `sunspec:"offset=149,len=12,access=rw"`
	HostNam String     `sunspec:"offset=161,len=12,access=rw"`
	Pad     Pad        `sunspec:"offset=173"`
}

func (self *Block13) GetId() ModelId {
	return 13
}

// Block14 - Proxy Server - Include this block to allow for a proxy server

type Block14 struct {
	Nam  String     `sunspec:"offset=0,len=4,access=rw"`
	Cap  Bitfield16 `sunspec:"offset=4,access=rw"`
	Cfg  Enum16     `sunspec:"offset=5,access=rw"`
	Typ  Bitfield16 `sunspec:"offset=6,access=rw"`
	Addr String     `sunspec:"offset=7,len=20,access=rw"`
	Port uint16     `sunspec:"offset=27,access=rw"`
	User String     `sunspec:"offset=28,len=12,access=rw"`
	Pw   String     `sunspec:"offset=40,len=12,access=rw"`
}

func (self *Block14) GetId() ModelId {
	return 14
}

// Block15 - Interface Counters Model - Interface counters

type Block15 struct {
	Clr       uint16 `sunspec:"offset=0,access=rw"`
	InCnt     Acc32  `sunspec:"offset=1"`
	InUcCnt   Acc32  `sunspec:"offset=3"`
	InNUcCnt  Acc32  `sunspec:"offset=5"`
	InDscCnt  Acc32  `sunspec:"offset=7"`
	InErrCnt  Acc32  `sunspec:"offset=9"`
	InUnkCnt  Acc32  `sunspec:"offset=11"`
	OutCnt    Acc32  `sunspec:"offset=13"`
	OutUcCnt  Acc32  `sunspec:"offset=15"`
	OutNUcCnt Acc32  `sunspec:"offset=17"`
	OutDscCnt Acc32  `sunspec:"offset=19"`
	OutErrCnt Acc32  `sunspec:"offset=21"`
	Pad       Pad    `sunspec:"offset=23"`
}

func (self *Block15) GetId() ModelId {
	return 15
}

// Block16 - Simple IP Network - Include this model for a simple IPv4 network stack

type Block16 struct {
	Nam    String     `sunspec:"offset=0,len=4,access=rw"`
	Cfg    Enum16     `sunspec:"offset=4"`
	Ctl    Enum16     `sunspec:"offset=5,access=rw"`
	Addr   String     `sunspec:"offset=6,len=8,access=rw"`
	Msk    String     `sunspec:"offset=14,len=8,access=rw"`
	Gw     String     `sunspec:"offset=22,len=8,access=rw"`
	DNS1   String     `sunspec:"offset=30,len=8,access=rw"`
	DNS2   String     `sunspec:"offset=38,len=8,access=rw"`
	MAC    uint64     `sunspec:"offset=46,access=r"`
	LnkCtl Bitfield16 `sunspec:"offset=50,access=rw"`
	Pad    Pad        `sunspec:"offset=51"`
}

func (self *Block16) GetId() ModelId {
	return 16
}

// Block17 - Serial Interface - Include this model for serial interface configuration support

type Block17 struct {
	Nam  String `sunspec:"offset=0,len=4,access=rw"`
	Rte  uint32 `sunspec:"offset=4,access=rw"`
	Bits uint16 `sunspec:"offset=6,access=rw"`
	Pty  Enum16 `sunspec:"offset=7,access=rw"`
	Dup  Enum16 `sunspec:"offset=8,access=rw"`
	Flw  Enum16 `sunspec:"offset=9,access=rw"`
	Typ  Enum16 `sunspec:"offset=10"`
	Pcol Enum16 `sunspec:"offset=11"`
}

func (self *Block17) GetId() ModelId {
	return 17
}

// Block18 - Cellular Link - Include this model to support a cellular interface link

type Block18 struct {
	Nam  String `sunspec:"offset=0,len=4,access=rw"`
	IMEI uint32 `sunspec:"offset=4,access=rw"`
	APN  String `sunspec:"offset=6,len=4,access=rw"`
	Num  String `sunspec:"offset=10,len=6,access=rw"`
	Pin  String `sunspec:"offset=16,len=6,access=rw"`
}

func (self *Block18) GetId() ModelId {
	return 18
}

// Block19 - PPP Link - Include this model to configure a Point-to-Point Protocol link

type Block19 struct {
	Nam    String `sunspec:"offset=0,len=4,access=rw"`
	Rte    uint32 `sunspec:"offset=4,access=rw"`
	Bits   uint16 `sunspec:"offset=6,access=rw"`
	Pty    Enum16 `sunspec:"offset=7,access=rw"`
	Dup    Enum16 `sunspec:"offset=8,access=rw"`
	Flw    Enum16 `sunspec:"offset=9,access=rw"`
	Auth   Enum16 `sunspec:"offset=10"`
	UsrNam String `sunspec:"offset=11,len=12"`
	Pw     String `sunspec:"offset=23,len=6"`
	Pad    Pad    `sunspec:"offset=29"`
}

func (self *Block19) GetId() ModelId {
	return 19
}

// Block101 - Inverter (Single Phase) - Include this model for single phase inverter monitoring

type Block101 struct {
	A       uint16      `sunspec:"offset=0,sf=A_SF"`
	AphA    uint16      `sunspec:"offset=1,sf=A_SF"`
	AphB    uint16      `sunspec:"offset=2,sf=A_SF"`
	AphC    uint16      `sunspec:"offset=3,sf=A_SF"`
	A_SF    ScaleFactor `sunspec:"offset=4"`
	PPVphAB uint16      `sunspec:"offset=5,sf=V_SF"`
	PPVphBC uint16      `sunspec:"offset=6,sf=V_SF"`
	PPVphCA uint16      `sunspec:"offset=7,sf=V_SF"`
	PhVphA  uint16      `sunspec:"offset=8,sf=V_SF"`
	PhVphB  uint16      `sunspec:"offset=9,sf=V_SF"`
	PhVphC  uint16      `sunspec:"offset=10,sf=V_SF"`
	V_SF    ScaleFactor `sunspec:"offset=11"`
	W       int16       `sunspec:"offset=12,sf=W_SF"`
	W_SF    ScaleFactor `sunspec:"offset=13"`
	Hz      uint16      `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF   ScaleFactor `sunspec:"offset=15"`
	VA      int16       `sunspec:"offset=16,sf=VA_SF"`
	VA_SF   ScaleFactor `sunspec:"offset=17"`
	VAr     int16       `sunspec:"offset=18,sf=VAr_SF"`
	VAr_SF  ScaleFactor `sunspec:"offset=19"`
	PF      int16       `sunspec:"offset=20,sf=PF_SF"`
	PF_SF   ScaleFactor `sunspec:"offset=21"`
	WH      Acc32       `sunspec:"offset=22,sf=WH_SF"`
	WH_SF   ScaleFactor `sunspec:"offset=24"`
	DCA     uint16      `sunspec:"offset=25,sf=DCA_SF"`
	DCA_SF  ScaleFactor `sunspec:"offset=26"`
	DCV     uint16      `sunspec:"offset=27,sf=DCV_SF"`
	DCV_SF  ScaleFactor `sunspec:"offset=28"`
	DCW     int16       `sunspec:"offset=29,sf=DCW_SF"`
	DCW_SF  ScaleFactor `sunspec:"offset=30"`
	TmpCab  int16       `sunspec:"offset=31,sf=Tmp_SF"`
	TmpSnk  int16       `sunspec:"offset=32,sf=Tmp_SF"`
	TmpTrns int16       `sunspec:"offset=33,sf=Tmp_SF"`
	TmpOt   int16       `sunspec:"offset=34,sf=Tmp_SF"`
	Tmp_SF  ScaleFactor `sunspec:"offset=35"`
	St      Enum16      `sunspec:"offset=36"`
	StVnd   Enum16      `sunspec:"offset=37"`
	Evt1    Bitfield32  `sunspec:"offset=38"`
	Evt2    Bitfield32  `sunspec:"offset=40"`
	EvtVnd1 Bitfield32  `sunspec:"offset=42"`
	EvtVnd2 Bitfield32  `sunspec:"offset=44"`
	EvtVnd3 Bitfield32  `sunspec:"offset=46"`
	EvtVnd4 Bitfield32  `sunspec:"offset=48"`
}

func (self *Block101) GetId() ModelId {
	return 101
}

// Block102 - Inverter (Split-Phase) - Include this model for split phase inverter monitoring

type Block102 struct {
	A       uint16      `sunspec:"offset=0,sf=A_SF"`
	AphA    uint16      `sunspec:"offset=1,sf=A_SF"`
	AphB    uint16      `sunspec:"offset=2,sf=A_SF"`
	AphC    uint16      `sunspec:"offset=3,sf=A_SF"`
	A_SF    ScaleFactor `sunspec:"offset=4"`
	PPVphAB uint16      `sunspec:"offset=5,sf=V_SF"`
	PPVphBC uint16      `sunspec:"offset=6,sf=V_SF"`
	PPVphCA uint16      `sunspec:"offset=7,sf=V_SF"`
	PhVphA  uint16      `sunspec:"offset=8,sf=V_SF"`
	PhVphB  uint16      `sunspec:"offset=9,sf=V_SF"`
	PhVphC  uint16      `sunspec:"offset=10,sf=V_SF"`
	V_SF    ScaleFactor `sunspec:"offset=11"`
	W       int16       `sunspec:"offset=12,sf=W_SF"`
	W_SF    ScaleFactor `sunspec:"offset=13"`
	Hz      uint16      `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF   ScaleFactor `sunspec:"offset=15"`
	VA      int16       `sunspec:"offset=16,sf=VA_SF"`
	VA_SF   ScaleFactor `sunspec:"offset=17"`
	VAr     int16       `sunspec:"offset=18,sf=VAr_SF"`
	VAr_SF  ScaleFactor `sunspec:"offset=19"`
	PF      int16       `sunspec:"offset=20,sf=PF_SF"`
	PF_SF   ScaleFactor `sunspec:"offset=21"`
	WH      Acc32       `sunspec:"offset=22,sf=WH_SF"`
	WH_SF   ScaleFactor `sunspec:"offset=24"`
	DCA     uint16      `sunspec:"offset=25,sf=DCA_SF"`
	DCA_SF  ScaleFactor `sunspec:"offset=26"`
	DCV     uint16      `sunspec:"offset=27,sf=DCV_SF"`
	DCV_SF  ScaleFactor `sunspec:"offset=28"`
	DCW     int16       `sunspec:"offset=29,sf=DCW_SF"`
	DCW_SF  ScaleFactor `sunspec:"offset=30"`
	TmpCab  int16       `sunspec:"offset=31,sf=Tmp_SF"`
	TmpSnk  int16       `sunspec:"offset=32,sf=Tmp_SF"`
	TmpTrns int16       `sunspec:"offset=33,sf=Tmp_SF"`
	TmpOt   int16       `sunspec:"offset=34,sf=Tmp_SF"`
	Tmp_SF  ScaleFactor `sunspec:"offset=35"`
	St      Enum16      `sunspec:"offset=36"`
	StVnd   Enum16      `sunspec:"offset=37"`
	Evt1    Bitfield32  `sunspec:"offset=38"`
	Evt2    Bitfield32  `sunspec:"offset=40"`
	EvtVnd1 Bitfield32  `sunspec:"offset=42"`
	EvtVnd2 Bitfield32  `sunspec:"offset=44"`
	EvtVnd3 Bitfield32  `sunspec:"offset=46"`
	EvtVnd4 Bitfield32  `sunspec:"offset=48"`
}

func (self *Block102) GetId() ModelId {
	return 102
}

// Block103 - Inverter (Three Phase) - Include this model for three phase inverter monitoring

type Block103 struct {
	A       uint16      `sunspec:"offset=0,sf=A_SF"`
	AphA    uint16      `sunspec:"offset=1,sf=A_SF"`
	AphB    uint16      `sunspec:"offset=2,sf=A_SF"`
	AphC    uint16      `sunspec:"offset=3,sf=A_SF"`
	A_SF    ScaleFactor `sunspec:"offset=4"`
	PPVphAB uint16      `sunspec:"offset=5,sf=V_SF"`
	PPVphBC uint16      `sunspec:"offset=6,sf=V_SF"`
	PPVphCA uint16      `sunspec:"offset=7,sf=V_SF"`
	PhVphA  uint16      `sunspec:"offset=8,sf=V_SF"`
	PhVphB  uint16      `sunspec:"offset=9,sf=V_SF"`
	PhVphC  uint16      `sunspec:"offset=10,sf=V_SF"`
	V_SF    ScaleFactor `sunspec:"offset=11"`
	W       int16       `sunspec:"offset=12,sf=W_SF"`
	W_SF    ScaleFactor `sunspec:"offset=13"`
	Hz      uint16      `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF   ScaleFactor `sunspec:"offset=15"`
	VA      int16       `sunspec:"offset=16,sf=VA_SF"`
	VA_SF   ScaleFactor `sunspec:"offset=17"`
	VAr     int16       `sunspec:"offset=18,sf=VAr_SF"`
	VAr_SF  ScaleFactor `sunspec:"offset=19"`
	PF      int16       `sunspec:"offset=20,sf=PF_SF"`
	PF_SF   ScaleFactor `sunspec:"offset=21"`
	WH      Acc32       `sunspec:"offset=22,sf=WH_SF"`
	WH_SF   ScaleFactor `sunspec:"offset=24"`
	DCA     uint16      `sunspec:"offset=25,sf=DCA_SF"`
	DCA_SF  ScaleFactor `sunspec:"offset=26"`
	DCV     uint16      `sunspec:"offset=27,sf=DCV_SF"`
	DCV_SF  ScaleFactor `sunspec:"offset=28"`
	DCW     int16       `sunspec:"offset=29,sf=DCW_SF"`
	DCW_SF  ScaleFactor `sunspec:"offset=30"`
	TmpCab  int16       `sunspec:"offset=31,sf=Tmp_SF"`
	TmpSnk  int16       `sunspec:"offset=32,sf=Tmp_SF"`
	TmpTrns int16       `sunspec:"offset=33,sf=Tmp_SF"`
	TmpOt   int16       `sunspec:"offset=34,sf=Tmp_SF"`
	Tmp_SF  ScaleFactor `sunspec:"offset=35"`
	St      Enum16      `sunspec:"offset=36"`
	StVnd   Enum16      `sunspec:"offset=37"`
	Evt1    Bitfield32  `sunspec:"offset=38"`
	Evt2    Bitfield32  `sunspec:"offset=40"`
	EvtVnd1 Bitfield32  `sunspec:"offset=42"`
	EvtVnd2 Bitfield32  `sunspec:"offset=44"`
	EvtVnd3 Bitfield32  `sunspec:"offset=46"`
	EvtVnd4 Bitfield32  `sunspec:"offset=48"`
}

func (self *Block103) GetId() ModelId {
	return 103
}

// Block111 - Inverter (Single Phase) FLOAT - Include this model for single phase inverter monitoring using float values

type Block111 struct {
	A       float32    `sunspec:"offset=0"`
	AphA    float32    `sunspec:"offset=2"`
	AphB    float32    `sunspec:"offset=4"`
	AphC    float32    `sunspec:"offset=6"`
	PPVphAB float32    `sunspec:"offset=8"`
	PPVphBC float32    `sunspec:"offset=10"`
	PPVphCA float32    `sunspec:"offset=12"`
	PhVphA  float32    `sunspec:"offset=14"`
	PhVphB  float32    `sunspec:"offset=16"`
	PhVphC  float32    `sunspec:"offset=18"`
	W       float32    `sunspec:"offset=20"`
	Hz      float32    `sunspec:"offset=22"`
	VA      float32    `sunspec:"offset=24"`
	VAr     float32    `sunspec:"offset=26"`
	PF      float32    `sunspec:"offset=28"`
	WH      float32    `sunspec:"offset=30"`
	DCA     float32    `sunspec:"offset=32"`
	DCV     float32    `sunspec:"offset=34"`
	DCW     float32    `sunspec:"offset=36"`
	TmpCab  float32    `sunspec:"offset=38"`
	TmpSnk  float32    `sunspec:"offset=40"`
	TmpTrns float32    `sunspec:"offset=42"`
	TmpOt   float32    `sunspec:"offset=44"`
	St      Enum16     `sunspec:"offset=46"`
	StVnd   Enum16     `sunspec:"offset=47"`
	Evt1    Bitfield32 `sunspec:"offset=48"`
	Evt2    Bitfield32 `sunspec:"offset=50"`
	EvtVnd1 Bitfield32 `sunspec:"offset=52"`
	EvtVnd2 Bitfield32 `sunspec:"offset=54"`
	EvtVnd3 Bitfield32 `sunspec:"offset=56"`
	EvtVnd4 Bitfield32 `sunspec:"offset=58"`
}

func (self *Block111) GetId() ModelId {
	return 111
}

// Block112 - Inverter (Split Phase) FLOAT - Include this model for split phase inverter monitoring using float values

type Block112 struct {
	A       float32    `sunspec:"offset=0"`
	AphA    float32    `sunspec:"offset=2"`
	AphB    float32    `sunspec:"offset=4"`
	AphC    float32    `sunspec:"offset=6"`
	PPVphAB float32    `sunspec:"offset=8"`
	PPVphBC float32    `sunspec:"offset=10"`
	PPVphCA float32    `sunspec:"offset=12"`
	PhVphA  float32    `sunspec:"offset=14"`
	PhVphB  float32    `sunspec:"offset=16"`
	PhVphC  float32    `sunspec:"offset=18"`
	W       float32    `sunspec:"offset=20"`
	Hz      float32    `sunspec:"offset=22"`
	VA      float32    `sunspec:"offset=24"`
	VAr     float32    `sunspec:"offset=26"`
	PF      float32    `sunspec:"offset=28"`
	WH      float32    `sunspec:"offset=30"`
	DCA     float32    `sunspec:"offset=32"`
	DCV     float32    `sunspec:"offset=34"`
	DCW     float32    `sunspec:"offset=36"`
	TmpCab  float32    `sunspec:"offset=38"`
	TmpSnk  float32    `sunspec:"offset=40"`
	TmpTrns float32    `sunspec:"offset=42"`
	TmpOt   float32    `sunspec:"offset=44"`
	St      Enum16     `sunspec:"offset=46"`
	StVnd   Enum16     `sunspec:"offset=47"`
	Evt1    Bitfield32 `sunspec:"offset=48"`
	Evt2    Bitfield32 `sunspec:"offset=50"`
	EvtVnd1 Bitfield32 `sunspec:"offset=52"`
	EvtVnd2 Bitfield32 `sunspec:"offset=54"`
	EvtVnd3 Bitfield32 `sunspec:"offset=56"`
	EvtVnd4 Bitfield32 `sunspec:"offset=58"`
}

func (self *Block112) GetId() ModelId {
	return 112
}

// Block113 - Inverter (Three Phase) FLOAT - Include this model for three phase inverter monitoring using float values

type Block113 struct {
	A       float32    `sunspec:"offset=0"`
	AphA    float32    `sunspec:"offset=2"`
	AphB    float32    `sunspec:"offset=4"`
	AphC    float32    `sunspec:"offset=6"`
	PPVphAB float32    `sunspec:"offset=8"`
	PPVphBC float32    `sunspec:"offset=10"`
	PPVphCA float32    `sunspec:"offset=12"`
	PhVphA  float32    `sunspec:"offset=14"`
	PhVphB  float32    `sunspec:"offset=16"`
	PhVphC  float32    `sunspec:"offset=18"`
	W       float32    `sunspec:"offset=20"`
	Hz      float32    `sunspec:"offset=22"`
	VA      float32    `sunspec:"offset=24"`
	VAr     float32    `sunspec:"offset=26"`
	PF      float32    `sunspec:"offset=28"`
	WH      float32    `sunspec:"offset=30"`
	DCA     float32    `sunspec:"offset=32"`
	DCV     float32    `sunspec:"offset=34"`
	DCW     float32    `sunspec:"offset=36"`
	TmpCab  float32    `sunspec:"offset=38"`
	TmpSnk  float32    `sunspec:"offset=40"`
	TmpTrns float32    `sunspec:"offset=42"`
	TmpOt   float32    `sunspec:"offset=44"`
	St      Enum16     `sunspec:"offset=46"`
	StVnd   Enum16     `sunspec:"offset=47"`
	Evt1    Bitfield32 `sunspec:"offset=48"`
	Evt2    Bitfield32 `sunspec:"offset=50"`
	EvtVnd1 Bitfield32 `sunspec:"offset=52"`
	EvtVnd2 Bitfield32 `sunspec:"offset=54"`
	EvtVnd3 Bitfield32 `sunspec:"offset=56"`
	EvtVnd4 Bitfield32 `sunspec:"offset=58"`
}

func (self *Block113) GetId() ModelId {
	return 113
}

// Block120 - Nameplate - Inverter Controls Nameplate Ratings

type Block120 struct {
	DERTyp          Enum16      `sunspec:"offset=0,len=1,access=r"`
	WRtg            uint16      `sunspec:"offset=1,len=1,sf=WRtg_SF,access=r"`
	WRtg_SF         ScaleFactor `sunspec:"offset=2,len=1,access=r"`
	VARtg           uint16      `sunspec:"offset=3,len=1,sf=VARtg_SF,access=r"`
	VARtg_SF        ScaleFactor `sunspec:"offset=4,len=1,access=r"`
	VArRtgQ1        int16       `sunspec:"offset=5,len=1,sf=VArRtg_SF,access=r"`
	VArRtgQ2        int16       `sunspec:"offset=6,len=1,sf=VArRtg_SF,access=r"`
	VArRtgQ3        int16       `sunspec:"offset=7,len=1,sf=VArRtg_SF,access=r"`
	VArRtgQ4        int16       `sunspec:"offset=8,len=1,sf=VArRtg_SF,access=r"`
	VArRtg_SF       ScaleFactor `sunspec:"offset=9,len=1,access=r"`
	ARtg            uint16      `sunspec:"offset=10,len=1,sf=ARtg_SF,access=r"`
	ARtg_SF         ScaleFactor `sunspec:"offset=11,len=1,access=r"`
	PFRtgQ1         int16       `sunspec:"offset=12,len=1,sf=PFRtg_SF,access=r"`
	PFRtgQ2         int16       `sunspec:"offset=13,len=1,sf=PFRtg_SF,access=r"`
	PFRtgQ3         int16       `sunspec:"offset=14,len=1,sf=PFRtg_SF,access=r"`
	PFRtgQ4         int16       `sunspec:"offset=15,len=1,sf=PFRtg_SF,access=r"`
	PFRtg_SF        ScaleFactor `sunspec:"offset=16,len=1,access=r"`
	WHRtg           uint16      `sunspec:"offset=17,len=1,sf=WHRtg_SF,access=r"`
	WHRtg_SF        ScaleFactor `sunspec:"offset=18,len=1,access=r"`
	AhrRtg          uint16      `sunspec:"offset=19,len=1,sf=AhrRtg_SF,access=r"`
	AhrRtg_SF       ScaleFactor `sunspec:"offset=20,len=1,access=r"`
	MaxChaRte       uint16      `sunspec:"offset=21,len=1,sf=MaxChaRte_SF,access=r"`
	MaxChaRte_SF    ScaleFactor `sunspec:"offset=22,len=1,access=r"`
	MaxDisChaRte    uint16      `sunspec:"offset=23,len=1,sf=MaxDisChaRte_SF,access=r"`
	MaxDisChaRte_SF ScaleFactor `sunspec:"offset=24,len=1,access=r"`
	Pad             Pad         `sunspec:"offset=25,len=1,access=r"`
}

func (self *Block120) GetId() ModelId {
	return 120
}

// Block121 - Basic Settings - Inverter Controls Basic Settings

type Block121 struct {
	WMax         uint16      `sunspec:"offset=0,len=1,sf=WMax_SF,access=rw"`
	VRef         uint16      `sunspec:"offset=1,len=1,sf=VRef_SF,access=rw"`
	VRefOfs      int16       `sunspec:"offset=2,len=1,sf=VRefOfs_SF,access=rw"`
	VMax         uint16      `sunspec:"offset=3,len=1,sf=VMinMax_SF,access=rw"`
	VMin         uint16      `sunspec:"offset=4,len=1,sf=VMinMax_SF,access=rw"`
	VAMax        uint16      `sunspec:"offset=5,len=1,sf=VAMax_SF,access=rw"`
	VArMaxQ1     int16       `sunspec:"offset=6,len=1,sf=VArMax_SF,access=rw"`
	VArMaxQ2     int16       `sunspec:"offset=7,len=1,sf=VArMax_SF,access=rw"`
	VArMaxQ3     int16       `sunspec:"offset=8,len=1,sf=VArMax_SF,access=rw"`
	VArMaxQ4     int16       `sunspec:"offset=9,len=1,sf=VArMax_SF,access=rw"`
	WGra         uint16      `sunspec:"offset=10,len=1,sf=WGra_SF,access=rw"`
	PFMinQ1      int16       `sunspec:"offset=11,len=1,sf=PFMin_SF,access=rw"`
	PFMinQ2      int16       `sunspec:"offset=12,len=1,sf=PFMin_SF,access=rw"`
	PFMinQ3      int16       `sunspec:"offset=13,len=1,sf=PFMin_SF,access=rw"`
	PFMinQ4      int16       `sunspec:"offset=14,len=1,sf=PFMin_SF,access=rw"`
	VArAct       Enum16      `sunspec:"offset=15,len=1,access=rw"`
	ClcTotVA     Enum16      `sunspec:"offset=16,len=1,access=rw"`
	MaxRmpRte    uint16      `sunspec:"offset=17,len=1,sf=MaxRmpRte_SF,access=rw"`
	ECPNomHz     uint16      `sunspec:"offset=18,len=1,sf=ECPNomHz_SF,access=rw"`
	ConnPh       Enum16      `sunspec:"offset=19,len=1,access=rw"`
	WMax_SF      ScaleFactor `sunspec:"offset=20,len=1,access=r"`
	VRef_SF      ScaleFactor `sunspec:"offset=21,len=1,access=r"`
	VRefOfs_SF   ScaleFactor `sunspec:"offset=22,len=1,access=r"`
	VMinMax_SF   ScaleFactor `sunspec:"offset=23,len=1,access=r"`
	VAMax_SF     ScaleFactor `sunspec:"offset=24,len=1,access=r"`
	VArMax_SF    ScaleFactor `sunspec:"offset=25,len=1,access=r"`
	WGra_SF      ScaleFactor `sunspec:"offset=26,len=1,access=r"`
	PFMin_SF     ScaleFactor `sunspec:"offset=27,len=1,access=r"`
	MaxRmpRte_SF ScaleFactor `sunspec:"offset=28,len=1,access=r"`
	ECPNomHz_SF  ScaleFactor `sunspec:"offset=29,len=1,access=r"`
}

func (self *Block121) GetId() ModelId {
	return 121
}

// Block122 - Measurements_Status - Inverter Controls Extended Measurements and Status

type Block122 struct {
	PVConn      Bitfield16  `sunspec:"offset=0,len=1,access=r"`
	StorConn    Bitfield16  `sunspec:"offset=1,len=1,access=r"`
	ECPConn     Bitfield16  `sunspec:"offset=2,len=1,access=r"`
	ActWh       Acc64       `sunspec:"offset=3,len=4,access=r"`
	ActVAh      Acc64       `sunspec:"offset=7,len=4,access=r"`
	ActVArhQ1   Acc64       `sunspec:"offset=11,len=4,access=r"`
	ActVArhQ2   Acc64       `sunspec:"offset=15,len=4,access=r"`
	ActVArhQ3   Acc64       `sunspec:"offset=19,len=4,access=r"`
	ActVArhQ4   Acc64       `sunspec:"offset=23,len=4,access=r"`
	VArAval     int16       `sunspec:"offset=27,len=1,sf=VArAval_SF,access=r"`
	VArAval_SF  ScaleFactor `sunspec:"offset=28,len=1,access=r"`
	WAval       uint16      `sunspec:"offset=29,len=1,sf=WAval_SF,access=r"`
	WAval_SF    ScaleFactor `sunspec:"offset=30,len=1,access=r"`
	StSetLimMsk Bitfield32  `sunspec:"offset=31,len=2,access=r"`
	StActCtl    Bitfield32  `sunspec:"offset=33,len=2,access=r"`
	TmSrc       String      `sunspec:"offset=35,len=4,access=r"`
	Tms         uint32      `sunspec:"offset=39,len=2,access=r"`
	RtSt        Bitfield16  `sunspec:"offset=41,len=1,access=r"`
	Ris         uint16      `sunspec:"offset=42,len=1,sf=Ris_SF,access=r"`
	Ris_SF      ScaleFactor `sunspec:"offset=43,len=1,access=r"`
}

func (self *Block122) GetId() ModelId {
	return 122
}

// Block123 - Immediate Controls - Immediate Inverter Controls

type Block123 struct {
	Conn_WinTms        uint16      `sunspec:"offset=0,len=1,access=rw"`
	Conn_RvrtTms       uint16      `sunspec:"offset=1,len=1,access=rw"`
	Conn               Enum16      `sunspec:"offset=2,len=1,access=rw"`
	WMaxLimPct         uint16      `sunspec:"offset=3,len=1,sf=WMaxLimPct_SF,access=rw"`
	WMaxLimPct_WinTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	WMaxLimPct_RvrtTms uint16      `sunspec:"offset=5,len=1,access=rw"`
	WMaxLimPct_RmpTms  uint16      `sunspec:"offset=6,len=1,access=rw"`
	WMaxLim_Ena        Enum16      `sunspec:"offset=7,len=1,access=rw"`
	OutPFSet           int16       `sunspec:"offset=8,len=1,sf=OutPFSet_SF,access=rw"`
	OutPFSet_WinTms    uint16      `sunspec:"offset=9,len=1,access=rw"`
	OutPFSet_RvrtTms   uint16      `sunspec:"offset=10,len=1,access=rw"`
	OutPFSet_RmpTms    uint16      `sunspec:"offset=11,len=1,access=rw"`
	OutPFSet_Ena       Enum16      `sunspec:"offset=12,len=1,access=rw"`
	VArWMaxPct         int16       `sunspec:"offset=13,len=1,sf=VArPct_SF,access=rw"`
	VArMaxPct          int16       `sunspec:"offset=14,len=1,sf=VArPct_SF,access=rw"`
	VArAvalPct         int16       `sunspec:"offset=15,len=1,sf=VArPct_SF,access=rw"`
	VArPct_WinTms      uint16      `sunspec:"offset=16,len=1,access=rw"`
	VArPct_RvrtTms     uint16      `sunspec:"offset=17,len=1,access=rw"`
	VArPct_RmpTms      uint16      `sunspec:"offset=18,len=1,access=rw"`
	VArPct_Mod         Enum16      `sunspec:"offset=19,len=1,access=rw"`
	VArPct_Ena         Enum16      `sunspec:"offset=20,len=1,access=rw"`
	WMaxLimPct_SF      ScaleFactor `sunspec:"offset=21,len=1,access=r"`
	OutPFSet_SF        ScaleFactor `sunspec:"offset=22,len=1,access=r"`
	VArPct_SF          ScaleFactor `sunspec:"offset=23,len=1,access=r"`
}

func (self *Block123) GetId() ModelId {
	return 123
}

// Block124 - Storage - Basic Storage Controls

type Block124 struct {
	WChaMax           uint16      `sunspec:"offset=0,len=1,sf=WChaMax_SF,access=rw"`
	WChaGra           uint16      `sunspec:"offset=1,len=1,sf=WChaDisChaGra_SF,access=rw"`
	WDisChaGra        uint16      `sunspec:"offset=2,len=1,sf=WChaDisChaGra_SF,access=rw"`
	StorCtl_Mod       Bitfield16  `sunspec:"offset=3,len=1,access=rw"`
	VAChaMax          uint16      `sunspec:"offset=4,len=1,sf=VAChaMax_SF,access=rw"`
	MinRsvPct         uint16      `sunspec:"offset=5,len=1,sf=MinRsvPct_SF,access=rw"`
	ChaState          uint16      `sunspec:"offset=6,len=1,sf=ChaState_SF,access=r"`
	StorAval          uint16      `sunspec:"offset=7,len=1,sf=StorAval_SF,access=r"`
	InBatV            uint16      `sunspec:"offset=8,len=1,sf=InBatV_SF,access=r"`
	ChaSt             Enum16      `sunspec:"offset=9,len=1,access=r"`
	OutWRte           int16       `sunspec:"offset=10,len=1,sf=InOutWRte_SF,access=rw"`
	InWRte            int16       `sunspec:"offset=11,len=1,sf=InOutWRte_SF,access=rw"`
	InOutWRte_WinTms  uint16      `sunspec:"offset=12,len=1,access=rw"`
	InOutWRte_RvrtTms uint16      `sunspec:"offset=13,len=1,access=rw"`
	InOutWRte_RmpTms  uint16      `sunspec:"offset=14,len=1,access=rw"`
	ChaGriSet         Enum16      `sunspec:"offset=15,len=1,access=rw"`
	WChaMax_SF        ScaleFactor `sunspec:"offset=16,len=1,access=r"`
	WChaDisChaGra_SF  ScaleFactor `sunspec:"offset=17,len=1,access=r"`
	VAChaMax_SF       ScaleFactor `sunspec:"offset=18,len=1,access=r"`
	MinRsvPct_SF      ScaleFactor `sunspec:"offset=19,len=1,access=r"`
	ChaState_SF       ScaleFactor `sunspec:"offset=20,len=1,access=r"`
	StorAval_SF       ScaleFactor `sunspec:"offset=21,len=1,access=r"`
	InBatV_SF         ScaleFactor `sunspec:"offset=22,len=1,access=r"`
	InOutWRte_SF      ScaleFactor `sunspec:"offset=23,len=1,access=r"`
}

func (self *Block124) GetId() ModelId {
	return 124
}

// Block125 - Pricing - Pricing Signal

type Block125 struct {
	ModEna  Bitfield16  `sunspec:"offset=0,len=1,access=rw"`
	SigType Enum16      `sunspec:"offset=1,len=1,sf= ,access=rw"`
	Sig     int16       `sunspec:"offset=2,len=1,sf=Sig_SF,access=rw"`
	WinTms  uint16      `sunspec:"offset=3,len=1,access=rw"`
	RvtTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=5,len=1,access=rw"`
	Sig_SF  ScaleFactor `sunspec:"offset=6,len=1,sf= ,access=r"`
	Pad     Pad         `sunspec:"offset=7,len=1,access=r"`
}

func (self *Block125) GetId() ModelId {
	return 125
}

// Block126 - Static Volt-VAR - Static Volt-VAR Arrays

type Block126Repeat struct {
	ActPt     uint16 `sunspec:"offset=0,len=1,access=rw"`
	DeptRef   Enum16 `sunspec:"offset=1,len=1,access=rw"`
	V1        uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	VAr1      int16  `sunspec:"offset=3,len=1,sf=DeptRef_SF,access=rw"`
	V2        uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	VAr2      int16  `sunspec:"offset=5,len=1,sf=DeptRef_SF,access=rw"`
	V3        uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	VAr3      int16  `sunspec:"offset=7,len=1,sf=DeptRef_SF,access=rw"`
	V4        uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	VAr4      int16  `sunspec:"offset=9,len=1,sf=DeptRef_SF,access=rw"`
	V5        uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	VAr5      int16  `sunspec:"offset=11,len=1,sf=DeptRef_SF,access=rw"`
	V6        uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	VAr6      int16  `sunspec:"offset=13,len=1,sf=DeptRef_SF,access=rw"`
	V7        uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	VAr7      int16  `sunspec:"offset=15,len=1,sf=DeptRef_SF,access=rw"`
	V8        uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	VAr8      int16  `sunspec:"offset=17,len=1,sf=DeptRef_SF,access=rw"`
	V9        uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	VAr9      int16  `sunspec:"offset=19,len=1,sf=DeptRef_SF,access=rw"`
	V10       uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	VAr10     int16  `sunspec:"offset=21,len=1,sf=DeptRef_SF,access=rw"`
	V11       uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	VAr11     int16  `sunspec:"offset=23,len=1,sf=DeptRef_SF,access=rw"`
	V12       uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	VAr12     int16  `sunspec:"offset=25,len=1,sf=DeptRef_SF,access=rw"`
	V13       uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	VAr13     int16  `sunspec:"offset=27,len=1,sf=DeptRef_SF,access=rw"`
	V14       uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	VAr14     int16  `sunspec:"offset=29,len=1,sf=DeptRef_SF,access=rw"`
	V15       uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	VAr15     int16  `sunspec:"offset=31,len=1,sf=DeptRef_SF,access=rw"`
	V16       uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	VAr16     int16  `sunspec:"offset=33,len=1,sf=DeptRef_SF,access=rw"`
	V17       uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	VAr17     int16  `sunspec:"offset=35,len=1,sf=DeptRef_SF,access=rw"`
	V18       uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	VAr18     int16  `sunspec:"offset=37,len=1,sf=DeptRef_SF,access=rw"`
	V19       uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	VAr19     int16  `sunspec:"offset=39,len=1,sf=DeptRef_SF,access=rw"`
	V20       uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	VAr20     int16  `sunspec:"offset=41,len=1,sf=DeptRef_SF,access=rw"`
	CrvNam    String `sunspec:"offset=42,len=8,access=rw"`
	RmpTms    uint16 `sunspec:"offset=50,len=1,access=rw"`
	RmpDecTmm uint16 `sunspec:"offset=51,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpIncTmm uint16 `sunspec:"offset=52,len=1,sf=RmpIncDec_SF,access=rw"`
	ReadOnly  Enum16 `sunspec:"offset=53,len=1,access=r"`
}

type Block126 struct {
	ActCrv       uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms       uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms      uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms       uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv         uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt          uint16      `sunspec:"offset=6,len=1,access=r"`
	V_SF         ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	DeptRef_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block126Repeat
}

func (self *Block126) GetId() ModelId {
	return 126
}

// Block127 - Freq-Watt Param - Parameterized Frequency-Watt

type Block127 struct {
	WGra         uint16      `sunspec:"offset=0,len=1,sf=WGra_SF,access=rw"`
	HzStr        int16       `sunspec:"offset=1,len=1,sf=HzStrStop_SF,access=rw"`
	HzStop       int16       `sunspec:"offset=2,len=1,sf=HzStrStop_SF,access=rw"`
	HysEna       Bitfield16  `sunspec:"offset=3,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=4,len=1,access=rw"`
	HzStopWGra   uint16      `sunspec:"offset=5,len=1,sf=RmpIncDec_SF,access=rw"`
	WGra_SF      ScaleFactor `sunspec:"offset=6,len=1,access=r"`
	HzStrStop_SF ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad          Pad         `sunspec:"offset=9,len=1,access=r"`
}

func (self *Block127) GetId() ModelId {
	return 127
}

// Block128 - Dynamic Reactive Current - Dynamic Reactive Current

type Block128 struct {
	ArGraMod   Enum16      `sunspec:"offset=0,len=1,access=rw"`
	ArGraSag   uint16      `sunspec:"offset=1,len=1,sf=ArGra_SF,access=rw"`
	ArGraSwell uint16      `sunspec:"offset=2,len=1,sf=ArGra_SF,access=rw"`
	ModEna     Bitfield16  `sunspec:"offset=3,len=1,access=rw"`
	FilTms     uint16      `sunspec:"offset=4,len=1,access=rw"`
	DbVMin     uint16      `sunspec:"offset=5,len=1,sf=VRefPct_SF,access=rw"`
	DbVMax     uint16      `sunspec:"offset=6,len=1,sf=VRefPct_SF,access=rw"`
	BlkZnV     uint16      `sunspec:"offset=7,len=1,sf=VRefPct_SF,access=rw"`
	HysBlkZnV  uint16      `sunspec:"offset=8,len=1,sf=VRefPct_SF,access=rw"`
	BlkZnTmms  uint16      `sunspec:"offset=9,len=1,access=rw"`
	HoldTmms   uint16      `sunspec:"offset=10,len=1,access=rw"`
	ArGra_SF   ScaleFactor `sunspec:"offset=11,len=1,access=r"`
	VRefPct_SF ScaleFactor `sunspec:"offset=12,len=1,access=r"`
	Pad        Pad         `sunspec:"offset=13,len=1,access=r"`
}

func (self *Block128) GetId() ModelId {
	return 128
}

// Block129 - LVRTD - LVRT Must Disconnect

type Block129Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block129 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block129Repeat
}

func (self *Block129) GetId() ModelId {
	return 129
}

// Block130 - HVRTD - HVRT Must Disconnect

type Block130Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block130 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block130Repeat
}

func (self *Block130) GetId() ModelId {
	return 130
}

// Block131 - Watt-PF - Watt-Power Factor

type Block131Repeat struct {
	ActPt     uint16 `sunspec:"offset=0,len=1,access=rw"`
	W1        int16  `sunspec:"offset=1,len=1,sf=W_SF,access=rw"`
	PF1       int16  `sunspec:"offset=2,len=1,sf=PF_SF,access=rw"`
	W2        int16  `sunspec:"offset=3,len=1,sf=W_SF,access=rw"`
	PF2       int16  `sunspec:"offset=4,len=1,sf=PF_SF,access=rw"`
	W3        int16  `sunspec:"offset=5,len=1,sf=W_SF,access=rw"`
	PF3       int16  `sunspec:"offset=6,len=1,sf=PF_SF,access=rw"`
	W4        int16  `sunspec:"offset=7,len=1,sf=W_SF,access=rw"`
	PF4       int16  `sunspec:"offset=8,len=1,sf=PF_SF,access=rw"`
	W5        int16  `sunspec:"offset=9,len=1,sf=W_SF,access=rw"`
	PF5       int16  `sunspec:"offset=10,len=1,sf=PF_SF,access=rw"`
	W6        int16  `sunspec:"offset=11,len=1,sf=W_SF,access=rw"`
	PF6       int16  `sunspec:"offset=12,len=1,sf=PF_SF,access=rw"`
	W7        int16  `sunspec:"offset=13,len=1,sf=W_SF,access=rw"`
	PF7       int16  `sunspec:"offset=14,len=1,sf=PF_SF,access=rw"`
	W8        int16  `sunspec:"offset=15,len=1,sf=W_SF,access=rw"`
	PF8       int16  `sunspec:"offset=16,len=1,sf=PF_SF,access=rw"`
	W9        int16  `sunspec:"offset=17,len=1,sf=W_SF,access=rw"`
	PF9       int16  `sunspec:"offset=18,len=1,sf=PF_SF,access=rw"`
	W10       int16  `sunspec:"offset=19,len=1,sf=W_SF,access=rw"`
	PF10      int16  `sunspec:"offset=20,len=1,sf=PF_SF,access=rw"`
	W11       int16  `sunspec:"offset=21,len=1,sf=W_SF,access=rw"`
	PF11      int16  `sunspec:"offset=22,len=1,sf=PF_SF,access=rw"`
	W12       int16  `sunspec:"offset=23,len=1,sf=W_SF,access=rw"`
	PF12      int16  `sunspec:"offset=24,len=1,sf=PF_SF,access=rw"`
	W13       int16  `sunspec:"offset=25,len=1,sf=W_SF,access=rw"`
	PF13      int16  `sunspec:"offset=26,len=1,sf=PF_SF,access=rw"`
	W14       int16  `sunspec:"offset=27,len=1,sf=W_SF,access=rw"`
	PF14      int16  `sunspec:"offset=28,len=1,sf=PF_SF,access=rw"`
	W15       int16  `sunspec:"offset=29,len=1,sf=W_SF,access=rw"`
	PF15      int16  `sunspec:"offset=30,len=1,sf=PF_SF,access=rw"`
	W16       int16  `sunspec:"offset=31,len=1,sf=W_SF,access=rw"`
	PF16      int16  `sunspec:"offset=32,len=1,sf=PF_SF,access=rw"`
	W17       int16  `sunspec:"offset=33,len=1,sf=W_SF,access=rw"`
	PF17      int16  `sunspec:"offset=34,len=1,sf=PF_SF,access=rw"`
	W18       int16  `sunspec:"offset=35,len=1,sf=W_SF,access=rw"`
	PF18      int16  `sunspec:"offset=36,len=1,sf=PF_SF,access=rw"`
	W19       int16  `sunspec:"offset=37,len=1,sf=W_SF,access=rw"`
	PF19      int16  `sunspec:"offset=38,len=1,sf=PF_SF,access=rw"`
	W20       int16  `sunspec:"offset=39,len=1,sf=W_SF,access=rw"`
	PF20      int16  `sunspec:"offset=40,len=1,sf=PF_SF,access=rw"`
	CrvNam    String `sunspec:"offset=41,len=8,access=rw"`
	RmpPT1Tms uint16 `sunspec:"offset=49,len=1,access=rw"`
	RmpDecTmm uint16 `sunspec:"offset=50,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpIncTmm uint16 `sunspec:"offset=51,len=1,sf=RmpIncDec_SF,access=rw"`
	ReadOnly  Enum16 `sunspec:"offset=52,len=1,access=r"`
	Pad       Pad    `sunspec:"offset=53,len=1,access=r"`
}

type Block131 struct {
	ActCrv       uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms       uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms      uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms       uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv         uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt          uint16      `sunspec:"offset=6,len=1,access=r"`
	W_SF         ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	PF_SF        ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block131Repeat
}

func (self *Block131) GetId() ModelId {
	return 131
}

// Block132 - Volt-Watt - Volt-Watt

type Block132Repeat struct {
	ActPt     uint16 `sunspec:"offset=0,len=1,access=rw"`
	DeptRef   Enum16 `sunspec:"offset=1,len=1,access=rw"`
	V1        uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	W1        int16  `sunspec:"offset=3,len=1,sf=DeptRef_SF,access=rw"`
	V2        uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	W2        int16  `sunspec:"offset=5,len=1,sf=DeptRef_SF,access=rw"`
	V3        uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	W3        int16  `sunspec:"offset=7,len=1,sf=DeptRef_SF,access=rw"`
	V4        uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	W4        int16  `sunspec:"offset=9,len=1,sf=DeptRef_SF,access=rw"`
	V5        uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	W5        int16  `sunspec:"offset=11,len=1,sf=DeptRef_SF,access=rw"`
	V6        uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	W6        int16  `sunspec:"offset=13,len=1,sf=DeptRef_SF,access=rw"`
	V7        uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	W7        int16  `sunspec:"offset=15,len=1,sf=DeptRef_SF,access=rw"`
	V8        uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	W8        int16  `sunspec:"offset=17,len=1,sf=DeptRef_SF,access=rw"`
	V9        uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	W9        int16  `sunspec:"offset=19,len=1,sf=DeptRef_SF,access=rw"`
	V10       uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	W10       int16  `sunspec:"offset=21,len=1,sf=DeptRef_SF,access=rw"`
	V11       uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	W11       int16  `sunspec:"offset=23,len=1,sf=DeptRef_SF,access=rw"`
	V12       uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	W12       int16  `sunspec:"offset=25,len=1,sf=DeptRef_SF,access=rw"`
	V13       uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	W13       int16  `sunspec:"offset=27,len=1,sf=DeptRef_SF,access=rw"`
	V14       uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	W14       int16  `sunspec:"offset=29,len=1,sf=DeptRef_SF,access=rw"`
	V15       uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	W15       int16  `sunspec:"offset=31,len=1,sf=DeptRef_SF,access=rw"`
	V16       uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	W16       int16  `sunspec:"offset=33,len=1,sf=DeptRef_SF,access=rw"`
	V17       uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	W17       int16  `sunspec:"offset=35,len=1,sf=DeptRef_SF,access=rw"`
	V18       uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	W18       int16  `sunspec:"offset=37,len=1,sf=DeptRef_SF,access=rw"`
	V19       uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	W19       int16  `sunspec:"offset=39,len=1,sf=DeptRef_SF,access=rw"`
	V20       uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	W20       int16  `sunspec:"offset=41,len=1,sf=DeptRef_SF,access=rw"`
	CrvNam    String `sunspec:"offset=42,len=8,access=rw"`
	RmpPt1Tms uint16 `sunspec:"offset=50,len=1,access=rw"`
	RmpDecTmm uint16 `sunspec:"offset=51,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpIncTmm uint16 `sunspec:"offset=52,len=1,sf=RmpIncDec_SF,access=rw"`
	ReadOnly  Enum16 `sunspec:"offset=53,len=1,access=r"`
}

type Block132 struct {
	ActCrv       uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms       uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms      uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms       uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv         uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt          uint16      `sunspec:"offset=6,len=1,access=r"`
	V_SF         ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	DeptRef_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block132Repeat
}

func (self *Block132) GetId() ModelId {
	return 132
}

// Block133 - Basic Scheduling - Basic Scheduling

type Block133Repeat struct {
	ActPts  uint16      `sunspec:"offset=0,len=1,access=rw"`
	StrTms  uint32      `sunspec:"offset=1,len=2,access=rw"`
	RepPer  uint16      `sunspec:"offset=3,len=1,access=rw"`
	IntvTyp Enum16      `sunspec:"offset=4,len=1,access=rw"`
	XTyp    Enum16      `sunspec:"offset=5,len=1,access=rw"`
	X_SF    ScaleFactor `sunspec:"offset=6,len=1,access=rw"`
	YTyp    Enum16      `sunspec:"offset=7,len=1,access=rw"`
	Y_SF    ScaleFactor `sunspec:"offset=8,len=1,access=rw"`
	X1      int32       `sunspec:"offset=9,len=2,sf=X_SF,access=rw"`
	Y1      int32       `sunspec:"offset=11,len=2,sf=Y_SF,access=rw"`
	X2      int32       `sunspec:"offset=13,len=2,sf=X_SF,access=rw"`
	Y2      int32       `sunspec:"offset=15,len=2,sf=Y_SF,access=rw"`
	X3      int32       `sunspec:"offset=17,len=2,sf=X_SF,access=rw"`
	Y3      int32       `sunspec:"offset=19,len=2,sf=Y_SF,access=rw"`
	X4      int32       `sunspec:"offset=21,len=2,sf=X_SF,access=rw"`
	Y4      int32       `sunspec:"offset=23,len=2,sf=Y_SF,access=rw"`
	X5      int32       `sunspec:"offset=25,len=2,sf=X_SF,access=rw"`
	Y5      int32       `sunspec:"offset=27,len=2,sf=Y_SF,access=rw"`
	X6      int32       `sunspec:"offset=29,len=2,sf=X_SF,access=rw"`
	Y6      int32       `sunspec:"offset=31,len=2,sf=Y_SF,access=rw"`
	X7      int32       `sunspec:"offset=33,len=2,sf=X_SF,access=rw"`
	Y7      int32       `sunspec:"offset=35,len=2,sf=Y_SF,access=rw"`
	X8      int32       `sunspec:"offset=37,len=2,sf=X_SF,access=rw"`
	Y8      int32       `sunspec:"offset=39,len=2,sf=Y_SF,access=rw"`
	X9      int32       `sunspec:"offset=41,len=2,sf=X_SF,access=rw"`
	Y9      int32       `sunspec:"offset=43,len=2,sf=Y_SF,access=rw"`
	X10     int32       `sunspec:"offset=45,len=2,sf=X_SF,access=rw"`
	Y10     int32       `sunspec:"offset=47,len=2,sf=Y_SF,access=rw"`
	Nam     String      `sunspec:"offset=49,len=8,access=rw"`
	WinTms  uint16      `sunspec:"offset=57,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=58,len=1,access=rw"`
	ActIndx uint16      `sunspec:"offset=59,len=1,access=r"`
}

type Block133 struct {
	ActSchd Bitfield32 `sunspec:"offset=0,len=2,access=rw"`
	ModEna  Bitfield16 `sunspec:"offset=2,len=1,access=rw"`
	NSchd   uint16     `sunspec:"offset=3,len=1,access=r"`
	NPts    uint16     `sunspec:"offset=4,len=1,access=r"`
	Pad     Pad        `sunspec:"offset=5,len=1,access=r"`

	Repeats []Block133Repeat
}

func (self *Block133) GetId() ModelId {
	return 133
}

// Block134 - Freq-Watt Crv - Curve-Based Frequency-Watt

type Block134Repeat struct {
	ActPt      uint16     `sunspec:"offset=0,len=1,access=rw"`
	Hz1        uint16     `sunspec:"offset=1,len=1,sf=Hz_SF,access=rw"`
	W1         int16      `sunspec:"offset=2,len=1,sf=W_SF,access=rw"`
	Hz2        uint16     `sunspec:"offset=3,len=1,sf=Hz_SF,access=rw"`
	W2         int16      `sunspec:"offset=4,len=1,sf=W_SF,access=rw"`
	Hz3        uint16     `sunspec:"offset=5,len=1,sf=Hz_SF,access=rw"`
	W3         int16      `sunspec:"offset=6,len=1,sf=W_SF,access=rw"`
	Hz4        uint16     `sunspec:"offset=7,len=1,sf=Hz_SF,access=rw"`
	W4         int16      `sunspec:"offset=8,len=1,sf=W_SF,access=rw"`
	Hz5        uint16     `sunspec:"offset=9,len=1,sf=Hz_SF,access=rw"`
	W5         int16      `sunspec:"offset=10,len=1,sf=W_SF,access=rw"`
	Hz6        uint16     `sunspec:"offset=11,len=1,sf=Hz_SF,access=rw"`
	W6         int16      `sunspec:"offset=12,len=1,sf=W_SF,access=rw"`
	Hz7        uint16     `sunspec:"offset=13,len=1,sf=Hz_SF,access=rw"`
	W7         int16      `sunspec:"offset=14,len=1,sf=W_SF,access=rw"`
	Hz8        uint16     `sunspec:"offset=15,len=1,sf=Hz_SF,access=rw"`
	W8         int16      `sunspec:"offset=16,len=1,sf=W_SF,access=rw"`
	Hz9        uint16     `sunspec:"offset=17,len=1,sf=Hz_SF,access=rw"`
	W9         int16      `sunspec:"offset=18,len=1,sf=W_SF,access=rw"`
	Hz10       uint16     `sunspec:"offset=19,len=1,sf=Hz_SF,access=rw"`
	W10        int16      `sunspec:"offset=20,len=1,sf=W_SF,access=rw"`
	Hz11       uint16     `sunspec:"offset=21,len=1,sf=Hz_SF,access=rw"`
	W11        int16      `sunspec:"offset=22,len=1,sf=W_SF,access=rw"`
	Hz12       uint16     `sunspec:"offset=23,len=1,sf=Hz_SF,access=rw"`
	W12        int16      `sunspec:"offset=24,len=1,sf=W_SF,access=rw"`
	Hz13       uint16     `sunspec:"offset=25,len=1,sf=Hz_SF,access=rw"`
	W13        int16      `sunspec:"offset=26,len=1,sf=W_SF,access=rw"`
	Hz14       uint16     `sunspec:"offset=27,len=1,sf=Hz_SF,access=rw"`
	W14        int16      `sunspec:"offset=28,len=1,sf=W_SF,access=rw"`
	Hz15       uint16     `sunspec:"offset=29,len=1,sf=Hz_SF,access=rw"`
	W15        int16      `sunspec:"offset=30,len=1,sf=W_SF,access=rw"`
	Hz16       uint16     `sunspec:"offset=31,len=1,sf=Hz_SF,access=rw"`
	W16        int16      `sunspec:"offset=32,len=1,sf=W_SF,access=rw"`
	Hz17       uint16     `sunspec:"offset=33,len=1,sf=Hz_SF,access=rw"`
	W17        int16      `sunspec:"offset=34,len=1,sf=W_SF,access=rw"`
	Hz18       uint16     `sunspec:"offset=35,len=1,sf=Hz_SF,access=rw"`
	W18        int16      `sunspec:"offset=36,len=1,sf=W_SF,access=rw"`
	Hz19       uint16     `sunspec:"offset=37,len=1,sf=Hz_SF,access=rw"`
	W19        int16      `sunspec:"offset=38,len=1,sf=W_SF,access=rw"`
	Hz20       uint16     `sunspec:"offset=39,len=1,sf=Hz_SF,access=rw"`
	W20        int16      `sunspec:"offset=40,len=1,sf=W_SF,access=rw"`
	CrvNam     String     `sunspec:"offset=41,len=8,access=rw"`
	RmpPT1Tms  uint16     `sunspec:"offset=49,len=1,access=rw"`
	RmpDecTmm  uint16     `sunspec:"offset=50,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpIncTmm  uint16     `sunspec:"offset=51,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpRsUp    uint16     `sunspec:"offset=52,len=1,sf=RmpIncDec_SF,access=rw"`
	SnptW      Bitfield16 `sunspec:"offset=53,len=1,access=rw"`
	WRef       uint16     `sunspec:"offset=54,len=1,sf=W_SF,access=rw"`
	WRefStrHz  uint16     `sunspec:"offset=55,len=1,sf=Hz_SF,access=rw"`
	WRefStopHz uint16     `sunspec:"offset=56,len=1,sf=Hz_SF,access=rw"`
	ReadOnly   Enum16     `sunspec:"offset=57,len=1,access=r"`
}

type Block134 struct {
	ActCrv       uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms       uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms      uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms       uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv         uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt          uint16      `sunspec:"offset=6,len=1,access=r"`
	Hz_SF        ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	W_SF         ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block134Repeat
}

func (self *Block134) GetId() ModelId {
	return 134
}

// Block135 - LFRT - Low Frequency Ride-through

type Block135Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block135 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block135Repeat
}

func (self *Block135) GetId() ModelId {
	return 135
}

// Block136 - HFRT - High Frequency Ride-through

type Block136Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block136 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block136Repeat
}

func (self *Block136) GetId() ModelId {
	return 136
}

// Block137 - LVRTC - LVRT must remain connected

type Block137Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block137 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block137Repeat
}

func (self *Block137) GetId() ModelId {
	return 137
}

// Block138 - HVRTC - HVRT must remain connected

type Block138Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block138 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block138Repeat
}

func (self *Block138) GetId() ModelId {
	return 138
}

// Block139 - LVRTX - LVRT extended curve

type Block139Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block139 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	CrvType Enum16      `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block139Repeat
}

func (self *Block139) GetId() ModelId {
	return 139
}

// Block140 - HVRTX - HVRT extended curve

type Block140Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block140 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	CrvType Enum16      `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block140Repeat
}

func (self *Block140) GetId() ModelId {
	return 140
}

// Block141 - LFRTC - LFRT must remain connected

type Block141Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block141 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block141Repeat
}

func (self *Block141) GetId() ModelId {
	return 141
}

// Block142 - HFRTC - HFRT must remain connected

type Block142Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block142 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block142Repeat
}

func (self *Block142) GetId() ModelId {
	return 142
}

// Block143 - LFRTX - LFRT extended curve

type Block143Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block143 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	CrvType Enum16      `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block143Repeat
}

func (self *Block143) GetId() ModelId {
	return 143
}

// Block144 - HFRTX - HFRT extended curve

type Block144Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block144 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	CrvType Enum16      `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block144Repeat
}

func (self *Block144) GetId() ModelId {
	return 144
}

// Block145 - Extended Settings - Inverter controls extended settings

type Block145 struct {
	NomRmpUpRte  uint16      `sunspec:"offset=0,len=1,sf=Rmp_SF,access=rw"`
	NomRmpDnRte  uint16      `sunspec:"offset=1,len=1,sf=Rmp_SF,access=rw"`
	EmgRmpUpRte  uint16      `sunspec:"offset=2,len=1,sf=Rmp_SF,access=rw"`
	EmgRmpDnRte  uint16      `sunspec:"offset=3,len=1,sf=Rmp_SF,access=rw"`
	ConnRmpUpRte uint16      `sunspec:"offset=4,len=1,sf=Rmp_SF,access=rw"`
	ConnRmpDnRte uint16      `sunspec:"offset=5,len=1,sf=Rmp_SF,access=rw"`
	AGra         uint16      `sunspec:"offset=6,len=1,sf=Rmp_SF,access=rw"`
	Rmp_SF       ScaleFactor `sunspec:"offset=7,len=1,access=r"`
}

func (self *Block145) GetId() ModelId {
	return 145
}

// Block160 - Multiple MPPT Inverter Extension Model -

type Block160Repeat struct {
	ID    uint16     `sunspec:"offset=0"`
	IDStr String     `sunspec:"offset=1,len=8"`
	DCA   uint16     `sunspec:"offset=9,sf=DCA_SF"`
	DCV   uint16     `sunspec:"offset=10,sf=DCV_SF"`
	DCW   uint16     `sunspec:"offset=11,sf=DCW_SF"`
	DCWH  Acc32      `sunspec:"offset=12,sf=DCWH_SF"`
	Tms   uint32     `sunspec:"offset=14"`
	Tmp   int16      `sunspec:"offset=16"`
	DCSt  Enum16     `sunspec:"offset=17"`
	DCEvt Bitfield32 `sunspec:"offset=18"`
}

type Block160 struct {
	DCA_SF  ScaleFactor `sunspec:"offset=0"`
	DCV_SF  ScaleFactor `sunspec:"offset=1"`
	DCW_SF  ScaleFactor `sunspec:"offset=2"`
	DCWH_SF ScaleFactor `sunspec:"offset=3"`
	Evt     Bitfield32  `sunspec:"offset=4"`
	N       Count       `sunspec:"offset=6"`
	TmsPer  uint16      `sunspec:"offset=7"`

	Repeats []Block160Repeat
}

func (self *Block160) GetId() ModelId {
	return 160
}

// Block201 - Meter (Single Phase)single phase (AN or AB) meter - Include this model for single phase (AN or AB) metering

type Block201 struct {
	A               int16       `sunspec:"offset=0,sf=A_SF"`
	AphA            int16       `sunspec:"offset=1,sf=A_SF"`
	AphB            int16       `sunspec:"offset=2,sf=A_SF"`
	AphC            int16       `sunspec:"offset=3,sf=A_SF"`
	A_SF            ScaleFactor `sunspec:"offset=4"`
	PhV             int16       `sunspec:"offset=5,sf=V_SF"`
	PhVphA          int16       `sunspec:"offset=6,sf=V_SF"`
	PhVphB          int16       `sunspec:"offset=7,sf=V_SF"`
	PhVphC          int16       `sunspec:"offset=8,sf=V_SF"`
	PPV             int16       `sunspec:"offset=9,sf=V_SF"`
	PPVphAB         int16       `sunspec:"offset=10,sf=V_SF"`
	PPVphBC         int16       `sunspec:"offset=11,sf=V_SF"`
	PPVphCA         int16       `sunspec:"offset=12,sf=V_SF"`
	V_SF            ScaleFactor `sunspec:"offset=13"`
	Hz              int16       `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF           ScaleFactor `sunspec:"offset=15"`
	W               int16       `sunspec:"offset=16,sf=W_SF"`
	WphA            int16       `sunspec:"offset=17,sf=W_SF"`
	WphB            int16       `sunspec:"offset=18,sf=W_SF"`
	WphC            int16       `sunspec:"offset=19,sf=W_SF"`
	W_SF            ScaleFactor `sunspec:"offset=20"`
	VA              int16       `sunspec:"offset=21,sf=VA_SF"`
	VAphA           int16       `sunspec:"offset=22,sf=VA_SF"`
	VAphB           int16       `sunspec:"offset=23,sf=VA_SF"`
	VAphC           int16       `sunspec:"offset=24,sf=VA_SF"`
	VA_SF           ScaleFactor `sunspec:"offset=25"`
	VAR             int16       `sunspec:"offset=26,sf=VAR_SF"`
	VARphA          int16       `sunspec:"offset=27,sf=VAR_SF"`
	VARphB          int16       `sunspec:"offset=28,sf=VAR_SF"`
	VARphC          int16       `sunspec:"offset=29,sf=VAR_SF"`
	VAR_SF          ScaleFactor `sunspec:"offset=30"`
	PF              int16       `sunspec:"offset=31,sf=PF_SF"`
	PFphA           int16       `sunspec:"offset=32,sf=PF_SF"`
	PFphB           int16       `sunspec:"offset=33,sf=PF_SF"`
	PFphC           int16       `sunspec:"offset=34,sf=PF_SF"`
	PF_SF           ScaleFactor `sunspec:"offset=35"`
	TotWhExp        Acc32       `sunspec:"offset=36,sf=TotWh_SF"`
	TotWhExpPhA     Acc32       `sunspec:"offset=38,sf=TotWh_SF"`
	TotWhExpPhB     Acc32       `sunspec:"offset=40,sf=TotWh_SF"`
	TotWhExpPhC     Acc32       `sunspec:"offset=42,sf=TotWh_SF"`
	TotWhImp        Acc32       `sunspec:"offset=44,sf=TotWh_SF"`
	TotWhImpPhA     Acc32       `sunspec:"offset=46,sf=TotWh_SF"`
	TotWhImpPhB     Acc32       `sunspec:"offset=48,sf=TotWh_SF"`
	TotWhImpPhC     Acc32       `sunspec:"offset=50,sf=TotWh_SF"`
	TotWh_SF        ScaleFactor `sunspec:"offset=52"`
	TotVAhExp       Acc32       `sunspec:"offset=53,sf=TotVAh_SF"`
	TotVAhExpPhA    Acc32       `sunspec:"offset=55,sf=TotVAh_SF"`
	TotVAhExpPhB    Acc32       `sunspec:"offset=57,sf=TotVAh_SF"`
	TotVAhExpPhC    Acc32       `sunspec:"offset=59,sf=TotVAh_SF"`
	TotVAhImp       Acc32       `sunspec:"offset=61,sf=TotVAh_SF"`
	TotVAhImpPhA    Acc32       `sunspec:"offset=63,sf=TotVAh_SF"`
	TotVAhImpPhB    Acc32       `sunspec:"offset=65,sf=TotVAh_SF"`
	TotVAhImpPhC    Acc32       `sunspec:"offset=67,sf=TotVAh_SF"`
	TotVAh_SF       ScaleFactor `sunspec:"offset=69"`
	TotVArhImpQ1    Acc32       `sunspec:"offset=70,sf=TotVArh_SF"`
	TotVArhImpQ1PhA Acc32       `sunspec:"offset=72,sf=TotVArh_SF"`
	TotVArhImpQ1PhB Acc32       `sunspec:"offset=74,sf=TotVArh_SF"`
	TotVArhImpQ1PhC Acc32       `sunspec:"offset=76,sf=TotVArh_SF"`
	TotVArhImpQ2    Acc32       `sunspec:"offset=78,sf=TotVArh_SF"`
	TotVArhImpQ2PhA Acc32       `sunspec:"offset=80,sf=TotVArh_SF"`
	TotVArhImpQ2PhB Acc32       `sunspec:"offset=82,sf=TotVArh_SF"`
	TotVArhImpQ2PhC Acc32       `sunspec:"offset=84,sf=TotVArh_SF"`
	TotVArhExpQ3    Acc32       `sunspec:"offset=86,sf=TotVArh_SF"`
	TotVArhExpQ3PhA Acc32       `sunspec:"offset=88,sf=TotVArh_SF"`
	TotVArhExpQ3PhB Acc32       `sunspec:"offset=90,sf=TotVArh_SF"`
	TotVArhExpQ3PhC Acc32       `sunspec:"offset=92,sf=TotVArh_SF"`
	TotVArhExpQ4    Acc32       `sunspec:"offset=94,sf=TotVArh_SF"`
	TotVArhExpQ4PhA Acc32       `sunspec:"offset=96,sf=TotVArh_SF"`
	TotVArhExpQ4PhB Acc32       `sunspec:"offset=98,sf=TotVArh_SF"`
	TotVArhExpQ4PhC Acc32       `sunspec:"offset=100,sf=TotVArh_SF"`
	TotVArh_SF      ScaleFactor `sunspec:"offset=102"`
	Evt             Bitfield32  `sunspec:"offset=103"`
}

func (self *Block201) GetId() ModelId {
	return 201
}

// Block202 - split single phase (ABN) meter -

type Block202 struct {
	A               int16       `sunspec:"offset=0,sf=A_SF"`
	AphA            int16       `sunspec:"offset=1,sf=A_SF"`
	AphB            int16       `sunspec:"offset=2,sf=A_SF"`
	AphC            int16       `sunspec:"offset=3,sf=A_SF"`
	A_SF            ScaleFactor `sunspec:"offset=4"`
	PhV             int16       `sunspec:"offset=5,sf=V_SF"`
	PhVphA          int16       `sunspec:"offset=6,sf=V_SF"`
	PhVphB          int16       `sunspec:"offset=7,sf=V_SF"`
	PhVphC          int16       `sunspec:"offset=8,sf=V_SF"`
	PPV             int16       `sunspec:"offset=9,sf=V_SF"`
	PhVphAB         int16       `sunspec:"offset=10,sf=V_SF"`
	PhVphBC         int16       `sunspec:"offset=11,sf=V_SF"`
	PhVphCA         int16       `sunspec:"offset=12,sf=V_SF"`
	V_SF            ScaleFactor `sunspec:"offset=13"`
	Hz              int16       `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF           ScaleFactor `sunspec:"offset=15"`
	W               int16       `sunspec:"offset=16,sf=W_SF"`
	WphA            int16       `sunspec:"offset=17,sf=W_SF"`
	WphB            int16       `sunspec:"offset=18,sf=W_SF"`
	WphC            int16       `sunspec:"offset=19,sf=W_SF"`
	W_SF            ScaleFactor `sunspec:"offset=20"`
	VA              int16       `sunspec:"offset=21,sf=VA_SF"`
	VAphA           int16       `sunspec:"offset=22,sf=VA_SF"`
	VAphB           int16       `sunspec:"offset=23,sf=VA_SF"`
	VAphC           int16       `sunspec:"offset=24,sf=VA_SF"`
	VA_SF           ScaleFactor `sunspec:"offset=25"`
	VAR             int16       `sunspec:"offset=26,sf=VAR_SF"`
	VARphA          int16       `sunspec:"offset=27,sf=VAR_SF"`
	VARphB          int16       `sunspec:"offset=28,sf=VAR_SF"`
	VARphC          int16       `sunspec:"offset=29,sf=VAR_SF"`
	VAR_SF          ScaleFactor `sunspec:"offset=30"`
	PF              int16       `sunspec:"offset=31,sf=PF_SF"`
	PFphA           int16       `sunspec:"offset=32,sf=PF_SF"`
	PFphB           int16       `sunspec:"offset=33,sf=PF_SF"`
	PFphC           int16       `sunspec:"offset=34,sf=PF_SF"`
	PF_SF           ScaleFactor `sunspec:"offset=35"`
	TotWhExp        Acc32       `sunspec:"offset=36,sf=TotWh_SF"`
	TotWhExpPhA     Acc32       `sunspec:"offset=38,sf=TotWh_SF"`
	TotWhExpPhB     Acc32       `sunspec:"offset=40,sf=TotWh_SF"`
	TotWhExpPhC     Acc32       `sunspec:"offset=42,sf=TotWh_SF"`
	TotWhImp        Acc32       `sunspec:"offset=44,sf=TotWh_SF"`
	TotWhImpPhA     Acc32       `sunspec:"offset=46,sf=TotWh_SF"`
	TotWhImpPhB     Acc32       `sunspec:"offset=48,sf=TotWh_SF"`
	TotWhImpPhC     Acc32       `sunspec:"offset=50,sf=TotWh_SF"`
	TotWh_SF        ScaleFactor `sunspec:"offset=52"`
	TotVAhExp       Acc32       `sunspec:"offset=53,sf=TotVAh_SF"`
	TotVAhExpPhA    Acc32       `sunspec:"offset=55,sf=TotVAh_SF"`
	TotVAhExpPhB    Acc32       `sunspec:"offset=57,sf=TotVAh_SF"`
	TotVAhExpPhC    Acc32       `sunspec:"offset=59,sf=TotVAh_SF"`
	TotVAhImp       Acc32       `sunspec:"offset=61,sf=TotVAh_SF"`
	TotVAhImpPhA    Acc32       `sunspec:"offset=63,sf=TotVAh_SF"`
	TotVAhImpPhB    Acc32       `sunspec:"offset=65,sf=TotVAh_SF"`
	TotVAhImpPhC    Acc32       `sunspec:"offset=67,sf=TotVAh_SF"`
	TotVAh_SF       ScaleFactor `sunspec:"offset=69"`
	TotVArhImpQ1    Acc32       `sunspec:"offset=70,sf=TotVArh_SF"`
	TotVArhImpQ1PhA Acc32       `sunspec:"offset=72,sf=TotVArh_SF"`
	TotVArhImpQ1PhB Acc32       `sunspec:"offset=74,sf=TotVArh_SF"`
	TotVArhImpQ1PhC Acc32       `sunspec:"offset=76,sf=TotVArh_SF"`
	TotVArhImpQ2    Acc32       `sunspec:"offset=78,sf=TotVArh_SF"`
	TotVArhImpQ2PhA Acc32       `sunspec:"offset=80,sf=TotVArh_SF"`
	TotVArhImpQ2PhB Acc32       `sunspec:"offset=82,sf=TotVArh_SF"`
	TotVArhImpQ2PhC Acc32       `sunspec:"offset=84,sf=TotVArh_SF"`
	TotVArhExpQ3    Acc32       `sunspec:"offset=86,sf=TotVArh_SF"`
	TotVArhExpQ3PhA Acc32       `sunspec:"offset=88,sf=TotVArh_SF"`
	TotVArhExpQ3PhB Acc32       `sunspec:"offset=90,sf=TotVArh_SF"`
	TotVArhExpQ3PhC Acc32       `sunspec:"offset=92,sf=TotVArh_SF"`
	TotVArhExpQ4    Acc32       `sunspec:"offset=94,sf=TotVArh_SF"`
	TotVArhExpQ4PhA Acc32       `sunspec:"offset=96,sf=TotVArh_SF"`
	TotVArhExpQ4PhB Acc32       `sunspec:"offset=98,sf=TotVArh_SF"`
	TotVArhExpQ4PhC Acc32       `sunspec:"offset=100,sf=TotVArh_SF"`
	TotVArh_SF      ScaleFactor `sunspec:"offset=102"`
	Evt             Bitfield32  `sunspec:"offset=103"`
}

func (self *Block202) GetId() ModelId {
	return 202
}

// Block203 - wye-connect three phase (abcn) meter -

type Block203 struct {
	A               int16       `sunspec:"offset=0,sf=A_SF"`
	AphA            int16       `sunspec:"offset=1,sf=A_SF"`
	AphB            int16       `sunspec:"offset=2,sf=A_SF"`
	AphC            int16       `sunspec:"offset=3,sf=A_SF"`
	A_SF            ScaleFactor `sunspec:"offset=4"`
	PhV             int16       `sunspec:"offset=5,sf=V_SF"`
	PhVphA          int16       `sunspec:"offset=6,sf=V_SF"`
	PhVphB          int16       `sunspec:"offset=7,sf=V_SF"`
	PhVphC          int16       `sunspec:"offset=8,sf=V_SF"`
	PPV             int16       `sunspec:"offset=9,sf=V_SF"`
	PhVphAB         int16       `sunspec:"offset=10,sf=V_SF"`
	PhVphBC         int16       `sunspec:"offset=11,sf=V_SF"`
	PhVphCA         int16       `sunspec:"offset=12,sf=V_SF"`
	V_SF            ScaleFactor `sunspec:"offset=13"`
	Hz              int16       `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF           ScaleFactor `sunspec:"offset=15"`
	W               int16       `sunspec:"offset=16,sf=W_SF"`
	WphA            int16       `sunspec:"offset=17,sf=W_SF"`
	WphB            int16       `sunspec:"offset=18,sf=W_SF"`
	WphC            int16       `sunspec:"offset=19,sf=W_SF"`
	W_SF            ScaleFactor `sunspec:"offset=20"`
	VA              int16       `sunspec:"offset=21,sf=VA_SF"`
	VAphA           int16       `sunspec:"offset=22,sf=VA_SF"`
	VAphB           int16       `sunspec:"offset=23,sf=VA_SF"`
	VAphC           int16       `sunspec:"offset=24,sf=VA_SF"`
	VA_SF           ScaleFactor `sunspec:"offset=25"`
	VAR             int16       `sunspec:"offset=26,sf=VAR_SF"`
	VARphA          int16       `sunspec:"offset=27,sf=VAR_SF"`
	VARphB          int16       `sunspec:"offset=28,sf=VAR_SF"`
	VARphC          int16       `sunspec:"offset=29,sf=VAR_SF"`
	VAR_SF          ScaleFactor `sunspec:"offset=30"`
	PF              int16       `sunspec:"offset=31,sf=PF_SF"`
	PFphA           int16       `sunspec:"offset=32,sf=PF_SF"`
	PFphB           int16       `sunspec:"offset=33,sf=PF_SF"`
	PFphC           int16       `sunspec:"offset=34,sf=PF_SF"`
	PF_SF           ScaleFactor `sunspec:"offset=35"`
	TotWhExp        Acc32       `sunspec:"offset=36,sf=TotWh_SF"`
	TotWhExpPhA     Acc32       `sunspec:"offset=38,sf=TotWh_SF"`
	TotWhExpPhB     Acc32       `sunspec:"offset=40,sf=TotWh_SF"`
	TotWhExpPhC     Acc32       `sunspec:"offset=42,sf=TotWh_SF"`
	TotWhImp        Acc32       `sunspec:"offset=44,sf=TotWh_SF"`
	TotWhImpPhA     Acc32       `sunspec:"offset=46,sf=TotWh_SF"`
	TotWhImpPhB     Acc32       `sunspec:"offset=48,sf=TotWh_SF"`
	TotWhImpPhC     Acc32       `sunspec:"offset=50,sf=TotWh_SF"`
	TotWh_SF        ScaleFactor `sunspec:"offset=52"`
	TotVAhExp       Acc32       `sunspec:"offset=53,sf=TotVAh_SF"`
	TotVAhExpPhA    Acc32       `sunspec:"offset=55,sf=TotVAh_SF"`
	TotVAhExpPhB    Acc32       `sunspec:"offset=57,sf=TotVAh_SF"`
	TotVAhExpPhC    Acc32       `sunspec:"offset=59,sf=TotVAh_SF"`
	TotVAhImp       Acc32       `sunspec:"offset=61,sf=TotVAh_SF"`
	TotVAhImpPhA    Acc32       `sunspec:"offset=63,sf=TotVAh_SF"`
	TotVAhImpPhB    Acc32       `sunspec:"offset=65,sf=TotVAh_SF"`
	TotVAhImpPhC    Acc32       `sunspec:"offset=67,sf=TotVAh_SF"`
	TotVAh_SF       ScaleFactor `sunspec:"offset=69"`
	TotVArhImpQ1    Acc32       `sunspec:"offset=70,sf=TotVArh_SF"`
	TotVArhImpQ1PhA Acc32       `sunspec:"offset=72,sf=TotVArh_SF"`
	TotVArhImpQ1PhB Acc32       `sunspec:"offset=74,sf=TotVArh_SF"`
	TotVArhImpQ1PhC Acc32       `sunspec:"offset=76,sf=TotVArh_SF"`
	TotVArhImpQ2    Acc32       `sunspec:"offset=78,sf=TotVArh_SF"`
	TotVArhImpQ2PhA Acc32       `sunspec:"offset=80,sf=TotVArh_SF"`
	TotVArhImpQ2PhB Acc32       `sunspec:"offset=82,sf=TotVArh_SF"`
	TotVArhImpQ2PhC Acc32       `sunspec:"offset=84,sf=TotVArh_SF"`
	TotVArhExpQ3    Acc32       `sunspec:"offset=86,sf=TotVArh_SF"`
	TotVArhExpQ3PhA Acc32       `sunspec:"offset=88,sf=TotVArh_SF"`
	TotVArhExpQ3PhB Acc32       `sunspec:"offset=90,sf=TotVArh_SF"`
	TotVArhExpQ3PhC Acc32       `sunspec:"offset=92,sf=TotVArh_SF"`
	TotVArhExpQ4    Acc32       `sunspec:"offset=94,sf=TotVArh_SF"`
	TotVArhExpQ4PhA Acc32       `sunspec:"offset=96,sf=TotVArh_SF"`
	TotVArhExpQ4PhB Acc32       `sunspec:"offset=98,sf=TotVArh_SF"`
	TotVArhExpQ4PhC Acc32       `sunspec:"offset=100,sf=TotVArh_SF"`
	TotVArh_SF      ScaleFactor `sunspec:"offset=102"`
	Evt             Bitfield32  `sunspec:"offset=103"`
}

func (self *Block203) GetId() ModelId {
	return 203
}

// Block204 - delta-connect three phase (abc) meter -

type Block204 struct {
	A               int16       `sunspec:"offset=0,sf=A_SF"`
	AphA            int16       `sunspec:"offset=1,sf=A_SF"`
	AphB            int16       `sunspec:"offset=2,sf=A_SF"`
	AphC            int16       `sunspec:"offset=3,sf=A_SF"`
	A_SF            ScaleFactor `sunspec:"offset=4"`
	PhV             int16       `sunspec:"offset=5,sf=V_SF"`
	PhVphA          int16       `sunspec:"offset=6,sf=V_SF"`
	PhVphB          int16       `sunspec:"offset=7,sf=V_SF"`
	PhVphC          int16       `sunspec:"offset=8,sf=V_SF"`
	PPV             int16       `sunspec:"offset=9,sf=V_SF"`
	PhVphAB         int16       `sunspec:"offset=10,sf=V_SF"`
	PhVphBC         int16       `sunspec:"offset=11,sf=V_SF"`
	PhVphCA         int16       `sunspec:"offset=12,sf=V_SF"`
	V_SF            ScaleFactor `sunspec:"offset=13"`
	Hz              int16       `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF           ScaleFactor `sunspec:"offset=15"`
	W               int16       `sunspec:"offset=16,sf=W_SF"`
	WphA            int16       `sunspec:"offset=17,sf=W_SF"`
	WphB            int16       `sunspec:"offset=18,sf=W_SF"`
	WphC            int16       `sunspec:"offset=19,sf=W_SF"`
	W_SF            ScaleFactor `sunspec:"offset=20"`
	VA              int16       `sunspec:"offset=21,sf=VA_SF"`
	VAphA           int16       `sunspec:"offset=22,sf=VA_SF"`
	VAphB           int16       `sunspec:"offset=23,sf=VA_SF"`
	VAphC           int16       `sunspec:"offset=24,sf=VA_SF"`
	VA_SF           ScaleFactor `sunspec:"offset=25"`
	VAR             int16       `sunspec:"offset=26,sf=VAR_SF"`
	VARphA          int16       `sunspec:"offset=27,sf=VAR_SF"`
	VARphB          int16       `sunspec:"offset=28,sf=VAR_SF"`
	VARphC          int16       `sunspec:"offset=29,sf=VAR_SF"`
	VAR_SF          ScaleFactor `sunspec:"offset=30"`
	PF              int16       `sunspec:"offset=31,sf=PF_SF"`
	PFphA           int16       `sunspec:"offset=32,sf=PF_SF"`
	PFphB           int16       `sunspec:"offset=33,sf=PF_SF"`
	PFphC           int16       `sunspec:"offset=34,sf=PF_SF"`
	PF_SF           ScaleFactor `sunspec:"offset=35"`
	TotWhExp        Acc32       `sunspec:"offset=36,sf=TotWh_SF"`
	TotWhExpPhA     Acc32       `sunspec:"offset=38,sf=TotWh_SF"`
	TotWhExpPhB     Acc32       `sunspec:"offset=40,sf=TotWh_SF"`
	TotWhExpPhC     Acc32       `sunspec:"offset=42,sf=TotWh_SF"`
	TotWhImp        Acc32       `sunspec:"offset=44,sf=TotWh_SF"`
	TotWhImpPhA     Acc32       `sunspec:"offset=46,sf=TotWh_SF"`
	TotWhImpPhB     Acc32       `sunspec:"offset=48,sf=TotWh_SF"`
	TotWhImpPhC     Acc32       `sunspec:"offset=50,sf=TotWh_SF"`
	TotWh_SF        ScaleFactor `sunspec:"offset=52"`
	TotVAhExp       Acc32       `sunspec:"offset=53,sf=TotVAh_SF"`
	TotVAhExpPhA    Acc32       `sunspec:"offset=55,sf=TotVAh_SF"`
	TotVAhExpPhB    Acc32       `sunspec:"offset=57,sf=TotVAh_SF"`
	TotVAhExpPhC    Acc32       `sunspec:"offset=59,sf=TotVAh_SF"`
	TotVAhImp       Acc32       `sunspec:"offset=61,sf=TotVAh_SF"`
	TotVAhImpPhA    Acc32       `sunspec:"offset=63,sf=TotVAh_SF"`
	TotVAhImpPhB    Acc32       `sunspec:"offset=65,sf=TotVAh_SF"`
	TotVAhImpPhC    Acc32       `sunspec:"offset=67,sf=TotVAh_SF"`
	TotVAh_SF       ScaleFactor `sunspec:"offset=69"`
	TotVArhImpQ1    Acc32       `sunspec:"offset=70,sf=TotVArh_SF"`
	TotVArhImpQ1PhA Acc32       `sunspec:"offset=72,sf=TotVArh_SF"`
	TotVArhImpQ1PhB Acc32       `sunspec:"offset=74,sf=TotVArh_SF"`
	TotVArhImpQ1PhC Acc32       `sunspec:"offset=76,sf=TotVArh_SF"`
	TotVArhImpQ2    Acc32       `sunspec:"offset=78,sf=TotVArh_SF"`
	TotVArhImpQ2PhA Acc32       `sunspec:"offset=80,sf=TotVArh_SF"`
	TotVArhImpQ2PhB Acc32       `sunspec:"offset=82,sf=TotVArh_SF"`
	TotVArhImpQ2PhC Acc32       `sunspec:"offset=84,sf=TotVArh_SF"`
	TotVArhExpQ3    Acc32       `sunspec:"offset=86,sf=TotVArh_SF"`
	TotVArhExpQ3PhA Acc32       `sunspec:"offset=88,sf=TotVArh_SF"`
	TotVArhExpQ3PhB Acc32       `sunspec:"offset=90,sf=TotVArh_SF"`
	TotVArhExpQ3PhC Acc32       `sunspec:"offset=92,sf=TotVArh_SF"`
	TotVArhExpQ4    Acc32       `sunspec:"offset=94,sf=TotVArh_SF"`
	TotVArhExpQ4PhA Acc32       `sunspec:"offset=96,sf=TotVArh_SF"`
	TotVArhExpQ4PhB Acc32       `sunspec:"offset=98,sf=TotVArh_SF"`
	TotVArhExpQ4PhC Acc32       `sunspec:"offset=100,sf=TotVArh_SF"`
	TotVArh_SF      ScaleFactor `sunspec:"offset=102"`
	Evt             Bitfield32  `sunspec:"offset=103"`
}

func (self *Block204) GetId() ModelId {
	return 204
}

// Block211 - single phase (AN or AB) meter -

type Block211 struct {
	A               float32    `sunspec:"offset=0"`
	AphA            float32    `sunspec:"offset=2"`
	AphB            float32    `sunspec:"offset=4"`
	AphC            float32    `sunspec:"offset=6"`
	PhV             float32    `sunspec:"offset=8"`
	PhVphA          float32    `sunspec:"offset=10"`
	PhVphB          float32    `sunspec:"offset=12"`
	PhVphC          float32    `sunspec:"offset=14"`
	PPV             float32    `sunspec:"offset=16"`
	PPVphAB         float32    `sunspec:"offset=18"`
	PPVphBC         float32    `sunspec:"offset=20"`
	PPVphCA         float32    `sunspec:"offset=22"`
	Hz              float32    `sunspec:"offset=24"`
	W               float32    `sunspec:"offset=26"`
	WphA            float32    `sunspec:"offset=28"`
	WphB            float32    `sunspec:"offset=30"`
	WphC            float32    `sunspec:"offset=32"`
	VA              float32    `sunspec:"offset=34"`
	VAphA           float32    `sunspec:"offset=36"`
	VAphB           float32    `sunspec:"offset=38"`
	VAphC           float32    `sunspec:"offset=40"`
	VAR             float32    `sunspec:"offset=42"`
	VARphA          float32    `sunspec:"offset=44"`
	VARphB          float32    `sunspec:"offset=46"`
	VARphC          float32    `sunspec:"offset=48"`
	PF              float32    `sunspec:"offset=50"`
	PFphA           float32    `sunspec:"offset=52"`
	PFphB           float32    `sunspec:"offset=54"`
	PFphC           float32    `sunspec:"offset=56"`
	TotWhExp        float32    `sunspec:"offset=58"`
	TotWhExpPhA     float32    `sunspec:"offset=60"`
	TotWhExpPhB     float32    `sunspec:"offset=62"`
	TotWhExpPhC     float32    `sunspec:"offset=64"`
	TotWhImp        float32    `sunspec:"offset=66"`
	TotWhImpPhA     float32    `sunspec:"offset=68"`
	TotWhImpPhB     float32    `sunspec:"offset=70"`
	TotWhImpPhC     float32    `sunspec:"offset=72"`
	TotVAhExp       float32    `sunspec:"offset=74"`
	TotVAhExpPhA    float32    `sunspec:"offset=76"`
	TotVAhExpPhB    float32    `sunspec:"offset=78"`
	TotVAhExpPhC    float32    `sunspec:"offset=80"`
	TotVAhImp       float32    `sunspec:"offset=82"`
	TotVAhImpPhA    float32    `sunspec:"offset=84"`
	TotVAhImpPhB    float32    `sunspec:"offset=86"`
	TotVAhImpPhC    float32    `sunspec:"offset=88"`
	TotVArhImpQ1    float32    `sunspec:"offset=90"`
	TotVArhImpQ1phA float32    `sunspec:"offset=92"`
	TotVArhImpQ1phB float32    `sunspec:"offset=94"`
	TotVArhImpQ1phC float32    `sunspec:"offset=96"`
	TotVArhImpQ2    float32    `sunspec:"offset=98"`
	TotVArhImpQ2phA float32    `sunspec:"offset=100"`
	TotVArhImpQ2phB float32    `sunspec:"offset=102"`
	TotVArhImpQ2phC float32    `sunspec:"offset=104"`
	TotVArhExpQ3    float32    `sunspec:"offset=106"`
	TotVArhExpQ3phA float32    `sunspec:"offset=108"`
	TotVArhExpQ3phB float32    `sunspec:"offset=110"`
	TotVArhExpQ3phC float32    `sunspec:"offset=112"`
	TotVArhExpQ4    float32    `sunspec:"offset=114"`
	TotVArhExpQ4phA float32    `sunspec:"offset=116"`
	TotVArhExpQ4phB float32    `sunspec:"offset=118"`
	TotVArhExpQ4phC float32    `sunspec:"offset=120"`
	Evt             Bitfield32 `sunspec:"offset=122"`
}

func (self *Block211) GetId() ModelId {
	return 211
}

// Block212 - split single phase (ABN) meter -

type Block212 struct {
	A               float32    `sunspec:"offset=0"`
	AphA            float32    `sunspec:"offset=2"`
	AphB            float32    `sunspec:"offset=4"`
	AphC            float32    `sunspec:"offset=6"`
	PhV             float32    `sunspec:"offset=8"`
	PhVphA          float32    `sunspec:"offset=10"`
	PhVphB          float32    `sunspec:"offset=12"`
	PhVphC          float32    `sunspec:"offset=14"`
	PPV             float32    `sunspec:"offset=16"`
	PPVphAB         float32    `sunspec:"offset=18"`
	PPVphBC         float32    `sunspec:"offset=20"`
	PPVphCA         float32    `sunspec:"offset=22"`
	Hz              float32    `sunspec:"offset=24"`
	W               float32    `sunspec:"offset=26"`
	WphA            float32    `sunspec:"offset=28"`
	WphB            float32    `sunspec:"offset=30"`
	WphC            float32    `sunspec:"offset=32"`
	VA              float32    `sunspec:"offset=34"`
	VAphA           float32    `sunspec:"offset=36"`
	VAphB           float32    `sunspec:"offset=38"`
	VAphC           float32    `sunspec:"offset=40"`
	VAR             float32    `sunspec:"offset=42"`
	VARphA          float32    `sunspec:"offset=44"`
	VARphB          float32    `sunspec:"offset=46"`
	VARphC          float32    `sunspec:"offset=48"`
	PF              float32    `sunspec:"offset=50"`
	PFphA           float32    `sunspec:"offset=52"`
	PFphB           float32    `sunspec:"offset=54"`
	PFphC           float32    `sunspec:"offset=56"`
	TotWhExp        float32    `sunspec:"offset=58"`
	TotWhExpPhA     float32    `sunspec:"offset=60"`
	TotWhExpPhB     float32    `sunspec:"offset=62"`
	TotWhExpPhC     float32    `sunspec:"offset=64"`
	TotWhImp        float32    `sunspec:"offset=66"`
	TotWhImpPhA     float32    `sunspec:"offset=68"`
	TotWhImpPhB     float32    `sunspec:"offset=70"`
	TotWhImpPhC     float32    `sunspec:"offset=72"`
	TotVAhExp       float32    `sunspec:"offset=74"`
	TotVAhExpPhA    float32    `sunspec:"offset=76"`
	TotVAhExpPhB    float32    `sunspec:"offset=78"`
	TotVAhExpPhC    float32    `sunspec:"offset=80"`
	TotVAhImp       float32    `sunspec:"offset=82"`
	TotVAhImpPhA    float32    `sunspec:"offset=84"`
	TotVAhImpPhB    float32    `sunspec:"offset=86"`
	TotVAhImpPhC    float32    `sunspec:"offset=88"`
	TotVArhImpQ1    float32    `sunspec:"offset=90"`
	TotVArhImpQ1phA float32    `sunspec:"offset=92"`
	TotVArhImpQ1phB float32    `sunspec:"offset=94"`
	TotVArhImpQ1phC float32    `sunspec:"offset=96"`
	TotVArhImpQ2    float32    `sunspec:"offset=98"`
	TotVArhImpQ2phA float32    `sunspec:"offset=100"`
	TotVArhImpQ2phB float32    `sunspec:"offset=102"`
	TotVArhImpQ2phC float32    `sunspec:"offset=104"`
	TotVArhExpQ3    float32    `sunspec:"offset=106"`
	TotVArhExpQ3phA float32    `sunspec:"offset=108"`
	TotVArhExpQ3phB float32    `sunspec:"offset=110"`
	TotVArhExpQ3phC float32    `sunspec:"offset=112"`
	TotVArhExpQ4    float32    `sunspec:"offset=114"`
	TotVArhExpQ4phA float32    `sunspec:"offset=116"`
	TotVArhExpQ4phB float32    `sunspec:"offset=118"`
	TotVArhExpQ4phC float32    `sunspec:"offset=120"`
	Evt             Bitfield32 `sunspec:"offset=122"`
}

func (self *Block212) GetId() ModelId {
	return 212
}

// Block213 - wye-connect three phase (abcn) meter -

type Block213 struct {
	A               float32    `sunspec:"offset=0"`
	AphA            float32    `sunspec:"offset=2"`
	AphB            float32    `sunspec:"offset=4"`
	AphC            float32    `sunspec:"offset=6"`
	PhV             float32    `sunspec:"offset=8"`
	PhVphA          float32    `sunspec:"offset=10"`
	PhVphB          float32    `sunspec:"offset=12"`
	PhVphC          float32    `sunspec:"offset=14"`
	PPV             float32    `sunspec:"offset=16"`
	PPVphAB         float32    `sunspec:"offset=18"`
	PPVphBC         float32    `sunspec:"offset=20"`
	PPVphCA         float32    `sunspec:"offset=22"`
	Hz              float32    `sunspec:"offset=24"`
	W               float32    `sunspec:"offset=26"`
	WphA            float32    `sunspec:"offset=28"`
	WphB            float32    `sunspec:"offset=30"`
	WphC            float32    `sunspec:"offset=32"`
	VA              float32    `sunspec:"offset=34"`
	VAphA           float32    `sunspec:"offset=36"`
	VAphB           float32    `sunspec:"offset=38"`
	VAphC           float32    `sunspec:"offset=40"`
	VAR             float32    `sunspec:"offset=42"`
	VARphA          float32    `sunspec:"offset=44"`
	VARphB          float32    `sunspec:"offset=46"`
	VARphC          float32    `sunspec:"offset=48"`
	PF              float32    `sunspec:"offset=50"`
	PFphA           float32    `sunspec:"offset=52"`
	PFphB           float32    `sunspec:"offset=54"`
	PFphC           float32    `sunspec:"offset=56"`
	TotWhExp        float32    `sunspec:"offset=58"`
	TotWhExpPhA     float32    `sunspec:"offset=60"`
	TotWhExpPhB     float32    `sunspec:"offset=62"`
	TotWhExpPhC     float32    `sunspec:"offset=64"`
	TotWhImp        float32    `sunspec:"offset=66"`
	TotWhImpPhA     float32    `sunspec:"offset=68"`
	TotWhImpPhB     float32    `sunspec:"offset=70"`
	TotWhImpPhC     float32    `sunspec:"offset=72"`
	TotVAhExp       float32    `sunspec:"offset=74"`
	TotVAhExpPhA    float32    `sunspec:"offset=76"`
	TotVAhExpPhB    float32    `sunspec:"offset=78"`
	TotVAhExpPhC    float32    `sunspec:"offset=80"`
	TotVAhImp       float32    `sunspec:"offset=82"`
	TotVAhImpPhA    float32    `sunspec:"offset=84"`
	TotVAhImpPhB    float32    `sunspec:"offset=86"`
	TotVAhImpPhC    float32    `sunspec:"offset=88"`
	TotVArhImpQ1    float32    `sunspec:"offset=90"`
	TotVArhImpQ1phA float32    `sunspec:"offset=92"`
	TotVArhImpQ1phB float32    `sunspec:"offset=94"`
	TotVArhImpQ1phC float32    `sunspec:"offset=96"`
	TotVArhImpQ2    float32    `sunspec:"offset=98"`
	TotVArhImpQ2phA float32    `sunspec:"offset=100"`
	TotVArhImpQ2phB float32    `sunspec:"offset=102"`
	TotVArhImpQ2phC float32    `sunspec:"offset=104"`
	TotVArhExpQ3    float32    `sunspec:"offset=106"`
	TotVArhExpQ3phA float32    `sunspec:"offset=108"`
	TotVArhExpQ3phB float32    `sunspec:"offset=110"`
	TotVArhExpQ3phC float32    `sunspec:"offset=112"`
	TotVArhExpQ4    float32    `sunspec:"offset=114"`
	TotVArhExpQ4phA float32    `sunspec:"offset=116"`
	TotVArhExpQ4phB float32    `sunspec:"offset=118"`
	TotVArhExpQ4phC float32    `sunspec:"offset=120"`
	Evt             Bitfield32 `sunspec:"offset=122"`
}

func (self *Block213) GetId() ModelId {
	return 213
}

// Block214 - delta-connect three phase (abc) meter -

type Block214 struct {
	A               float32    `sunspec:"offset=0"`
	AphA            float32    `sunspec:"offset=2"`
	AphB            float32    `sunspec:"offset=4"`
	AphC            float32    `sunspec:"offset=6"`
	PhV             float32    `sunspec:"offset=8"`
	PhVphA          float32    `sunspec:"offset=10"`
	PhVphB          float32    `sunspec:"offset=12"`
	PhVphC          float32    `sunspec:"offset=14"`
	PPV             float32    `sunspec:"offset=16"`
	PPVphAB         float32    `sunspec:"offset=18"`
	PPVphBC         float32    `sunspec:"offset=20"`
	PPVphCA         float32    `sunspec:"offset=22"`
	Hz              float32    `sunspec:"offset=24"`
	W               float32    `sunspec:"offset=26"`
	WphA            float32    `sunspec:"offset=28"`
	WphB            float32    `sunspec:"offset=30"`
	WphC            float32    `sunspec:"offset=32"`
	VA              float32    `sunspec:"offset=34"`
	VAphA           float32    `sunspec:"offset=36"`
	VAphB           float32    `sunspec:"offset=38"`
	VAphC           float32    `sunspec:"offset=40"`
	VAR             float32    `sunspec:"offset=42"`
	VARphA          float32    `sunspec:"offset=44"`
	VARphB          float32    `sunspec:"offset=46"`
	VARphC          float32    `sunspec:"offset=48"`
	PF              float32    `sunspec:"offset=50"`
	PFphA           float32    `sunspec:"offset=52"`
	PFphB           float32    `sunspec:"offset=54"`
	PFphC           float32    `sunspec:"offset=56"`
	TotWhExp        float32    `sunspec:"offset=58"`
	TotWhExpPhA     float32    `sunspec:"offset=60"`
	TotWhExpPhB     float32    `sunspec:"offset=62"`
	TotWhExpPhC     float32    `sunspec:"offset=64"`
	TotWhImp        float32    `sunspec:"offset=66"`
	TotWhImpPhA     float32    `sunspec:"offset=68"`
	TotWhImpPhB     float32    `sunspec:"offset=70"`
	TotWhImpPhC     float32    `sunspec:"offset=72"`
	TotVAhExp       float32    `sunspec:"offset=74"`
	TotVAhExpPhA    float32    `sunspec:"offset=76"`
	TotVAhExpPhB    float32    `sunspec:"offset=78"`
	TotVAhExpPhC    float32    `sunspec:"offset=80"`
	TotVAhImp       float32    `sunspec:"offset=82"`
	TotVAhImpPhA    float32    `sunspec:"offset=84"`
	TotVAhImpPhB    float32    `sunspec:"offset=86"`
	TotVAhImpPhC    float32    `sunspec:"offset=88"`
	TotVArhImpQ1    float32    `sunspec:"offset=90"`
	TotVArhImpQ1phA float32    `sunspec:"offset=92"`
	TotVArhImpQ1phB float32    `sunspec:"offset=94"`
	TotVArhImpQ1phC float32    `sunspec:"offset=96"`
	TotVArhImpQ2    float32    `sunspec:"offset=98"`
	TotVArhImpQ2phA float32    `sunspec:"offset=100"`
	TotVArhImpQ2phB float32    `sunspec:"offset=102"`
	TotVArhImpQ2phC float32    `sunspec:"offset=104"`
	TotVArhExpQ3    float32    `sunspec:"offset=106"`
	TotVArhExpQ3phA float32    `sunspec:"offset=108"`
	TotVArhExpQ3phB float32    `sunspec:"offset=110"`
	TotVArhExpQ3phC float32    `sunspec:"offset=112"`
	TotVArhExpQ4    float32    `sunspec:"offset=114"`
	TotVArhExpQ4phA float32    `sunspec:"offset=116"`
	TotVArhExpQ4phB float32    `sunspec:"offset=118"`
	TotVArhExpQ4phC float32    `sunspec:"offset=120"`
	Evt             Bitfield32 `sunspec:"offset=122"`
}

func (self *Block214) GetId() ModelId {
	return 214
}

// Block220 - Secure AC Meter Selected Readings - Include this model for secure metering

type Block220Repeat struct {
	DS uint16 `sunspec:"offset=0,access=r"`
}

type Block220 struct {
	A            int16       `sunspec:"offset=0,sf=A_SF"`
	A_SF         ScaleFactor `sunspec:"offset=1"`
	PhV          int16       `sunspec:"offset=2,sf=V_SF"`
	V_SF         ScaleFactor `sunspec:"offset=3"`
	Hz           int16       `sunspec:"offset=4,sf=Hz_SF"`
	Hz_SF        ScaleFactor `sunspec:"offset=5"`
	W            int16       `sunspec:"offset=6,sf=W_SF"`
	W_SF         ScaleFactor `sunspec:"offset=7"`
	VA           int16       `sunspec:"offset=8,sf=VA_SF"`
	VA_SF        ScaleFactor `sunspec:"offset=9"`
	VAR          int16       `sunspec:"offset=10,sf=VAR_SF"`
	VAR_SF       ScaleFactor `sunspec:"offset=11"`
	PF           int16       `sunspec:"offset=12,sf=PF_SF"`
	PF_SF        ScaleFactor `sunspec:"offset=13"`
	TotWhExp     Acc32       `sunspec:"offset=14,sf=TotWh_SF"`
	TotWhImp     Acc32       `sunspec:"offset=16,sf=TotWh_SF"`
	TotWh_SF     ScaleFactor `sunspec:"offset=18"`
	TotVAhExp    Acc32       `sunspec:"offset=19,sf=TotVAh_SF"`
	TotVAhImp    Acc32       `sunspec:"offset=21,sf=TotVAh_SF"`
	TotVAh_SF    ScaleFactor `sunspec:"offset=23"`
	TotVArhImpQ1 Acc32       `sunspec:"offset=24,sf=TotVArh_SF"`
	TotVArhImpQ2 Acc32       `sunspec:"offset=26,sf=TotVArh_SF"`
	TotVArhExpQ3 Acc32       `sunspec:"offset=28,sf=TotVArh_SF"`
	TotVArhExpQ4 Acc32       `sunspec:"offset=30,sf=TotVArh_SF"`
	TotVArh_SF   ScaleFactor `sunspec:"offset=32"`
	Evt          Bitfield32  `sunspec:"offset=33"`
	Rsrvd        Pad         `sunspec:"offset=35,access=r"`
	Ts           uint32      `sunspec:"offset=36,access=r"`
	Ms           uint16      `sunspec:"offset=38,access=r"`
	Seq          uint16      `sunspec:"offset=39,access=r"`
	Alg          Enum16      `sunspec:"offset=40,access=r"`
	N            uint16      `sunspec:"offset=41,access=r"`

	Repeats []Block220Repeat
}

func (self *Block220) GetId() ModelId {
	return 220
}

// Block302 - Irradiance Model - Include to support various irradiance measurements

type Block302 struct {
	GHI  uint16 `sunspec:"offset=0"`
	POAI uint16 `sunspec:"offset=1"`
	DFI  uint16 `sunspec:"offset=2"`
	DNI  uint16 `sunspec:"offset=3"`
	OTI  uint16 `sunspec:"offset=4"`
}

func (self *Block302) GetId() ModelId {
	return 302
}

// Block303 - Back of Module Temperature Model - Include to support variable number of  back of module temperature measurements

type Block303Repeat struct {
	TmpBOM int16 `sunspec:"offset=0,sf=-1"`
}

type Block303 struct {
	Repeats []Block303Repeat
}

func (self *Block303) GetId() ModelId {
	return 303
}

// Block304 - Inclinometer Model - Include to support orienation measurements

type Block304Repeat struct {
	Inclx int32 `sunspec:"offset=0,sf=-2"`
	Incly int32 `sunspec:"offset=2,sf=-2"`
	Inclz int32 `sunspec:"offset=4,sf=-2"`
}

type Block304 struct {
	Repeats []Block304Repeat
}

func (self *Block304) GetId() ModelId {
	return 304
}

// Block305 - GPS - Include to support location measurements

type Block305 struct {
	Tm   String `sunspec:"offset=0,len=6"`
	Date String `sunspec:"offset=6,len=4"`
	Loc  String `sunspec:"offset=10,len=20"`
	Lat  int32  `sunspec:"offset=30,sf=-7"`
	Long int32  `sunspec:"offset=32,sf=-7"`
	Alt  int32  `sunspec:"offset=34"`
}

func (self *Block305) GetId() ModelId {
	return 305
}

// Block306 - Reference Point Model - Include to support a standard reference point

type Block306 struct {
	GHI uint16 `sunspec:"offset=0"`
	A   uint16 `sunspec:"offset=1"`
	V   uint16 `sunspec:"offset=2"`
	Tmp uint16 `sunspec:"offset=3"`
}

func (self *Block306) GetId() ModelId {
	return 306
}

// Block307 - Base Met - Base Meteorolgical Model

type Block307 struct {
	TmpAmb  int16 `sunspec:"offset=0,sf=-1"`
	RH      int16 `sunspec:"offset=1"`
	Pres    int16 `sunspec:"offset=2"`
	WndSpd  int16 `sunspec:"offset=3"`
	WndDir  int16 `sunspec:"offset=4"`
	Rain    int16 `sunspec:"offset=5"`
	Snw     int16 `sunspec:"offset=6"`
	PPT     int16 `sunspec:"offset=7"`
	ElecFld int16 `sunspec:"offset=8"`
	SurWet  int16 `sunspec:"offset=9"`
	SoilWet int16 `sunspec:"offset=10"`
}

func (self *Block307) GetId() ModelId {
	return 307
}

// Block308 - Mini Met Model - Include to support a few basic measurements

type Block308 struct {
	GHI    uint16 `sunspec:"offset=0"`
	TmpBOM int16  `sunspec:"offset=1,sf=-1"`
	TmpAmb int16  `sunspec:"offset=2,sf=-1"`
	WndSpd uint16 `sunspec:"offset=3"`
}

func (self *Block308) GetId() ModelId {
	return 308
}

// Block401 - String Combiner (Current) - A basic string combiner

type Block401Repeat struct {
	InID     uint16     `sunspec:"offset=0"`
	InEvt    Bitfield32 `sunspec:"offset=1"`
	InEvtVnd Bitfield32 `sunspec:"offset=3"`
	InDCA    int16      `sunspec:"offset=5,sf=DCA_SF"`
	InDCAhr  uint32     `sunspec:"offset=6,sf=DCAhr_SF"`
}

type Block401 struct {
	DCA_SF   ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF ScaleFactor `sunspec:"offset=1"`
	DCV_SF   ScaleFactor `sunspec:"offset=2"`
	DCAMax   uint16      `sunspec:"offset=3,sf=DCA_SF"`
	N        Count       `sunspec:"offset=4"`
	Evt      Bitfield32  `sunspec:"offset=5"`
	EvtVnd   Bitfield32  `sunspec:"offset=7"`
	DCA      int16       `sunspec:"offset=9,sf=DCA_SF"`
	DCAhr    uint32      `sunspec:"offset=10,sf=DCAhr_SF"`
	DCV      uint16      `sunspec:"offset=12,sf=DCV_SF"`
	Tmp      int16       `sunspec:"offset=13"`

	Repeats []Block401Repeat
}

func (self *Block401) GetId() ModelId {
	return 401
}

// Block402 - String Combiner (Advanced) - An advanced string combiner

type Block402Repeat struct {
	InID    uint16     `sunspec:"offset=0"`
	InEvt   Bitfield32 `sunspec:"offset=1"`
	EvtVnd  Bitfield32 `sunspec:"offset=3"`
	InDCA   int16      `sunspec:"offset=5,sf=DCA_SF"`
	InDCAhr uint32     `sunspec:"offset=6,sf=DCAhr_SF"`
	InDCV   uint16     `sunspec:"offset=8,sf=DCV_SF"`
	InDCW   int16      `sunspec:"offset=9,sf=DCWh_SF"`
	InDCWh  uint32     `sunspec:"offset=10"`
	InDCPR  uint16     `sunspec:"offset=12"`
	InN     uint16     `sunspec:"offset=13"`
}

type Block402 struct {
	DCA_SF   ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF ScaleFactor `sunspec:"offset=1"`
	DCV_SF   ScaleFactor `sunspec:"offset=2"`
	DCW_SF   ScaleFactor `sunspec:"offset=3"`
	DCWh_SF  ScaleFactor `sunspec:"offset=4"`
	DCAMax   uint16      `sunspec:"offset=5"`
	N        Count       `sunspec:"offset=6"`
	Evt      Bitfield32  `sunspec:"offset=7"`
	EvtVnd   Bitfield32  `sunspec:"offset=9"`
	DCA      int16       `sunspec:"offset=11,sf=DCA_SF"`
	DCAhr    uint32      `sunspec:"offset=12,sf=DCAhr_SF"`
	DCV      uint16      `sunspec:"offset=14,sf=DCV_SF"`
	Tmp      int16       `sunspec:"offset=15"`
	DCW      int16       `sunspec:"offset=16,sf=DCW_SF"`
	DCPR     uint16      `sunspec:"offset=17"`
	DCWh     uint32      `sunspec:"offset=18,sf=DCWh_SF"`

	Repeats []Block402Repeat
}

func (self *Block402) GetId() ModelId {
	return 402
}

// Block403 - String Combiner (Current) - A basic string combiner model

type Block403Repeat struct {
	InID     uint16     `sunspec:"offset=0"`
	InEvt    Bitfield32 `sunspec:"offset=1"`
	InEvtVnd Bitfield32 `sunspec:"offset=3"`
	InDCA    int16      `sunspec:"offset=5,sf=InDCA_SF"`
	InDCAhr  Acc32      `sunspec:"offset=6,sf=InDCAhr_SF"`
}

type Block403 struct {
	DCA_SF     ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF   ScaleFactor `sunspec:"offset=1"`
	DCV_SF     ScaleFactor `sunspec:"offset=2"`
	DCAMax     uint16      `sunspec:"offset=3,sf=DCA_SF"`
	N          Count       `sunspec:"offset=4"`
	Evt        Bitfield32  `sunspec:"offset=5"`
	EvtVnd     Bitfield32  `sunspec:"offset=7"`
	DCA        int16       `sunspec:"offset=9,sf=DCA_SF"`
	DCAhr      Acc32       `sunspec:"offset=10,sf=DCAhr_SF"`
	DCV        int16       `sunspec:"offset=12,sf=DCV_SF"`
	Tmp        int16       `sunspec:"offset=13"`
	InDCA_SF   ScaleFactor `sunspec:"offset=14"`
	InDCAhr_SF ScaleFactor `sunspec:"offset=15"`

	Repeats []Block403Repeat
}

func (self *Block403) GetId() ModelId {
	return 403
}

// Block404 - String Combiner (Advanced) - An advanced string combiner including voltage and energy measurements

type Block404Repeat struct {
	InID     uint16     `sunspec:"offset=0"`
	InEvt    Bitfield32 `sunspec:"offset=1"`
	InEvtVnd Bitfield32 `sunspec:"offset=3"`
	InDCA    int16      `sunspec:"offset=5,sf=InDCA_SF"`
	InDCAhr  Acc32      `sunspec:"offset=6,sf=InDCAhr_SF"`
	InDCV    int16      `sunspec:"offset=8,sf=InDCV_SF"`
	InDCW    int16      `sunspec:"offset=9,sf=InDCW_SF"`
	InDCWh   Acc32      `sunspec:"offset=10,sf=InDCWh_SF"`
	InDCPR   uint16     `sunspec:"offset=12"`
	InN      uint16     `sunspec:"offset=13"`
}

type Block404 struct {
	DCA_SF     ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF   ScaleFactor `sunspec:"offset=1"`
	DCV_SF     ScaleFactor `sunspec:"offset=2"`
	DCW_SF     ScaleFactor `sunspec:"offset=3"`
	DCWh_SF    ScaleFactor `sunspec:"offset=4"`
	DCAMax     uint16      `sunspec:"offset=5,sf=DCA_SF"`
	N          Count       `sunspec:"offset=6"`
	Evt        Bitfield32  `sunspec:"offset=7"`
	EvtVnd     Bitfield32  `sunspec:"offset=9"`
	DCA        int16       `sunspec:"offset=11,sf=DCA_SF"`
	DCAhr      Acc32       `sunspec:"offset=12,sf=DCAhr_SF"`
	DCV        int16       `sunspec:"offset=14,sf=DCV_SF"`
	Tmp        int16       `sunspec:"offset=15"`
	DCW        int16       `sunspec:"offset=16,sf=DCW_SF"`
	DCPR       int16       `sunspec:"offset=17"`
	DCWh       Acc32       `sunspec:"offset=18,sf=DCWh_SF"`
	InDCA_SF   ScaleFactor `sunspec:"offset=20"`
	InDCAhr_SF ScaleFactor `sunspec:"offset=21"`
	InDCV_SF   ScaleFactor `sunspec:"offset=22"`
	InDCW_SF   ScaleFactor `sunspec:"offset=23"`
	InDCWh_SF  ScaleFactor `sunspec:"offset=24"`

	Repeats []Block404Repeat
}

func (self *Block404) GetId() ModelId {
	return 404
}

// Block501 - Solar Module - A solar module model supporing DC-DC converter

type Block501 struct {
	Stat     Enum16     `sunspec:"offset=0"`
	StatVend Enum16     `sunspec:"offset=1"`
	Evt      Bitfield32 `sunspec:"offset=2"`
	EvtVend  Bitfield32 `sunspec:"offset=4"`
	Ctl      Enum16     `sunspec:"offset=6,access=rw"`
	CtlVend  Enum32     `sunspec:"offset=7,access=rw"`
	CtlVal   int32      `sunspec:"offset=9,access=rw"`
	Tms      uint32     `sunspec:"offset=11"`
	OutA     float32    `sunspec:"offset=13"`
	OutV     float32    `sunspec:"offset=15"`
	OutWh    float32    `sunspec:"offset=17"`
	OutW     float32    `sunspec:"offset=19"`
	Tmp      float32    `sunspec:"offset=21"`
	InA      float32    `sunspec:"offset=23"`
	InV      float32    `sunspec:"offset=25"`
	InWh     float32    `sunspec:"offset=27"`
	InW      float32    `sunspec:"offset=29"`
}

func (self *Block501) GetId() ModelId {
	return 501
}

// Block502 - Solar Module - A solar module model supporing DC-DC converter

type Block502 struct {
	A_SF     ScaleFactor `sunspec:"offset=0"`
	V_SF     ScaleFactor `sunspec:"offset=1"`
	W_SF     ScaleFactor `sunspec:"offset=2"`
	Wh_SF    ScaleFactor `sunspec:"offset=3"`
	Stat     Enum16      `sunspec:"offset=4"`
	StatVend Enum16      `sunspec:"offset=5"`
	Evt      Bitfield32  `sunspec:"offset=6"`
	EvtVend  Bitfield32  `sunspec:"offset=8"`
	Ctl      Enum16      `sunspec:"offset=10,access=rw"`
	CtlVend  Enum32      `sunspec:"offset=11,access=rw"`
	CtlVal   int32       `sunspec:"offset=13,access=rw"`
	Tms      uint32      `sunspec:"offset=15"`
	OutA     int16       `sunspec:"offset=17,sf=A_SF"`
	OutV     int16       `sunspec:"offset=18,sf=V_SF"`
	OutWh    Acc32       `sunspec:"offset=19,sf=Wh_SF"`
	OutPw    int16       `sunspec:"offset=21,sf=W_SF"`
	Tmp      int16       `sunspec:"offset=22"`
	InA      int16       `sunspec:"offset=23,sf=A_SF"`
	InV      int16       `sunspec:"offset=24,sf=V_SF"`
	InWh     Acc32       `sunspec:"offset=25,sf=Wh_SF"`
	InW      int16       `sunspec:"offset=27,sf=W_SF"`
}

func (self *Block502) GetId() ModelId {
	return 502
}

// Block601 - Tracker Controller DRAFT 2 - Monitors and controls multiple trackers

type Block601Repeat struct {
	Id     String     `sunspec:"offset=0,len=8"`
	ElTrgt int32      `sunspec:"offset=8,sf=Dgr_SF"`
	AzTrgt int32      `sunspec:"offset=10,sf=SF"`
	ElPos  int32      `sunspec:"offset=12,sf=Dgr_SF"`
	AzPos  int32      `sunspec:"offset=14,sf=Dgr_SF"`
	ElCtl  int32      `sunspec:"offset=16,sf=Dgr_SF,access=rw"`
	AzCtl  int32      `sunspec:"offset=18,sf=Dgr_SF,access=rw"`
	Ctl    Enum16     `sunspec:"offset=20,access=rw"`
	Alm    Bitfield16 `sunspec:"offset=21"`
}

type Block601 struct {
	Nam       String      `sunspec:"offset=0,len=8"`
	Typ       Enum16      `sunspec:"offset=8"`
	DtLoc     String      `sunspec:"offset=9,len=5"`
	TmLoc     String      `sunspec:"offset=14,len=3"`
	Day       uint16      `sunspec:"offset=17"`
	GlblElCtl int32       `sunspec:"offset=18,sf=Dgr_SF,access=rw"`
	GlblAzCtl int32       `sunspec:"offset=20,sf=Dgr_SF,access=rw"`
	GlblCtl   Enum16      `sunspec:"offset=22,access=rw"`
	GlblAlm   Bitfield16  `sunspec:"offset=23"`
	Dgr_SF    ScaleFactor `sunspec:"offset=24"`
	N         uint16      `sunspec:"offset=25"`

	Repeats []Block601Repeat
}

func (self *Block601) GetId() ModelId {
	return 601
}

// Block801 - Energy Storage Base Model (DEPRECATED) - This model has been deprecated.

type Block801 struct {
	DEPRECATED Enum16 `sunspec:"offset=0"`
}

func (self *Block801) GetId() ModelId {
	return 801
}

// Block802 - Battery Base Model -

type Block802 struct {
	AHRtg            uint16      `sunspec:"offset=0,sf=AHRtg_SF"`
	WHRtg            uint16      `sunspec:"offset=1,sf=WHRtg_SF"`
	WChaRteMax       uint16      `sunspec:"offset=2,sf=WChaDisChaMax_SF"`
	WDisChaRteMax    uint16      `sunspec:"offset=3,sf=WChaDisChaMax_SF"`
	DisChaRte        uint16      `sunspec:"offset=4,sf=DisChaRte_SF"`
	SoCMax           uint16      `sunspec:"offset=5,sf=SoC_SF"`
	SoCMin           uint16      `sunspec:"offset=6,sf=SoC_SF"`
	SocRsvMax        uint16      `sunspec:"offset=7,sf=SoC_SF,access=rw"`
	SoCRsvMin        uint16      `sunspec:"offset=8,sf=SoC_SF,access=rw"`
	SoC              uint16      `sunspec:"offset=9,sf=SoC_SF"`
	DoD              uint16      `sunspec:"offset=10,sf=DoD_SF"`
	SoH              uint16      `sunspec:"offset=11,sf=SoH_SF"`
	NCyc             uint32      `sunspec:"offset=12"`
	ChaSt            Enum16      `sunspec:"offset=14"`
	LocRemCtl        Enum16      `sunspec:"offset=15"`
	Hb               uint16      `sunspec:"offset=16"`
	CtrlHb           uint16      `sunspec:"offset=17,access=rw"`
	AlmRst           uint16      `sunspec:"offset=18,access=rw"`
	Typ              Enum16      `sunspec:"offset=19"`
	State            Enum16      `sunspec:"offset=20"`
	Pad1             Pad         `sunspec:"offset=21"`
	WarrDt           uint32      `sunspec:"offset=22"`
	Evt1             Bitfield32  `sunspec:"offset=24"`
	Evt2             Bitfield32  `sunspec:"offset=26"`
	EvtVnd1          Bitfield32  `sunspec:"offset=28"`
	EvtVnd2          Bitfield32  `sunspec:"offset=30"`
	V                uint16      `sunspec:"offset=32,sf=V_SF"`
	VMax             uint16      `sunspec:"offset=33,sf=V_SF"`
	VMin             uint16      `sunspec:"offset=34,sf=V_SF"`
	CellVMax         uint16      `sunspec:"offset=35,sf=CellV_SF"`
	CellVMaxStr      uint16      `sunspec:"offset=36"`
	CellVMaxMod      uint16      `sunspec:"offset=37"`
	CellVMin         uint16      `sunspec:"offset=38,sf=CellV_SF"`
	CellVMinStr      uint16      `sunspec:"offset=39"`
	CellVMinMod      uint16      `sunspec:"offset=40"`
	CellVAvg         uint16      `sunspec:"offset=41,sf=CellV_SF"`
	A                int16       `sunspec:"offset=42,sf=A_SF"`
	AChaMax          uint16      `sunspec:"offset=43,sf=AMax_SF"`
	ADisChaMax       uint16      `sunspec:"offset=44,sf=AMax_SF"`
	W                int16       `sunspec:"offset=45,sf=W_SF"`
	ReqInvState      Enum16      `sunspec:"offset=46"`
	ReqW             int16       `sunspec:"offset=47,sf=W_SF"`
	SetOp            Enum16      `sunspec:"offset=48,access=rw"`
	SetInvState      Enum16      `sunspec:"offset=49,access=rw"`
	AHRtg_SF         ScaleFactor `sunspec:"offset=50"`
	WHRtg_SF         ScaleFactor `sunspec:"offset=51"`
	WChaDisChaMax_SF ScaleFactor `sunspec:"offset=52"`
	DisChaRte_SF     ScaleFactor `sunspec:"offset=53"`
	SoC_SF           ScaleFactor `sunspec:"offset=54"`
	DoD_SF           ScaleFactor `sunspec:"offset=55"`
	SoH_SF           ScaleFactor `sunspec:"offset=56"`
	V_SF             ScaleFactor `sunspec:"offset=57"`
	CellV_SF         ScaleFactor `sunspec:"offset=58"`
	A_SF             ScaleFactor `sunspec:"offset=59"`
	AMax_SF          ScaleFactor `sunspec:"offset=60"`
	W_SF             ScaleFactor `sunspec:"offset=61"`
}

func (self *Block802) GetId() ModelId {
	return 802
}

// Block803 - Lithium-Ion Battery Bank Model -

type Block803Repeat struct {
	StrNMod         uint16     `sunspec:"offset=0"`
	StrSt           Bitfield32 `sunspec:"offset=1"`
	StrConFail      Enum16     `sunspec:"offset=3"`
	StrSoC          uint16     `sunspec:"offset=4"`
	StrSoH          uint16     `sunspec:"offset=5,sf=SoH_SF"`
	StrA            int16      `sunspec:"offset=6,sf=A_SF"`
	StrCellVMax     uint16     `sunspec:"offset=7,sf=CellV_SF"`
	StrCellVMaxMod  uint16     `sunspec:"offset=8"`
	StrCellVMin     uint16     `sunspec:"offset=9,sf=CellV_SF"`
	StrCellVMinMod  uint16     `sunspec:"offset=10"`
	StrCellVAvg     uint16     `sunspec:"offset=11,sf=CellV_SF"`
	StrModTmpMax    int16      `sunspec:"offset=12,sf=ModTmp_SF"`
	StrModTmpMaxMod uint16     `sunspec:"offset=13"`
	StrModTmpMin    int16      `sunspec:"offset=14,sf=ModTmp_SF"`
	StrModTmpMinMod uint16     `sunspec:"offset=15"`
	StrModTmpAvg    int16      `sunspec:"offset=16,sf=ModTmp_SF"`
	Pad3            Pad        `sunspec:"offset=17"`
	StrConSt        Bitfield32 `sunspec:"offset=18"`
	StrEvt1         Bitfield32 `sunspec:"offset=20"`
	StrEvt2         Bitfield32 `sunspec:"offset=22"`
	StrEvtVnd1      Bitfield32 `sunspec:"offset=24"`
	StrEvtVnd2      Bitfield32 `sunspec:"offset=26"`
	StrSetEna       Enum16     `sunspec:"offset=28,access=rw"`
	StrSetCon       Enum16     `sunspec:"offset=29,access=rw"`
	Pad4            Pad        `sunspec:"offset=30"`
	Pad5            Pad        `sunspec:"offset=31"`
}

type Block803 struct {
	NStr         uint16      `sunspec:"offset=0"`
	NStrCon      uint16      `sunspec:"offset=1"`
	ModTmpMax    int16       `sunspec:"offset=2,sf=ModTmp_SF"`
	ModTmpMaxStr uint16      `sunspec:"offset=3"`
	ModTmpMaxMod uint16      `sunspec:"offset=4"`
	ModTmpMin    int16       `sunspec:"offset=5,sf=ModTmp_SF"`
	ModTmpMinStr uint16      `sunspec:"offset=6"`
	ModTmpMinMod uint16      `sunspec:"offset=7"`
	ModTmpAvg    uint16      `sunspec:"offset=8"`
	StrVMax      uint16      `sunspec:"offset=9,sf=V_SF"`
	StrVMaxStr   uint16      `sunspec:"offset=10"`
	StrVMin      uint16      `sunspec:"offset=11,sf=V_SF"`
	StrVMinStr   uint16      `sunspec:"offset=12"`
	StrVAvg      uint16      `sunspec:"offset=13,sf=V_SF"`
	StrAMax      int16       `sunspec:"offset=14,sf=A_SF"`
	StrAMaxStr   uint16      `sunspec:"offset=15"`
	StrAMin      int16       `sunspec:"offset=16,sf=A_SF"`
	StrAMinStr   uint16      `sunspec:"offset=17"`
	StrAAvg      int16       `sunspec:"offset=18,sf=A_SF"`
	NCellBal     uint16      `sunspec:"offset=19"`
	CellV_SF     ScaleFactor `sunspec:"offset=20"`
	ModTmp_SF    ScaleFactor `sunspec:"offset=21"`
	A_SF         ScaleFactor `sunspec:"offset=22"`
	SoH_SF       ScaleFactor `sunspec:"offset=23"`
	Pad1         Pad         `sunspec:"offset=24"`
	Pad2         Pad         `sunspec:"offset=25"`

	Repeats []Block803Repeat
}

func (self *Block803) GetId() ModelId {
	return 803
}

// Block804 - Lithium-Ion String Model -

type Block804Repeat struct {
	ModNCell          uint16 `sunspec:"offset=0"`
	ModSoC            uint16 `sunspec:"offset=1,sf=SoC_SF"`
	ModSoH            uint16 `sunspec:"offset=2,sf=SoH_SF"`
	ModCellVMax       uint16 `sunspec:"offset=3,sf=CellV_SF"`
	ModCellVMaxCell   uint16 `sunspec:"offset=4"`
	ModCellVMin       uint16 `sunspec:"offset=5,sf=CellV_SF"`
	ModCellVMinCell   uint16 `sunspec:"offset=6,sf=CellV_SF"`
	ModCellVAvg       uint16 `sunspec:"offset=7,sf=CellV_SF"`
	ModCellTmpMax     int16  `sunspec:"offset=8,sf=ModTmp_SF"`
	ModCellTmpMaxCell uint16 `sunspec:"offset=9"`
	ModCellTmpMin     int16  `sunspec:"offset=10,sf=ModTmp_SF"`
	ModCellTmpMinCell uint16 `sunspec:"offset=11"`
	ModCellTmpAvg     int16  `sunspec:"offset=12,sf=ModTmp_SF"`
	Pad2              Pad    `sunspec:"offset=13"`
	Pad3              Pad    `sunspec:"offset=14"`
	Pad4              Pad    `sunspec:"offset=15"`
}

type Block804 struct {
	Idx          uint16      `sunspec:"offset=0"`
	NMod         uint16      `sunspec:"offset=1"`
	St           Bitfield32  `sunspec:"offset=2"`
	ConFail      Enum16      `sunspec:"offset=4"`
	NCellBal     uint16      `sunspec:"offset=5"`
	SoC          uint16      `sunspec:"offset=6,sf=SoC_SF"`
	DoD          uint16      `sunspec:"offset=7,sf=StrDoC_SF"`
	NCyc         uint32      `sunspec:"offset=8"`
	SoH          uint16      `sunspec:"offset=9,sf=SoH_SF"`
	A            int16       `sunspec:"offset=10,sf=A_SF"`
	V            uint16      `sunspec:"offset=11,sf=V_SF"`
	CellVMax     uint16      `sunspec:"offset=12,sf=CellV_SF"`
	CellVMaxMod  uint16      `sunspec:"offset=13"`
	CellVMin     uint16      `sunspec:"offset=14,sf=CellV_SF"`
	CellVMinMod  uint16      `sunspec:"offset=15"`
	CellVAvg     uint16      `sunspec:"offset=16,sf=CellV_SF"`
	ModTmpMax    int16       `sunspec:"offset=17,sf=ModTmp_SF"`
	ModTmpMaxMod uint16      `sunspec:"offset=18"`
	ModTmpMin    int16       `sunspec:"offset=19,sf=ModTmp_SF"`
	ModTmpMinMod uint16      `sunspec:"offset=20"`
	ModTmpAvg    int16       `sunspec:"offset=21,sf=ModTmp_SF"`
	Evt1         Bitfield32  `sunspec:"offset=22"`
	Evt2         Bitfield32  `sunspec:"offset=24"`
	EvtVnd1      Bitfield32  `sunspec:"offset=26"`
	EvtVnd2      Bitfield32  `sunspec:"offset=28"`
	SetEna       Enum16      `sunspec:"offset=29,access=rw"`
	SetCon       Enum16      `sunspec:"offset=30,access=rw"`
	SoC_SF       ScaleFactor `sunspec:"offset=31"`
	SoH_SF       ScaleFactor `sunspec:"offset=32"`
	DoD_SF       ScaleFactor `sunspec:"offset=33"`
	A_SF         ScaleFactor `sunspec:"offset=34"`
	V_SF         ScaleFactor `sunspec:"offset=35"`
	CellV_SF     ScaleFactor `sunspec:"offset=36"`
	ModTmp_SF    ScaleFactor `sunspec:"offset=37"`

	Repeats []Block804Repeat
}

func (self *Block804) GetId() ModelId {
	return 804
}

// Block805 - Lithium-Ion Module Model -

type Block805Repeat struct {
	CellV   uint16     `sunspec:"offset=0,sf=CellV_SF"`
	CellTmp int16      `sunspec:"offset=1,sf=Tmp_SF"`
	CellSt  Bitfield32 `sunspec:"offset=2"`
}

type Block805 struct {
	Idx            uint16      `sunspec:"offset=0"`
	NCell          uint16      `sunspec:"offset=1"`
	SoC            uint16      `sunspec:"offset=2,sf=SoC_SF"`
	DoD            uint16      `sunspec:"offset=3,sf=DoD_SF"`
	NCyc           uint32      `sunspec:"offset=4"`
	SoH            uint16      `sunspec:"offset=6,sf=SoH_SF"`
	V              uint16      `sunspec:"offset=7,sf=V_SF"`
	CellVMax       uint16      `sunspec:"offset=8,sf=CellV_SF"`
	CellVMaxCell   uint16      `sunspec:"offset=9"`
	CellVMin       uint16      `sunspec:"offset=10,sf=CellV_SF"`
	CellVMinCell   uint16      `sunspec:"offset=11"`
	CellVAvg       uint16      `sunspec:"offset=12,sf=CellV_SF"`
	CellTmpMax     int16       `sunspec:"offset=13,sf=Tmp_SF"`
	CellTmpMaxCell uint16      `sunspec:"offset=14"`
	CellTmpMin     int16       `sunspec:"offset=15,sf=Tmp_SF"`
	CellTmpMinCell uint16      `sunspec:"offset=16"`
	CellTmpAvg     int16       `sunspec:"offset=17,sf=Tmp_SF"`
	SN             String      `sunspec:"offset=18,len=16"`
	NCellBal       uint16      `sunspec:"offset=34"`
	SoC_SF         ScaleFactor `sunspec:"offset=35"`
	SoH_SF         ScaleFactor `sunspec:"offset=36"`
	DoD_SF         ScaleFactor `sunspec:"offset=37"`
	V_SF           ScaleFactor `sunspec:"offset=38"`
	CellV_SF       ScaleFactor `sunspec:"offset=39"`
	Tmp_SF         ScaleFactor `sunspec:"offset=40"`
	Pad1           Pad         `sunspec:"offset=41"`

	Repeats []Block805Repeat
}

func (self *Block805) GetId() ModelId {
	return 805
}

// Block806 - Flow Battery Model -

type Block806Repeat struct {
	BatStTBD uint16 `sunspec:"offset=0"`
}

type Block806 struct {
	BatTBD uint16 `sunspec:"offset=0"`

	Repeats []Block806Repeat
}

func (self *Block806) GetId() ModelId {
	return 806
}

// Block807 - Flow Battery String Model -

type Block807Repeat struct {
	ModIdx          uint16     `sunspec:"offset=0"`
	ModNStk         uint16     `sunspec:"offset=1"`
	ModSt           Bitfield32 `sunspec:"offset=2"`
	ModSoC          uint16     `sunspec:"offset=4,sf=SoC_SF"`
	ModOCV          uint16     `sunspec:"offset=5,sf=OCV_SF"`
	ModV            uint16     `sunspec:"offset=6,sf=ModV_SF"`
	ModCellVMax     uint16     `sunspec:"offset=7,sf=CellV_SF"`
	ModCellVMaxCell uint16     `sunspec:"offset=8"`
	ModCellVMin     uint16     `sunspec:"offset=9,sf=CellV_SF"`
	ModCellVMinCell uint16     `sunspec:"offset=10"`
	ModCellVAvg     uint16     `sunspec:"offset=11,sf=CellV_SF"`
	ModAnoTmp       uint16     `sunspec:"offset=12,sf=Tmp_SF"`
	ModCatTmp       uint16     `sunspec:"offset=13,sf=Tmp_SF"`
	ModConSt        Bitfield32 `sunspec:"offset=14"`
	ModEvt1         Bitfield32 `sunspec:"offset=16"`
	ModEvt2         Bitfield32 `sunspec:"offset=18"`
	ModConFail      Enum16     `sunspec:"offset=20"`
	ModSetEna       Enum16     `sunspec:"offset=21,access=rw"`
	ModSetCon       Enum16     `sunspec:"offset=22,access=rw"`
	Pad4            Pad        `sunspec:"offset=23"`
}

type Block807 struct {
	Idx         uint16      `sunspec:"offset=0"`
	NMod        uint16      `sunspec:"offset=1"`
	NModCon     uint16      `sunspec:"offset=2"`
	ModVMax     uint16      `sunspec:"offset=3,sf=ModV_SF"`
	ModVMaxMod  uint16      `sunspec:"offset=4"`
	ModVMin     uint16      `sunspec:"offset=5,sf=ModV_SF"`
	ModVMinMod  uint16      `sunspec:"offset=6"`
	ModVAvg     uint16      `sunspec:"offset=7,sf=ModV_SF"`
	CellVMax    uint16      `sunspec:"offset=8,sf=CellV_SF"`
	CellVMaxMod uint16      `sunspec:"offset=9"`
	CellVMaxStk uint16      `sunspec:"offset=10"`
	CellVMin    uint16      `sunspec:"offset=11,sf=CellV_SF"`
	CellVMinMod uint16      `sunspec:"offset=12"`
	CellVMinStk uint16      `sunspec:"offset=13"`
	CellVAvg    uint16      `sunspec:"offset=14,sf=CellV_SF"`
	TmpMax      int16       `sunspec:"offset=15,sf=Tmp_SF"`
	TmpMaxMod   uint16      `sunspec:"offset=16"`
	TmpMin      int16       `sunspec:"offset=17,sf=Tmp_SF"`
	TmpMinMod   uint16      `sunspec:"offset=18"`
	TmpAvg      int16       `sunspec:"offset=19,sf=Tmp_SF"`
	Evt1        Bitfield32  `sunspec:"offset=20"`
	Evt2        Bitfield32  `sunspec:"offset=22"`
	EvtVnd1     Bitfield32  `sunspec:"offset=24"`
	EvtVnd2     Bitfield32  `sunspec:"offset=26"`
	ModV_SF     ScaleFactor `sunspec:"offset=28"`
	CellV_SF    ScaleFactor `sunspec:"offset=29"`
	Tmp_SF      ScaleFactor `sunspec:"offset=30"`
	SoC_SF      ScaleFactor `sunspec:"offset=31"`
	OCV_SF      ScaleFactor `sunspec:"offset=32"`
	Pad1        Pad         `sunspec:"offset=33"`

	Repeats []Block807Repeat
}

func (self *Block807) GetId() ModelId {
	return 807
}

// Block808 - Flow Battery Module Model -

type Block808Repeat struct {
	StackTBD uint16 `sunspec:"offset=0"`
}

type Block808 struct {
	ModuleTBD uint16 `sunspec:"offset=0"`

	Repeats []Block808Repeat
}

func (self *Block808) GetId() ModelId {
	return 808
}

// Block809 - Flow Battery Stack Model -

type Block809Repeat struct {
	CellTBD uint16 `sunspec:"offset=0"`
}

type Block809 struct {
	StackTBD uint16 `sunspec:"offset=0"`

	Repeats []Block809Repeat
}

func (self *Block809) GetId() ModelId {
	return 809
}

// Block63001 - SunSpec Test Model 1 -

type Block63001Repeat struct {
	sunssf_8  ScaleFactor `sunspec:"offset=0"`
	int16_11  int16       `sunspec:"offset=1,sf=sunssf_8,access=rw"`
	int16_12  int16       `sunspec:"offset=2,sf=sunssf_9"`
	int16_u   int16       `sunspec:"offset=3"`
	uint16_11 uint16      `sunspec:"offset=4,sf=sunssf_8,access=rw"`
	uint16_12 uint16      `sunspec:"offset=5,sf=sunssf_9"`
	uint16_13 uint16      `sunspec:"offset=6"`
	uint16_u  uint16      `sunspec:"offset=7"`
	int32     int32       `sunspec:"offset=8,sf=sunssf_1,access=rw"`
	int32_u   int32       `sunspec:"offset=10"`
	uint32    uint32      `sunspec:"offset=12,sf=sunssf_9,access=rw"`
	uint32_u  uint32      `sunspec:"offset=14"`
	sunssf_9  ScaleFactor `sunspec:"offset=16"`
	pad_2     Pad         `sunspec:"offset=17"`
}

type Block63001 struct {
	sunssf_1     ScaleFactor `sunspec:"offset=0"`
	sunssf_2     ScaleFactor `sunspec:"offset=1"`
	sunssf_3     ScaleFactor `sunspec:"offset=2"`
	sunssf_4     ScaleFactor `sunspec:"offset=3"`
	int16_1      int16       `sunspec:"offset=4,sf=sunssf_1"`
	int16_2      int16       `sunspec:"offset=5,sf=sunssf_2"`
	int16_3      int16       `sunspec:"offset=6,sf=sunssf_3"`
	int16_4      int16       `sunspec:"offset=7,sf=sunssf_4,access=rw"`
	int16_5      int16       `sunspec:"offset=8"`
	int16_u      int16       `sunspec:"offset=9"`
	uint16_1     uint16      `sunspec:"offset=10,sf=sunssf_1"`
	uint16_2     uint16      `sunspec:"offset=11,sf=sunssf_2"`
	uint16_3     uint16      `sunspec:"offset=12,sf=sunssf_3"`
	uint16_4     uint16      `sunspec:"offset=13,sf=sunssf_4,access=rw"`
	uint16_5     uint16      `sunspec:"offset=14"`
	uint16_u     uint16      `sunspec:"offset=15"`
	acc16        Acc16       `sunspec:"offset=16"`
	acc16_u      Acc16       `sunspec:"offset=17"`
	enum16       Enum16      `sunspec:"offset=18"`
	enum16_u     Enum16      `sunspec:"offset=19"`
	bitfield16   Bitfield16  `sunspec:"offset=20"`
	bitfield16_u Bitfield16  `sunspec:"offset=21"`
	int32_1      int32       `sunspec:"offset=22,sf=sunssf_5"`
	int32_2      int32       `sunspec:"offset=24,sf=sunssf_6"`
	int32_3      int32       `sunspec:"offset=26,sf=sunssf_7,access=rw"`
	int32_4      int32       `sunspec:"offset=28"`
	int32_5      int32       `sunspec:"offset=30"`
	int32_u      int32       `sunspec:"offset=32"`
	uint32_1     uint32      `sunspec:"offset=34,sf=sunssf_5"`
	uint32_2     uint32      `sunspec:"offset=36,sf=sunssf_6"`
	uint32_3     uint32      `sunspec:"offset=38,sf=sunssf_7,access=rw"`
	uint32_4     uint32      `sunspec:"offset=40,sf=1"`
	uint32_5     uint32      `sunspec:"offset=42"`
	uint32_u     uint32      `sunspec:"offset=44"`
	acc32        Acc32       `sunspec:"offset=46"`
	acc32_u      Acc32       `sunspec:"offset=48"`
	enum32       Enum32      `sunspec:"offset=50"`
	enum32_u     Enum32      `sunspec:"offset=52"`
	bitfield32   Bitfield32  `sunspec:"offset=54"`
	bitfield32_u Bitfield32  `sunspec:"offset=56"`
	ipaddr       Ipaddr      `sunspec:"offset=58,access=rw"`
	ipaddr_u     Ipaddr      `sunspec:"offset=60"`
	int64        int64       `sunspec:"offset=62,access=rw"`
	int64_u      int64       `sunspec:"offset=66"`
	acc64        Acc64       `sunspec:"offset=70"`
	acc64_u      Acc64       `sunspec:"offset=74"`
	ipv6addr     Ipv6addr    `sunspec:"offset=78"`
	ipv6addr_u   Ipv6addr    `sunspec:"offset=86"`
	float32      float32     `sunspec:"offset=94,access=rw"`
	float32_u    float32     `sunspec:"offset=96"`
	string       String      `sunspec:"offset=98,len=16,access=rw"`
	string_u     String      `sunspec:"offset=114,len=16"`
	sunssf_5     ScaleFactor `sunspec:"offset=130"`
	sunssf_6     ScaleFactor `sunspec:"offset=131"`
	sunssf_7     ScaleFactor `sunspec:"offset=132"`
	pad_1        Pad         `sunspec:"offset=133"`

	Repeats []Block63001Repeat
}

func (self *Block63001) GetId() ModelId {
	return 63001
}

// Block63002 - SunSpec Test Model 2 -

type Block63002Repeat struct {
	sunssf_1 ScaleFactor `sunspec:"offset=0"`
	int16_1  int16       `sunspec:"offset=1,sf=sunssf_1,access=rw"`
	int16_2  int16       `sunspec:"offset=2,sf=sunssf_2"`
	sunssf_2 ScaleFactor `sunspec:"offset=3"`
}

type Block63002 struct {
	Repeats []Block63002Repeat
}

func (self *Block63002) GetId() ModelId {
	return 63002
}

// Block64001 - Veris Status and Configuration -

type Block64001 struct {
	Cmd      Enum16     `sunspec:"offset=0,access=rw"`
	HWRev    uint16     `sunspec:"offset=1"`
	RSFWRev  uint16     `sunspec:"offset=2"`
	OSFWRev  uint16     `sunspec:"offset=3"`
	ProdRev  String     `sunspec:"offset=4,len=2"`
	Boots    uint16     `sunspec:"offset=6"`
	Switch   Bitfield16 `sunspec:"offset=7"`
	Sensors  uint16     `sunspec:"offset=8"`
	Talking  uint16     `sunspec:"offset=9"`
	Status   Bitfield16 `sunspec:"offset=10"`
	Config   Bitfield16 `sunspec:"offset=11"`
	LEDblink uint16     `sunspec:"offset=12"`
	LEDon    uint16     `sunspec:"offset=13"`
	Reserved uint16     `sunspec:"offset=14"`
	Loc      String     `sunspec:"offset=15,len=16"`
	S1ID     Enum16     `sunspec:"offset=31"`
	S1Addr   uint16     `sunspec:"offset=32"`
	S1OSVer  uint16     `sunspec:"offset=33"`
	S1Ver    String     `sunspec:"offset=34,len=2"`
	S1Serial String     `sunspec:"offset=36,len=5"`
	S2ID     Enum16     `sunspec:"offset=41"`
	S2Addr   uint16     `sunspec:"offset=42"`
	S2OSVer  uint16     `sunspec:"offset=43"`
	S2Ver    String     `sunspec:"offset=44,len=2"`
	S2Serial String     `sunspec:"offset=46,len=5"`
	S3ID     Enum16     `sunspec:"offset=51"`
	S3Addr   uint16     `sunspec:"offset=52"`
	S3OSVer  uint16     `sunspec:"offset=53"`
	S3Ver    String     `sunspec:"offset=54,len=2"`
	S3Serial String     `sunspec:"offset=56,len=5"`
	S4ID     Enum16     `sunspec:"offset=61"`
	S4Addr   uint16     `sunspec:"offset=62"`
	S4OSVer  uint16     `sunspec:"offset=63"`
	S4Ver    String     `sunspec:"offset=64,len=2"`
	S4Serial String     `sunspec:"offset=66,len=5"`
}

func (self *Block64001) GetId() ModelId {
	return 64001
}

// Block64020 - Mersen GreenString -

type Block64020Repeat struct {
	SerialNumber String `sunspec:"offset=0,len=9"`
	Firmware     String `sunspec:"offset=9,len=6"`
	Hardware     uint16 `sunspec:"offset=15"`
}

type Block64020 struct {
	Aux0Tmp           int16       `sunspec:"offset=0"`
	Aux1Tmp           int16       `sunspec:"offset=1"`
	Aux2Tmp           int16       `sunspec:"offset=2"`
	Aux3Tmp           int16       `sunspec:"offset=3"`
	Aux4Tmp           int16       `sunspec:"offset=4"`
	ProbeTmp          int16       `sunspec:"offset=6"`
	MainTmp           int16       `sunspec:"offset=5"`
	SensorV_SF        ScaleFactor `sunspec:"offset=7"`
	SensorA_SF        ScaleFactor `sunspec:"offset=8"`
	SensorHz_SF       ScaleFactor `sunspec:"offset=9"`
	Sensor1Voltage    int16       `sunspec:"offset=10,sf=SensorV_SF"`
	Sensor2Voltage    int16       `sunspec:"offset=11,sf=SensorV_SF"`
	Sensor3Voltage    int16       `sunspec:"offset=12,sf=SensorV_SF"`
	Sensor4Voltage    int16       `sunspec:"offset=13,sf=SensorV_SF"`
	Sensor5Voltage    int16       `sunspec:"offset=14,sf=SensorV_SF"`
	Sensor6Voltage    int16       `sunspec:"offset=15,sf=SensorV_SF"`
	Sensor7Voltage    int16       `sunspec:"offset=16,sf=SensorV_SF"`
	Sensor1Current    int16       `sunspec:"offset=17,sf=SensorA_SF"`
	Sensor2Current    int16       `sunspec:"offset=18,sf=SensorA_SF"`
	Sensor3Current    int16       `sunspec:"offset=19,sf=SensorA_SF"`
	Sensor4Current    int16       `sunspec:"offset=20,sf=SensorA_SF"`
	Sensor5Current    int16       `sunspec:"offset=21,sf=SensorA_SF"`
	Sensor6Current    int16       `sunspec:"offset=22,sf=SensorA_SF"`
	Sensor7Current    int16       `sunspec:"offset=23,sf=SensorA_SF"`
	Sensor8           uint16      `sunspec:"offset=24,sf=SensorHz_SF"`
	Relay1            uint16      `sunspec:"offset=25"`
	Relay2            uint16      `sunspec:"offset=26"`
	Relay3            uint16      `sunspec:"offset=27"`
	ResetAccumulators uint16      `sunspec:"offset=28"`
	Reset             uint16      `sunspec:"offset=29"`

	Repeats []Block64020Repeat
}

func (self *Block64020) GetId() ModelId {
	return 64020
}

// Block64101 - Eltek Inverter Extension -

type Block64101 struct {
	Eltek_Country_Code   uint16 `sunspec:"offset=0"`
	Eltek_Feeding_Phase  uint16 `sunspec:"offset=1"`
	Eltek_APD_Method     uint16 `sunspec:"offset=2"`
	Eltek_APD_Power_Ref  uint16 `sunspec:"offset=3"`
	Eltek_RPS_Method     uint16 `sunspec:"offset=4"`
	Eltek_RPS_Q_Ref      uint16 `sunspec:"offset=5"`
	Eltek_RPS_CosPhi_Ref int16  `sunspec:"offset=6"`
}

func (self *Block64101) GetId() ModelId {
	return 64101
}

// Block64110 - OutBack AXS device -

type Block64110 struct {
	MajorFWRev        uint16      `sunspec:"offset=0"`
	MidFWRev          uint16      `sunspec:"offset=1"`
	MinorFWRev        uint16      `sunspec:"offset=2"`
	EncrypKey         uint16      `sunspec:"offset=3"`
	MAC_Address       String      `sunspec:"offset=4,len=7"`
	WritePassword     String      `sunspec:"offset=11,len=8"`
	EnableDHCP        Enum16      `sunspec:"offset=19"`
	TCPIP_address     Ipaddr      `sunspec:"offset=20"`
	Gateway_address   Ipaddr      `sunspec:"offset=22"`
	TCPIP_Netmask     Ipaddr      `sunspec:"offset=24"`
	DNS1_address      Ipaddr      `sunspec:"offset=26"`
	DNS2_address      Ipaddr      `sunspec:"offset=28"`
	Modbus_port       uint16      `sunspec:"offset=30"`
	SMTP_server_nm    String      `sunspec:"offset=31,len=20"`
	SMTP_account_nm   String      `sunspec:"offset=51,len=16"`
	SMTP_enable_SSL   Enum16      `sunspec:"offset=67"`
	SMTP_password     String      `sunspec:"offset=68,len=8"`
	SMTP_user_nm      String      `sunspec:"offset=76,len=20"`
	Stat_email_int    uint16      `sunspec:"offset=96"`
	Stat_start_HR     uint16      `sunspec:"offset=97"`
	Stat_email_sub    String      `sunspec:"offset=98,len=25"`
	Stat_email_addr1  String      `sunspec:"offset=123,len=20"`
	Stat_email_addr2  String      `sunspec:"offset=143,len=20"`
	Alarm_email_en    Enum16      `sunspec:"offset=163"`
	Alarm_email_sub   String      `sunspec:"offset=164,len=25"`
	Alarm_email_addr1 String      `sunspec:"offset=189,len=20"`
	Alarm_email_addr2 String      `sunspec:"offset=209,len=20"`
	FTP_password      String      `sunspec:"offset=229,len=8"`
	TELNET_password   String      `sunspec:"offset=237,len=8"`
	Log_write_int     uint16      `sunspec:"offset=245"`
	Log_retain        uint16      `sunspec:"offset=246"`
	Log_mode          Enum16      `sunspec:"offset=247"`
	NTP_server_nm     String      `sunspec:"offset=248,len=20"`
	NTP_enable        Enum16      `sunspec:"offset=268"`
	TimeZone          int16       `sunspec:"offset=269"`
	Date_year         uint16      `sunspec:"offset=270"`
	Date_month        uint16      `sunspec:"offset=271"`
	Date_Day          uint16      `sunspec:"offset=272"`
	Time_hour         uint16      `sunspec:"offset=273"`
	Time_minute       uint16      `sunspec:"offset=274"`
	Time_second       uint16      `sunspec:"offset=275"`
	Battery_temp      int16       `sunspec:"offset=276,sf=Temp_SF"`
	Ambient_temp      int16       `sunspec:"offset=277,sf=Temp_SF"`
	Temp_SF           ScaleFactor `sunspec:"offset=278"`
	AXS_Error         Bitfield16  `sunspec:"offset=279"`
	AXS_Status        Bitfield16  `sunspec:"offset=280"`
	AXS_Spare         uint16      `sunspec:"offset=281"`
}

func (self *Block64110) GetId() ModelId {
	return 64110
}

// Block64111 - Basic Charge Controller -

type Block64111 struct {
	Port            uint16      `sunspec:"offset=0"`
	V_SF            ScaleFactor `sunspec:"offset=1"`
	A_SF            ScaleFactor `sunspec:"offset=2"`
	P_SF            ScaleFactor `sunspec:"offset=3"`
	AH_SF           ScaleFactor `sunspec:"offset=4"`
	KWH_SF          ScaleFactor `sunspec:"offset=5"`
	BattV           uint16      `sunspec:"offset=6,sf=V_SF"`
	ArrayV          uint16      `sunspec:"offset=7,sf=V_SF"`
	OutputA         uint16      `sunspec:"offset=8,sf=A_SF"`
	InputA          uint16      `sunspec:"offset=9,sf=P_SF"`
	ChargerSt       Enum16      `sunspec:"offset=10"`
	OutputW         uint16      `sunspec:"offset=11,sf=P_SF"`
	TodayMinBatV    uint16      `sunspec:"offset=12,sf=V_SF"`
	TodayMaxBatV    uint16      `sunspec:"offset=13,sf=V_SF"`
	VOCV            uint16      `sunspec:"offset=14,sf=V_SF"`
	TodayMaxVOC     uint16      `sunspec:"offset=15,sf=V_SF"`
	TodaykWhOutput  uint16      `sunspec:"offset=16,sf=KWH_SF"`
	TodayAHOutput   uint16      `sunspec:"offset=17,sf=AH_SF"`
	LifeTimeKWHOut  uint16      `sunspec:"offset=18,sf=P_SF"`
	LifeTimeAHOut   uint16      `sunspec:"offset=19,sf=KWH_SF"`
	LifeTimeMaxOut  uint16      `sunspec:"offset=20,sf=P_SF"`
	LifeTimeMaxBatt uint16      `sunspec:"offset=21,sf=V_SF"`
	LifeTimeMaxVOC  uint16      `sunspec:"offset=22,sf=V_SF"`
}

func (self *Block64111) GetId() ModelId {
	return 64111
}

// Block64112 - OutBack FM Charge Controller -

type Block64112 struct {
	Port                          uint16      `sunspec:"offset=0"`
	V_SF                          ScaleFactor `sunspec:"offset=1"`
	C_SF                          ScaleFactor `sunspec:"offset=2"`
	H_SF                          ScaleFactor `sunspec:"offset=3"`
	P_SF                          ScaleFactor `sunspec:"offset=4"`
	AH_SF                         ScaleFactor `sunspec:"offset=5"`
	KWH_SF                        ScaleFactor `sunspec:"offset=6"`
	CC_Config_fault               Bitfield16  `sunspec:"offset=7"`
	CC_Config_absorb_V            uint16      `sunspec:"offset=8,sf=V_SF"`
	CC_Config_absorb_Hr           uint16      `sunspec:"offset=9,sf=H_SF"`
	CC_Config_absorb_End_A        uint16      `sunspec:"offset=10,sf=V_SF"`
	CC_Config_rebulk_V            uint16      `sunspec:"offset=11,sf=V_SF"`
	CC_Config_float_V             uint16      `sunspec:"offset=12,sf=V_SF"`
	CC_Config_max_Chg_A           uint16      `sunspec:"offset=13,sf=V_SF"`
	CC_Config_equalize_V          uint16      `sunspec:"offset=14,sf=V_SF"`
	CC_Config_equalize_Hr         uint16      `sunspec:"offset=15"`
	CC_Config_auto_equalize       uint16      `sunspec:"offset=16"`
	CC_Config_MPPT_mode           Enum16      `sunspec:"offset=17"`
	CC_Config_sweep_width         Enum16      `sunspec:"offset=18"`
	CC_Config_sweep_max           Enum16      `sunspec:"offset=19"`
	CC_Config_U_Pick_Duty_cyc     uint16      `sunspec:"offset=20,sf=V_SF"`
	CC_Config_grid_tie            Enum16      `sunspec:"offset=21"`
	CC_Config_temp_comp           Enum16      `sunspec:"offset=22"`
	CC_Config_temp_comp_llimt     uint16      `sunspec:"offset=23,sf=V_SF"`
	CC_Config_temp_comp_hlimt     uint16      `sunspec:"offset=24,sf=V_SF"`
	CC_Config_auto_restart        Enum16      `sunspec:"offset=25"`
	CC_Config_wakeup_VOC          uint16      `sunspec:"offset=26,sf=V_SF"`
	CC_Config_snooze_mode_A       uint16      `sunspec:"offset=27,sf=V_SF"`
	CC_Config_wakeup_interval     uint16      `sunspec:"offset=28"`
	CC_Config_AUX_mode            Enum16      `sunspec:"offset=29"`
	CC_Config_AUX_control         Enum16      `sunspec:"offset=30"`
	CC_Config_AUX_state           Enum16      `sunspec:"offset=31"`
	CC_Config_AUX_polarity        Enum16      `sunspec:"offset=32"`
	CC_Config_AUX_L_Batt_disc     uint16      `sunspec:"offset=33,sf=V_SF"`
	CC_Config_AUX_L_Batt_rcon     uint16      `sunspec:"offset=34,sf=V_SF"`
	CC_Config_AUX_L_Batt_dly      uint16      `sunspec:"offset=35"`
	CC_Config_AUX_Vent_fan_V      uint16      `sunspec:"offset=36,sf=V_SF"`
	CC_Config_AUX_PV_triggerV     uint16      `sunspec:"offset=37,sf=V_SF"`
	CC_Config_AUX_PV_trg_h_tm     uint16      `sunspec:"offset=38"`
	CC_Config_AUX_Nlite_ThrsV     uint16      `sunspec:"offset=39,sf=V_SF"`
	CC_Config_AUX_Nlite_On_tm     uint16      `sunspec:"offset=40,sf=H_SF"`
	CC_Config_AUX_Nlite_On_hist   uint16      `sunspec:"offset=41"`
	CC_Config_AUX_Nlite_Off_hist  uint16      `sunspec:"offset=42"`
	CC_Config_AUX_Error_batt_V    uint16      `sunspec:"offset=43,sf=V_SF"`
	CC_Config_AUX_Divert_h_time   uint16      `sunspec:"offset=44,sf=V_SF"`
	CC_Config_AUX_Divert_dly_time uint16      `sunspec:"offset=45"`
	CC_Config_AUX_Divert_Rel_V    uint16      `sunspec:"offset=46,sf=V_SF"`
	CC_Config_AUX_Divert_Hyst_V   uint16      `sunspec:"offset=47,sf=V_SF"`
	CC_Config_MajorFWRev          uint16      `sunspec:"offset=48"`
	CC_Config_MidFWRev            uint16      `sunspec:"offset=49"`
	CC_Config_MinorFWRev          uint16      `sunspec:"offset=50"`
	CC_Config_DataLog_Day_offset  uint16      `sunspec:"offset=51"`
	CC_Config_DataLog_Cur_Day_off uint16      `sunspec:"offset=52"`
	CC_Config_DataLog_Daily_AH    uint16      `sunspec:"offset=53"`
	CC_Config_DataLog_Daily_KWH   uint16      `sunspec:"offset=54,sf=KWH_SF"`
	CC_Config_DataLog_Max_Out_A   uint16      `sunspec:"offset=55,sf=V_SF"`
	CC_Config_DataLog_Max_Out_W   uint16      `sunspec:"offset=56,sf=V_SF"`
	CC_Config_DataLog_Absorb_T    uint16      `sunspec:"offset=57"`
	CC_Config_DataLog_Float_T     uint16      `sunspec:"offset=58"`
	CC_Config_DataLog_Min_Batt_V  uint16      `sunspec:"offset=59,sf=V_SF"`
	CC_Config_DataLog_Max_Batt_V  uint16      `sunspec:"offset=60,sf=V_SF"`
	CC_Config_DataLog_Max_Input_V uint16      `sunspec:"offset=61,sf=V_SF"`
	CC_Config_DataLog_Clear       uint16      `sunspec:"offset=62"`
	CC_Config_DataLog_Clr_Comp    uint16      `sunspec:"offset=63"`
}

func (self *Block64112) GetId() ModelId {
	return 64112
}
