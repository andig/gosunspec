// NOTICE
// This file was automatically generated by ../generators/core.go. Do not edit it!
// You can regenerate it by running 'go generate ./core' from the directory above.

package core

import (
	"github.com/crabmusket/gosunspec/smdx"
)

// Block1 - Common - All SunSpec compliant devices must include this as the first model

type Block1 struct {
	Mn  String `sunspec:"offset=0,len=16"`
	Md  String `sunspec:"offset=16,len=16"`
	Opt String `sunspec:"offset=32,len=8"`
	Vr  String `sunspec:"offset=40,len=8"`
	SN  String `sunspec:"offset=48,len=16"`
	DA  uint16 `sunspec:"offset=64,access=rw"`
	Pad Pad    `sunspec:"offset=65,access=r"`
}

func (self *Block1) GetId() ModelId {
	return 1
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     1,
		Name:   "common",
		Length: 66,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 66,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Mn", Offset: 0, Type: "string", Length: 16, Mandatory: true},
					smdx.PointElement{Id: "Md", Offset: 16, Type: "string", Length: 16, Mandatory: true},
					smdx.PointElement{Id: "Opt", Offset: 32, Type: "string", Length: 8},
					smdx.PointElement{Id: "Vr", Offset: 40, Type: "string", Length: 8},
					smdx.PointElement{Id: "SN", Offset: 48, Type: "string", Length: 16, Mandatory: true},
					smdx.PointElement{Id: "DA", Offset: 64, Type: "uint16", Access: "rw"},
					smdx.PointElement{Id: "Pad", Offset: 65, Type: "pad", Access: "r"},
				},
			},
		}})
}

// Block2 - Basic Aggregator - Aggregates a collection of models for a given model id

type Block2 struct {
	AID    uint16     `sunspec:"offset=0"`
	N      uint16     `sunspec:"offset=1"`
	UN     uint16     `sunspec:"offset=2"`
	St     Enum16     `sunspec:"offset=3"`
	StVnd  Enum16     `sunspec:"offset=4"`
	Evt    Bitfield32 `sunspec:"offset=5"`
	EvtVnd Bitfield32 `sunspec:"offset=7"`
	Ctl    Enum16     `sunspec:"offset=9"`
	CtlVnd Enum32     `sunspec:"offset=10"`
	CtlVl  Enum32     `sunspec:"offset=12"`
}

func (self *Block2) GetId() ModelId {
	return 2
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     2,
		Name:   "aggregator",
		Length: 14,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 14,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "AID", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 1, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "UN", Offset: 2, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "St", Offset: 3, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StVnd", Offset: 4, Type: "enum16"},
					smdx.PointElement{Id: "Evt", Offset: 5, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd", Offset: 7, Type: "bitfield32"},
					smdx.PointElement{Id: "Ctl", Offset: 9, Type: "enum16"},
					smdx.PointElement{Id: "CtlVnd", Offset: 10, Type: "enum32"},
					smdx.PointElement{Id: "CtlVl", Offset: 12, Type: "enum32"},
				},
			},
		}})
}

// Block3 - Secure Dataset Read Request - Request a digial signature over a specifed set of data registers

type Block3Repeat struct {
	DS uint16 `sunspec:"offset=0,access=r"`
}

type Block3 struct {
	X     uint16 `sunspec:"offset=0,access=rw"`
	Off1  uint16 `sunspec:"offset=1,access=rw"`
	Off2  uint16 `sunspec:"offset=2,access=rw"`
	Off3  uint16 `sunspec:"offset=3,access=rw"`
	Off4  uint16 `sunspec:"offset=4,access=rw"`
	Off5  uint16 `sunspec:"offset=5,access=rw"`
	Off6  uint16 `sunspec:"offset=6,access=rw"`
	Off7  uint16 `sunspec:"offset=7,access=rw"`
	Off8  uint16 `sunspec:"offset=8,access=rw"`
	Off9  uint16 `sunspec:"offset=9,access=rw"`
	Off10 uint16 `sunspec:"offset=10,access=rw"`
	Off11 uint16 `sunspec:"offset=11,access=rw"`
	Off12 uint16 `sunspec:"offset=12,access=rw"`
	Off13 uint16 `sunspec:"offset=13,access=rw"`
	Off14 uint16 `sunspec:"offset=14,access=rw"`
	Off15 uint16 `sunspec:"offset=15,access=rw"`
	Off16 uint16 `sunspec:"offset=16,access=rw"`
	Off17 uint16 `sunspec:"offset=17,access=rw"`
	Off18 uint16 `sunspec:"offset=18,access=rw"`
	Off19 uint16 `sunspec:"offset=19,access=rw"`
	Off20 uint16 `sunspec:"offset=20,access=rw"`
	Off21 uint16 `sunspec:"offset=21,access=rw"`
	Off22 uint16 `sunspec:"offset=22,access=rw"`
	Off23 uint16 `sunspec:"offset=23,access=rw"`
	Off24 uint16 `sunspec:"offset=24,access=rw"`
	Off25 uint16 `sunspec:"offset=25,access=rw"`
	Off26 uint16 `sunspec:"offset=26,access=rw"`
	Off27 uint16 `sunspec:"offset=27,access=rw"`
	Off28 uint16 `sunspec:"offset=28,access=rw"`
	Off29 uint16 `sunspec:"offset=29,access=rw"`
	Off30 uint16 `sunspec:"offset=30,access=rw"`
	Off31 uint16 `sunspec:"offset=31,access=rw"`
	Off32 uint16 `sunspec:"offset=32,access=rw"`
	Off33 uint16 `sunspec:"offset=33,access=rw"`
	Off34 uint16 `sunspec:"offset=34,access=rw"`
	Off35 uint16 `sunspec:"offset=35,access=rw"`
	Off36 uint16 `sunspec:"offset=36,access=rw"`
	Off37 uint16 `sunspec:"offset=37,access=rw"`
	Off38 uint16 `sunspec:"offset=38,access=rw"`
	Off39 uint16 `sunspec:"offset=39,access=rw"`
	Off40 uint16 `sunspec:"offset=40,access=rw"`
	Off41 uint16 `sunspec:"offset=41,access=rw"`
	Off42 uint16 `sunspec:"offset=42,access=rw"`
	Off43 uint16 `sunspec:"offset=43,access=rw"`
	Off44 uint16 `sunspec:"offset=44,access=rw"`
	Off45 uint16 `sunspec:"offset=45,access=rw"`
	Off46 uint16 `sunspec:"offset=46,access=rw"`
	Off47 uint16 `sunspec:"offset=47,access=rw"`
	Off48 uint16 `sunspec:"offset=48,access=rw"`
	Off49 uint16 `sunspec:"offset=49,access=rw"`
	Off50 uint16 `sunspec:"offset=50,access=rw"`
	Ts    uint32 `sunspec:"offset=51,access=rw"`
	Ms    uint16 `sunspec:"offset=53,access=rw"`
	Seq   uint16 `sunspec:"offset=54,access=rw"`
	Role  uint16 `sunspec:"offset=55,access=rw"`
	Alg   Enum16 `sunspec:"offset=56,access=r"`
	N     uint16 `sunspec:"offset=57,access=r"`

	Repeats []Block3Repeat
}

func (self *Block3) GetId() ModelId {
	return 3
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     3,
		Name:   "",
		Length: 59,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 58,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "X", Offset: 0, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off1", Offset: 1, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off2", Offset: 2, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off3", Offset: 3, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off4", Offset: 4, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off5", Offset: 5, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off6", Offset: 6, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off7", Offset: 7, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off8", Offset: 8, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off9", Offset: 9, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off10", Offset: 10, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off11", Offset: 11, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off12", Offset: 12, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off13", Offset: 13, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off14", Offset: 14, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off15", Offset: 15, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off16", Offset: 16, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off17", Offset: 17, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off18", Offset: 18, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off19", Offset: 19, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off20", Offset: 20, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off21", Offset: 21, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off22", Offset: 22, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off23", Offset: 23, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off24", Offset: 24, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off25", Offset: 25, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off26", Offset: 26, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off27", Offset: 27, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off28", Offset: 28, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off29", Offset: 29, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off30", Offset: 30, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off31", Offset: 31, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off32", Offset: 32, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off33", Offset: 33, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off34", Offset: 34, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off35", Offset: 35, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off36", Offset: 36, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off37", Offset: 37, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off38", Offset: 38, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off39", Offset: 39, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off40", Offset: 40, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off41", Offset: 41, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off42", Offset: 42, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off43", Offset: 43, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off44", Offset: 44, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off45", Offset: 45, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off46", Offset: 46, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off47", Offset: 47, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off48", Offset: 48, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off49", Offset: 49, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off50", Offset: 50, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ts", Offset: 51, Type: "uint32", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ms", Offset: 53, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Seq", Offset: 54, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Role", Offset: 55, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Alg", Offset: 56, Type: "enum16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 57, Type: "uint16", Access: "r", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DS", Offset: 0, Type: "uint16", Access: "r", Mandatory: true},
				},
			},
		}})
}

// Block4 - Secure Dataset Read Response - Compute a digial signature over a specifed set of data registers

type Block4Repeat struct {
	DS uint16 `sunspec:"offset=0,access=r"`
}

type Block4 struct {
	RqSeq uint16 `sunspec:"offset=0,access=r"`
	Sts   uint16 `sunspec:"offset=1,access=r"`
	X     uint16 `sunspec:"offset=2,access=r"`
	Val1  uint16 `sunspec:"offset=3,access=r"`
	Val2  uint16 `sunspec:"offset=4,access=r"`
	Val3  uint16 `sunspec:"offset=5,access=r"`
	Val4  uint16 `sunspec:"offset=6,access=r"`
	Val5  uint16 `sunspec:"offset=7,access=r"`
	Val6  uint16 `sunspec:"offset=8,access=r"`
	Val7  uint16 `sunspec:"offset=9,access=r"`
	Val8  uint16 `sunspec:"offset=10,access=r"`
	Val9  uint16 `sunspec:"offset=11,access=r"`
	Val10 uint16 `sunspec:"offset=12,access=r"`
	Val11 uint16 `sunspec:"offset=13,access=r"`
	Val12 uint16 `sunspec:"offset=14,access=r"`
	Val13 uint16 `sunspec:"offset=15,access=r"`
	Val14 uint16 `sunspec:"offset=16,access=r"`
	Val15 uint16 `sunspec:"offset=17,access=r"`
	Val16 uint16 `sunspec:"offset=18,access=r"`
	Val17 uint16 `sunspec:"offset=19,access=r"`
	Val18 uint16 `sunspec:"offset=20,access=r"`
	Val19 uint16 `sunspec:"offset=21,access=r"`
	Val20 uint16 `sunspec:"offset=22,access=r"`
	Val21 uint16 `sunspec:"offset=23,access=r"`
	Val22 uint16 `sunspec:"offset=24,access=r"`
	Val23 uint16 `sunspec:"offset=25,access=r"`
	Val24 uint16 `sunspec:"offset=26,access=r"`
	Val25 uint16 `sunspec:"offset=27,access=r"`
	Val26 uint16 `sunspec:"offset=28,access=r"`
	Val27 uint16 `sunspec:"offset=29,access=r"`
	Val28 uint16 `sunspec:"offset=30,access=r"`
	Val29 uint16 `sunspec:"offset=31,access=r"`
	Val30 uint16 `sunspec:"offset=32,access=r"`
	Val31 uint16 `sunspec:"offset=33,access=r"`
	Val32 uint16 `sunspec:"offset=34,access=r"`
	Val33 uint16 `sunspec:"offset=35,access=r"`
	Val34 uint16 `sunspec:"offset=36,access=r"`
	Val35 uint16 `sunspec:"offset=37,access=r"`
	Val36 uint16 `sunspec:"offset=38,access=r"`
	Val37 uint16 `sunspec:"offset=39,access=r"`
	Val38 uint16 `sunspec:"offset=40,access=r"`
	Val39 uint16 `sunspec:"offset=41,access=r"`
	Val40 uint16 `sunspec:"offset=42,access=r"`
	Val41 uint16 `sunspec:"offset=43,access=r"`
	Val42 uint16 `sunspec:"offset=44,access=r"`
	Val43 uint16 `sunspec:"offset=45,access=r"`
	Val44 uint16 `sunspec:"offset=46,access=r"`
	Val45 uint16 `sunspec:"offset=47,access=r"`
	Val46 uint16 `sunspec:"offset=48,access=r"`
	Val47 uint16 `sunspec:"offset=49,access=r"`
	Val48 uint16 `sunspec:"offset=50,access=r"`
	Val49 uint16 `sunspec:"offset=51,access=r"`
	Val50 uint16 `sunspec:"offset=52,access=r"`
	Ts    uint32 `sunspec:"offset=53,access=r"`
	Ms    uint16 `sunspec:"offset=55,access=r"`
	Seq   uint16 `sunspec:"offset=56,access=r"`
	Alm   Enum16 `sunspec:"offset=57"`
	Alg   Enum16 `sunspec:"offset=58,access=r"`
	N     uint16 `sunspec:"offset=59,access=r"`

	Repeats []Block4Repeat
}

func (self *Block4) GetId() ModelId {
	return 4
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     4,
		Name:   "",
		Length: 61,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 60,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "RqSeq", Offset: 0, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Sts", Offset: 1, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "X", Offset: 2, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val1", Offset: 3, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val2", Offset: 4, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val3", Offset: 5, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val4", Offset: 6, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val5", Offset: 7, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val6", Offset: 8, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val7", Offset: 9, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val8", Offset: 10, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val9", Offset: 11, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val10", Offset: 12, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val11", Offset: 13, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val12", Offset: 14, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val13", Offset: 15, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val14", Offset: 16, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val15", Offset: 17, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val16", Offset: 18, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val17", Offset: 19, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val18", Offset: 20, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val19", Offset: 21, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val20", Offset: 22, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val21", Offset: 23, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val22", Offset: 24, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val23", Offset: 25, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val24", Offset: 26, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val25", Offset: 27, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val26", Offset: 28, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val27", Offset: 29, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val28", Offset: 30, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val29", Offset: 31, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val30", Offset: 32, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val31", Offset: 33, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val32", Offset: 34, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val33", Offset: 35, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val34", Offset: 36, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val35", Offset: 37, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val36", Offset: 38, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val37", Offset: 39, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val38", Offset: 40, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val39", Offset: 41, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val40", Offset: 42, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val41", Offset: 43, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val42", Offset: 44, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val43", Offset: 45, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val44", Offset: 46, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val45", Offset: 47, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val46", Offset: 48, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val47", Offset: 49, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val48", Offset: 50, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val49", Offset: 51, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Val50", Offset: 52, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Ts", Offset: 53, Type: "uint32", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Ms", Offset: 55, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Seq", Offset: 56, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Alm", Offset: 57, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "Alg", Offset: 58, Type: "enum16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 59, Type: "uint16", Access: "r", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DS", Offset: 0, Type: "uint16", Access: "r", Mandatory: true},
				},
			},
		}})
}

// Block5 - Secure Write Request - Include a digial signature along with the control data

type Block5Repeat struct {
	DS uint16 `sunspec:"offset=0,access=rw"`
}

type Block5 struct {
	X     uint16 `sunspec:"offset=0,access=rw"`
	Off1  uint16 `sunspec:"offset=1,access=rw"`
	Val1  uint16 `sunspec:"offset=2,access=rw"`
	Off2  uint16 `sunspec:"offset=3,access=rw"`
	Val2  uint16 `sunspec:"offset=4,access=rw"`
	Off3  uint16 `sunspec:"offset=5,access=rw"`
	Val3  uint16 `sunspec:"offset=6,access=rw"`
	Off4  uint16 `sunspec:"offset=7,access=rw"`
	Val4  uint16 `sunspec:"offset=8,access=rw"`
	Off5  uint16 `sunspec:"offset=9,access=rw"`
	Val5  uint16 `sunspec:"offset=10,access=rw"`
	Off6  uint16 `sunspec:"offset=11,access=rw"`
	Val6  uint16 `sunspec:"offset=12,access=rw"`
	Off7  uint16 `sunspec:"offset=13,access=rw"`
	Val7  uint16 `sunspec:"offset=14,access=rw"`
	Off8  uint16 `sunspec:"offset=15,access=rw"`
	Val8  uint16 `sunspec:"offset=16,access=rw"`
	Off9  uint16 `sunspec:"offset=17,access=rw"`
	Val9  uint16 `sunspec:"offset=18,access=rw"`
	Off10 uint16 `sunspec:"offset=19,access=rw"`
	Val10 uint16 `sunspec:"offset=20,access=rw"`
	Off11 uint16 `sunspec:"offset=21,access=rw"`
	Val11 uint16 `sunspec:"offset=22,access=rw"`
	Off12 uint16 `sunspec:"offset=23,access=rw"`
	Val12 uint16 `sunspec:"offset=24,access=rw"`
	Off13 uint16 `sunspec:"offset=25,access=rw"`
	Val13 uint16 `sunspec:"offset=26,access=rw"`
	Off14 uint16 `sunspec:"offset=27,access=rw"`
	Val14 uint16 `sunspec:"offset=28,access=rw"`
	Off15 uint16 `sunspec:"offset=29,access=rw"`
	Val15 uint16 `sunspec:"offset=30,access=rw"`
	Off16 uint16 `sunspec:"offset=31,access=rw"`
	Val16 uint16 `sunspec:"offset=32,access=rw"`
	Off17 uint16 `sunspec:"offset=33,access=rw"`
	Val17 uint16 `sunspec:"offset=34,access=rw"`
	Off18 uint16 `sunspec:"offset=35,access=rw"`
	Val18 uint16 `sunspec:"offset=36,access=rw"`
	Off19 uint16 `sunspec:"offset=37,access=rw"`
	Val19 uint16 `sunspec:"offset=38,access=rw"`
	Off20 uint16 `sunspec:"offset=39,access=rw"`
	Val20 uint16 `sunspec:"offset=40,access=rw"`
	Off21 uint16 `sunspec:"offset=41,access=rw"`
	Val21 uint16 `sunspec:"offset=42,access=rw"`
	Off22 uint16 `sunspec:"offset=43,access=rw"`
	Val22 uint16 `sunspec:"offset=44,access=rw"`
	Off23 uint16 `sunspec:"offset=45,access=rw"`
	Val23 uint16 `sunspec:"offset=46,access=rw"`
	Off24 uint16 `sunspec:"offset=47,access=rw"`
	Val24 uint16 `sunspec:"offset=48,access=rw"`
	Off25 uint16 `sunspec:"offset=49,access=rw"`
	Val25 uint16 `sunspec:"offset=50,access=rw"`
	Off26 uint16 `sunspec:"offset=51,access=rw"`
	Val26 uint16 `sunspec:"offset=52,access=rw"`
	Off27 uint16 `sunspec:"offset=53,access=rw"`
	Val27 uint16 `sunspec:"offset=54,access=rw"`
	Off28 uint16 `sunspec:"offset=55,access=rw"`
	Val28 uint16 `sunspec:"offset=56,access=rw"`
	Off29 uint16 `sunspec:"offset=57,access=rw"`
	Val29 uint16 `sunspec:"offset=58,access=rw"`
	Off30 uint16 `sunspec:"offset=59,access=rw"`
	Val30 uint16 `sunspec:"offset=60,access=rw"`
	Off31 uint16 `sunspec:"offset=61,access=rw"`
	Val31 uint16 `sunspec:"offset=62,access=rw"`
	Off32 uint16 `sunspec:"offset=63,access=rw"`
	Val32 uint16 `sunspec:"offset=64,access=rw"`
	Off33 uint16 `sunspec:"offset=65,access=rw"`
	Val33 uint16 `sunspec:"offset=66,access=rw"`
	Off34 uint16 `sunspec:"offset=67,access=rw"`
	Val34 uint16 `sunspec:"offset=68,access=rw"`
	Off35 uint16 `sunspec:"offset=69,access=rw"`
	Val35 uint16 `sunspec:"offset=70,access=rw"`
	Off36 uint16 `sunspec:"offset=71,access=rw"`
	Val36 uint16 `sunspec:"offset=72,access=rw"`
	Off37 uint16 `sunspec:"offset=73,access=rw"`
	Val37 uint16 `sunspec:"offset=74,access=rw"`
	Off38 uint16 `sunspec:"offset=75,access=rw"`
	Val38 uint16 `sunspec:"offset=76,access=rw"`
	Off39 uint16 `sunspec:"offset=77,access=rw"`
	Val39 uint16 `sunspec:"offset=78,access=rw"`
	Off40 uint16 `sunspec:"offset=79,access=rw"`
	Val40 uint16 `sunspec:"offset=80,access=rw"`
	Ts    uint32 `sunspec:"offset=81,access=rw"`
	Ms    uint16 `sunspec:"offset=83,access=rw"`
	Seq   uint16 `sunspec:"offset=84,access=rw"`
	Role  uint16 `sunspec:"offset=85,access=rw"`
	Alg   Enum16 `sunspec:"offset=86,access=rw"`
	N     uint16 `sunspec:"offset=87,access=rw"`

	Repeats []Block5Repeat
}

func (self *Block5) GetId() ModelId {
	return 5
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     5,
		Name:   "",
		Length: 89,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 88,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "X", Offset: 0, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off1", Offset: 1, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val1", Offset: 2, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off2", Offset: 3, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val2", Offset: 4, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off3", Offset: 5, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val3", Offset: 6, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off4", Offset: 7, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val4", Offset: 8, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off5", Offset: 9, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val5", Offset: 10, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off6", Offset: 11, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val6", Offset: 12, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off7", Offset: 13, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val7", Offset: 14, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off8", Offset: 15, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val8", Offset: 16, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off9", Offset: 17, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val9", Offset: 18, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off10", Offset: 19, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val10", Offset: 20, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off11", Offset: 21, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val11", Offset: 22, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off12", Offset: 23, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val12", Offset: 24, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off13", Offset: 25, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val13", Offset: 26, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off14", Offset: 27, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val14", Offset: 28, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off15", Offset: 29, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val15", Offset: 30, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off16", Offset: 31, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val16", Offset: 32, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off17", Offset: 33, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val17", Offset: 34, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off18", Offset: 35, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val18", Offset: 36, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off19", Offset: 37, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val19", Offset: 38, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off20", Offset: 39, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val20", Offset: 40, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off21", Offset: 41, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val21", Offset: 42, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off22", Offset: 43, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val22", Offset: 44, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off23", Offset: 45, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val23", Offset: 46, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off24", Offset: 47, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val24", Offset: 48, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off25", Offset: 49, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val25", Offset: 50, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off26", Offset: 51, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val26", Offset: 52, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off27", Offset: 53, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val27", Offset: 54, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off28", Offset: 55, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val28", Offset: 56, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off29", Offset: 57, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val29", Offset: 58, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off30", Offset: 59, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val30", Offset: 60, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off31", Offset: 61, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val31", Offset: 62, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off32", Offset: 63, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val32", Offset: 64, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off33", Offset: 65, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val33", Offset: 66, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off34", Offset: 67, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val34", Offset: 68, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off35", Offset: 69, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val35", Offset: 70, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off36", Offset: 71, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val36", Offset: 72, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off37", Offset: 73, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val37", Offset: 74, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off38", Offset: 75, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val38", Offset: 76, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off39", Offset: 77, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val39", Offset: 78, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off40", Offset: 79, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val40", Offset: 80, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ts", Offset: 81, Type: "uint32", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ms", Offset: 83, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Seq", Offset: 84, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Role", Offset: 85, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Alg", Offset: 86, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 87, Type: "uint16", Access: "rw", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DS", Offset: 0, Type: "uint16", Access: "rw"},
				},
			},
		}})
}

// Block6 - Secure Write Sequential Request - Include a digial signature along with the control data

type Block6Repeat struct {
	DS uint16 `sunspec:"offset=0,access=rw"`
}

type Block6 struct {
	X     uint16 `sunspec:"offset=0,access=rw"`
	Off   uint16 `sunspec:"offset=1,access=rw"`
	Val1  uint16 `sunspec:"offset=2,access=rw"`
	Val2  uint16 `sunspec:"offset=3,access=rw"`
	Val3  uint16 `sunspec:"offset=4,access=rw"`
	Val4  uint16 `sunspec:"offset=5,access=rw"`
	Val5  uint16 `sunspec:"offset=6,access=rw"`
	Val6  uint16 `sunspec:"offset=7,access=rw"`
	Val7  uint16 `sunspec:"offset=8,access=rw"`
	Val8  uint16 `sunspec:"offset=9,access=rw"`
	Val9  uint16 `sunspec:"offset=10,access=rw"`
	Val10 uint16 `sunspec:"offset=11,access=rw"`
	Val11 uint16 `sunspec:"offset=12,access=rw"`
	Val12 uint16 `sunspec:"offset=13,access=rw"`
	Val13 uint16 `sunspec:"offset=14,access=rw"`
	Val14 uint16 `sunspec:"offset=15,access=rw"`
	Val15 uint16 `sunspec:"offset=16,access=rw"`
	Val16 uint16 `sunspec:"offset=17,access=rw"`
	Val17 uint16 `sunspec:"offset=18,access=rw"`
	Val18 uint16 `sunspec:"offset=19,access=rw"`
	Val19 uint16 `sunspec:"offset=20,access=rw"`
	Val20 uint16 `sunspec:"offset=21,access=rw"`
	Val21 uint16 `sunspec:"offset=22,access=rw"`
	Val22 uint16 `sunspec:"offset=23,access=rw"`
	Val23 uint16 `sunspec:"offset=24,access=rw"`
	Val24 uint16 `sunspec:"offset=25,access=rw"`
	Val25 uint16 `sunspec:"offset=26,access=rw"`
	Val26 uint16 `sunspec:"offset=27,access=rw"`
	Val27 uint16 `sunspec:"offset=28,access=rw"`
	Val28 uint16 `sunspec:"offset=29,access=rw"`
	Val29 uint16 `sunspec:"offset=30,access=rw"`
	Val30 uint16 `sunspec:"offset=31,access=rw"`
	Val31 uint16 `sunspec:"offset=32,access=rw"`
	Val32 uint16 `sunspec:"offset=33,access=rw"`
	Val33 uint16 `sunspec:"offset=34,access=rw"`
	Val34 uint16 `sunspec:"offset=35,access=rw"`
	Val35 uint16 `sunspec:"offset=36,access=rw"`
	Val36 uint16 `sunspec:"offset=37,access=rw"`
	Val37 uint16 `sunspec:"offset=38,access=rw"`
	Val38 uint16 `sunspec:"offset=39,access=rw"`
	Val39 uint16 `sunspec:"offset=40,access=rw"`
	Val40 uint16 `sunspec:"offset=41,access=rw"`
	Val41 uint16 `sunspec:"offset=42,access=rw"`
	Val42 uint16 `sunspec:"offset=43,access=rw"`
	Val43 uint16 `sunspec:"offset=44,access=rw"`
	Val44 uint16 `sunspec:"offset=45,access=rw"`
	Val45 uint16 `sunspec:"offset=46,access=rw"`
	Val46 uint16 `sunspec:"offset=47,access=rw"`
	Val47 uint16 `sunspec:"offset=48,access=rw"`
	Val48 uint16 `sunspec:"offset=49,access=rw"`
	Val49 uint16 `sunspec:"offset=50,access=rw"`
	Val50 uint16 `sunspec:"offset=51,access=rw"`
	Val51 uint16 `sunspec:"offset=52,access=rw"`
	Val52 uint16 `sunspec:"offset=53,access=rw"`
	Val53 uint16 `sunspec:"offset=54,access=rw"`
	Val54 uint16 `sunspec:"offset=55,access=rw"`
	Val55 uint16 `sunspec:"offset=56,access=rw"`
	Val56 uint16 `sunspec:"offset=57,access=rw"`
	Val57 uint16 `sunspec:"offset=58,access=rw"`
	Val58 uint16 `sunspec:"offset=59,access=rw"`
	Val59 uint16 `sunspec:"offset=60,access=rw"`
	Val60 uint16 `sunspec:"offset=61,access=rw"`
	Val61 uint16 `sunspec:"offset=62,access=rw"`
	Val62 uint16 `sunspec:"offset=63,access=rw"`
	Val63 uint16 `sunspec:"offset=64,access=rw"`
	Val64 uint16 `sunspec:"offset=65,access=rw"`
	Val65 uint16 `sunspec:"offset=66,access=rw"`
	Val66 uint16 `sunspec:"offset=67,access=rw"`
	Val67 uint16 `sunspec:"offset=68,access=rw"`
	Val68 uint16 `sunspec:"offset=69,access=rw"`
	Val69 uint16 `sunspec:"offset=70,access=rw"`
	Val70 uint16 `sunspec:"offset=71,access=rw"`
	Val71 uint16 `sunspec:"offset=72,access=rw"`
	Val72 uint16 `sunspec:"offset=73,access=rw"`
	Val73 uint16 `sunspec:"offset=74,access=rw"`
	Val74 uint16 `sunspec:"offset=75,access=rw"`
	Val75 uint16 `sunspec:"offset=76,access=rw"`
	Val76 uint16 `sunspec:"offset=77,access=rw"`
	Val77 uint16 `sunspec:"offset=78,access=rw"`
	Val78 uint16 `sunspec:"offset=79,access=rw"`
	Val79 uint16 `sunspec:"offset=80,access=rw"`
	Val80 uint16 `sunspec:"offset=81,access=rw"`
	Ts    uint32 `sunspec:"offset=82,access=rw"`
	Ms    uint16 `sunspec:"offset=84,access=rw"`
	Seq   uint16 `sunspec:"offset=85,access=rw"`
	Role  uint16 `sunspec:"offset=86,access=rw"`
	Rsrvd Pad    `sunspec:"offset=87,access=rw"`
	Alg   Enum16 `sunspec:"offset=88,access=rw"`
	N     uint16 `sunspec:"offset=89,access=rw"`

	Repeats []Block6Repeat
}

func (self *Block6) GetId() ModelId {
	return 6
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     6,
		Name:   "",
		Length: 91,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 90,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "X", Offset: 0, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Off", Offset: 1, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val1", Offset: 2, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val2", Offset: 3, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val3", Offset: 4, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val4", Offset: 5, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val5", Offset: 6, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val6", Offset: 7, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val7", Offset: 8, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val8", Offset: 9, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val9", Offset: 10, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val10", Offset: 11, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val11", Offset: 12, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val12", Offset: 13, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val13", Offset: 14, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val14", Offset: 15, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val15", Offset: 16, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val16", Offset: 17, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val17", Offset: 18, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val18", Offset: 19, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val19", Offset: 20, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val20", Offset: 21, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val21", Offset: 22, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val22", Offset: 23, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val23", Offset: 24, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val24", Offset: 25, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val25", Offset: 26, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val26", Offset: 27, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val27", Offset: 28, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val28", Offset: 29, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val29", Offset: 30, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val30", Offset: 31, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val31", Offset: 32, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val32", Offset: 33, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val33", Offset: 34, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val34", Offset: 35, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val35", Offset: 36, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val36", Offset: 37, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val37", Offset: 38, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val38", Offset: 39, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val39", Offset: 40, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val40", Offset: 41, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val41", Offset: 42, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val42", Offset: 43, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val43", Offset: 44, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val44", Offset: 45, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val45", Offset: 46, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val46", Offset: 47, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val47", Offset: 48, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val48", Offset: 49, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val49", Offset: 50, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val50", Offset: 51, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val51", Offset: 52, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val52", Offset: 53, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val53", Offset: 54, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val54", Offset: 55, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val55", Offset: 56, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val56", Offset: 57, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val57", Offset: 58, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val58", Offset: 59, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val59", Offset: 60, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val60", Offset: 61, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val61", Offset: 62, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val62", Offset: 63, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val63", Offset: 64, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val64", Offset: 65, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val65", Offset: 66, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val66", Offset: 67, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val67", Offset: 68, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val68", Offset: 69, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val69", Offset: 70, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val70", Offset: 71, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val71", Offset: 72, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val72", Offset: 73, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val73", Offset: 74, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val74", Offset: 75, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val75", Offset: 76, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val76", Offset: 77, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val77", Offset: 78, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val78", Offset: 79, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val79", Offset: 80, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Val80", Offset: 81, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ts", Offset: 82, Type: "uint32", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ms", Offset: 84, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Seq", Offset: 85, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Role", Offset: 86, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Rsrvd", Offset: 87, Type: "pad", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Alg", Offset: 88, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 89, Type: "uint16", Access: "rw", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DS", Offset: 0, Type: "uint16", Access: "rw"},
				},
			},
		}})
}

// Block7 - Secure Write Response Model (DRAFT 1) - Include a digital signature over the response

type Block7Repeat struct {
	DS uint16 `sunspec:"offset=0,access=rw"`
}

type Block7 struct {
	RqSeq uint16 `sunspec:"offset=0,access=r"`
	Sts   Enum16 `sunspec:"offset=1,access=r"`
	Ts    uint32 `sunspec:"offset=2,access=r"`
	Ms    uint16 `sunspec:"offset=4,access=r"`
	Seq   uint16 `sunspec:"offset=5,access=r"`
	Alm   Enum16 `sunspec:"offset=6"`
	Rsrvd Pad    `sunspec:"offset=7,access=r"`
	Alg   Enum16 `sunspec:"offset=8,access=r"`
	N     uint16 `sunspec:"offset=9,access=rw"`

	Repeats []Block7Repeat
}

func (self *Block7) GetId() ModelId {
	return 7
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     7,
		Name:   "",
		Length: 11,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "RqSeq", Offset: 0, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Sts", Offset: 1, Type: "enum16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Ts", Offset: 2, Type: "uint32", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Ms", Offset: 4, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Seq", Offset: 5, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Alm", Offset: 6, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "Rsrvd", Offset: 7, Type: "pad", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Alg", Offset: 8, Type: "enum16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 9, Type: "uint16", Access: "rw", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DS", Offset: 0, Type: "uint16", Access: "rw"},
				},
			},
		}})
}

// Block8 - Get Device Security Certificate - Security model for PKI

type Block8Repeat struct {
	Cert uint16 `sunspec:"offset=0,access=r"`
}

type Block8 struct {
	Fmt Enum16 `sunspec:"offset=0,access=r"`
	N   uint16 `sunspec:"offset=1,access=r"`

	Repeats []Block8Repeat
}

func (self *Block8) GetId() ModelId {
	return 8
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     8,
		Name:   "",
		Length: 3,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 2,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Fmt", Offset: 0, Type: "enum16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 1, Type: "uint16", Access: "r", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Cert", Offset: 0, Type: "uint16", Access: "r", Mandatory: true},
				},
			},
		}})
}

// Block9 - Set Operator Security Certificate - Security model for PKI

type Block9Repeat struct {
	Cert uint16 `sunspec:"offset=0,access=rw"`
}

type Block9 struct {
	CertUID  uint16 `sunspec:"offset=0,access=rw"`
	CertRole uint16 `sunspec:"offset=1,access=rw"`
	Fmt      Enum16 `sunspec:"offset=2,access=rw"`
	Typ      Enum16 `sunspec:"offset=3,access=rw"`
	TotLn    uint16 `sunspec:"offset=4,access=rw"`
	FrgLn    uint16 `sunspec:"offset=5,access=rw"`
	Frg1     uint16 `sunspec:"offset=6,access=rw"`
	Frg2     uint16 `sunspec:"offset=7,access=rw"`
	Frg3     uint16 `sunspec:"offset=8,access=rw"`
	Frg4     uint16 `sunspec:"offset=9,access=rw"`
	Frg5     uint16 `sunspec:"offset=10,access=rw"`
	Frg6     uint16 `sunspec:"offset=11,access=rw"`
	Frg7     uint16 `sunspec:"offset=12,access=rw"`
	Frg8     uint16 `sunspec:"offset=13,access=rw"`
	Frg9     uint16 `sunspec:"offset=14,access=rw"`
	Frg10    uint16 `sunspec:"offset=15,access=rw"`
	Frg11    uint16 `sunspec:"offset=16,access=rw"`
	Frg12    uint16 `sunspec:"offset=17,access=rw"`
	Frg13    uint16 `sunspec:"offset=18,access=rw"`
	Frg14    uint16 `sunspec:"offset=19,access=rw"`
	Frg15    uint16 `sunspec:"offset=20,access=rw"`
	Frg16    uint16 `sunspec:"offset=21,access=rw"`
	Frg17    uint16 `sunspec:"offset=22,access=rw"`
	Frg18    uint16 `sunspec:"offset=23,access=rw"`
	Frg19    uint16 `sunspec:"offset=24,access=rw"`
	Frg20    uint16 `sunspec:"offset=25,access=rw"`
	Frg21    uint16 `sunspec:"offset=26,access=rw"`
	Frg22    uint16 `sunspec:"offset=27,access=rw"`
	Frg23    uint16 `sunspec:"offset=28,access=rw"`
	Frg24    uint16 `sunspec:"offset=29,access=rw"`
	Frg25    uint16 `sunspec:"offset=30,access=rw"`
	Frg26    uint16 `sunspec:"offset=31,access=rw"`
	Frg27    uint16 `sunspec:"offset=32,access=rw"`
	Frg28    uint16 `sunspec:"offset=33,access=rw"`
	Frg29    uint16 `sunspec:"offset=34,access=rw"`
	Frg30    uint16 `sunspec:"offset=35,access=rw"`
	Frg31    uint16 `sunspec:"offset=36,access=rw"`
	Frg32    uint16 `sunspec:"offset=37,access=rw"`
	Frg33    uint16 `sunspec:"offset=38,access=rw"`
	Frg34    uint16 `sunspec:"offset=39,access=rw"`
	Frg35    uint16 `sunspec:"offset=40,access=rw"`
	Frg36    uint16 `sunspec:"offset=41,access=rw"`
	Frg37    uint16 `sunspec:"offset=42,access=rw"`
	Frg38    uint16 `sunspec:"offset=43,access=rw"`
	Frg39    uint16 `sunspec:"offset=44,access=rw"`
	Frg40    uint16 `sunspec:"offset=45,access=rw"`
	Frg41    uint16 `sunspec:"offset=46,access=rw"`
	Frg42    uint16 `sunspec:"offset=47,access=rw"`
	Frg43    uint16 `sunspec:"offset=48,access=rw"`
	Frg44    uint16 `sunspec:"offset=49,access=rw"`
	Frg45    uint16 `sunspec:"offset=50,access=rw"`
	Frg46    uint16 `sunspec:"offset=51,access=rw"`
	Frg47    uint16 `sunspec:"offset=52,access=rw"`
	Frg48    uint16 `sunspec:"offset=53,access=rw"`
	Frg49    uint16 `sunspec:"offset=54,access=rw"`
	Frg50    uint16 `sunspec:"offset=55,access=rw"`
	Frg51    uint16 `sunspec:"offset=56,access=rw"`
	Frg52    uint16 `sunspec:"offset=57,access=rw"`
	Frg53    uint16 `sunspec:"offset=58,access=rw"`
	Frg54    uint16 `sunspec:"offset=59,access=rw"`
	Frg55    uint16 `sunspec:"offset=60,access=rw"`
	Frg56    uint16 `sunspec:"offset=61,access=rw"`
	Frg57    uint16 `sunspec:"offset=62,access=rw"`
	Frg58    uint16 `sunspec:"offset=63,access=rw"`
	Frg59    uint16 `sunspec:"offset=64,access=rw"`
	Frg60    uint16 `sunspec:"offset=65,access=rw"`
	Frg61    uint16 `sunspec:"offset=66,access=rw"`
	Frg62    uint16 `sunspec:"offset=67,access=rw"`
	Frg63    uint16 `sunspec:"offset=68,access=rw"`
	Frg64    uint16 `sunspec:"offset=69,access=rw"`
	Frg65    uint16 `sunspec:"offset=70,access=rw"`
	Frg66    uint16 `sunspec:"offset=71,access=rw"`
	Frg67    uint16 `sunspec:"offset=72,access=rw"`
	Frg68    uint16 `sunspec:"offset=73,access=rw"`
	Frg69    uint16 `sunspec:"offset=74,access=rw"`
	Frg70    uint16 `sunspec:"offset=75,access=rw"`
	Frg71    uint16 `sunspec:"offset=76,access=rw"`
	Frg72    uint16 `sunspec:"offset=77,access=rw"`
	Frg73    uint16 `sunspec:"offset=78,access=rw"`
	Frg74    uint16 `sunspec:"offset=79,access=rw"`
	Frg75    uint16 `sunspec:"offset=80,access=rw"`
	Frg78    uint16 `sunspec:"offset=81,access=rw"`
	Frg79    uint16 `sunspec:"offset=82,access=rw"`
	Frg80    uint16 `sunspec:"offset=83,access=rw"`
	Ts       uint32 `sunspec:"offset=84,access=rw"`
	Ms       uint16 `sunspec:"offset=86,access=rw"`
	Seq      uint16 `sunspec:"offset=87,access=rw"`
	UID      uint16 `sunspec:"offset=88,access=rw"`
	Role     uint16 `sunspec:"offset=89,access=rw"`
	Alg      Enum16 `sunspec:"offset=90,access=rw"`
	N        uint16 `sunspec:"offset=91,access=rw"`

	Repeats []Block9Repeat
}

func (self *Block9) GetId() ModelId {
	return 9
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     9,
		Name:   "",
		Length: 93,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 92,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "CertUID", Offset: 0, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "CertRole", Offset: 1, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Fmt", Offset: 2, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Typ", Offset: 3, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "TotLn", Offset: 4, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "FrgLn", Offset: 5, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg1", Offset: 6, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg2", Offset: 7, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg3", Offset: 8, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg4", Offset: 9, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg5", Offset: 10, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg6", Offset: 11, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg7", Offset: 12, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg8", Offset: 13, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg9", Offset: 14, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg10", Offset: 15, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg11", Offset: 16, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg12", Offset: 17, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg13", Offset: 18, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg14", Offset: 19, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg15", Offset: 20, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg16", Offset: 21, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg17", Offset: 22, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg18", Offset: 23, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg19", Offset: 24, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg20", Offset: 25, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg21", Offset: 26, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg22", Offset: 27, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg23", Offset: 28, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg24", Offset: 29, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg25", Offset: 30, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg26", Offset: 31, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg27", Offset: 32, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg28", Offset: 33, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg29", Offset: 34, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg30", Offset: 35, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg31", Offset: 36, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg32", Offset: 37, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg33", Offset: 38, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg34", Offset: 39, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg35", Offset: 40, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg36", Offset: 41, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg37", Offset: 42, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg38", Offset: 43, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg39", Offset: 44, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg40", Offset: 45, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg41", Offset: 46, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg42", Offset: 47, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg43", Offset: 48, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg44", Offset: 49, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg45", Offset: 50, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg46", Offset: 51, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg47", Offset: 52, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg48", Offset: 53, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg49", Offset: 54, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg50", Offset: 55, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg51", Offset: 56, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg52", Offset: 57, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg53", Offset: 58, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg54", Offset: 59, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg55", Offset: 60, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg56", Offset: 61, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg57", Offset: 62, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg58", Offset: 63, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg59", Offset: 64, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg60", Offset: 65, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg61", Offset: 66, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg62", Offset: 67, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg63", Offset: 68, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg64", Offset: 69, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg65", Offset: 70, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg66", Offset: 71, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg67", Offset: 72, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg68", Offset: 73, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg69", Offset: 74, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg70", Offset: 75, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg71", Offset: 76, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg72", Offset: 77, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg73", Offset: 78, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg74", Offset: 79, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg75", Offset: 80, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg78", Offset: 81, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg79", Offset: 82, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Frg80", Offset: 83, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ts", Offset: 84, Type: "uint32", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ms", Offset: 86, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Seq", Offset: 87, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "UID", Offset: 88, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Role", Offset: 89, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Alg", Offset: 90, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 91, Type: "uint16", Access: "rw", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Cert", Offset: 0, Type: "uint16", Access: "rw", Mandatory: true},
				},
			},
		}})
}

// Block10 - Communication Interface Header - To be included first for a complete interface description

type Block10 struct {
	St  Enum16 `sunspec:"offset=0"`
	Ctl uint16 `sunspec:"offset=1,access=rw"`
	Typ Enum16 `sunspec:"offset=2"`
	Pad Pad    `sunspec:"offset=3"`
}

func (self *Block10) GetId() ModelId {
	return 10
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     10,
		Name:   "",
		Length: 4,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 4,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "St", Offset: 0, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "Ctl", Offset: 1, Type: "uint16", Access: "rw"},
					smdx.PointElement{Id: "Typ", Offset: 2, Type: "enum16"},
					smdx.PointElement{Id: "Pad", Offset: 3, Type: "pad"},
				},
			},
		}})
}

// Block11 - Ethernet Link Layer - Include to support a wired ethernet port

type Block11 struct {
	Spd    uint16     `sunspec:"offset=0"`
	CfgSt  Bitfield16 `sunspec:"offset=1"`
	St     Enum16     `sunspec:"offset=2"`
	MAC    EUI48      `sunspec:"offset=3"`
	Nam    String     `sunspec:"offset=7,len=4,access=rw"`
	Ctl    Bitfield16 `sunspec:"offset=11,access=rw"`
	FrcSpd uint16     `sunspec:"offset=12,access=rw"`
}

func (self *Block11) GetId() ModelId {
	return 11
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     11,
		Name:   "",
		Length: 13,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 13,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Spd", Offset: 0, Type: "uint16", Units: "Mbps", Mandatory: true},
					smdx.PointElement{Id: "CfgSt", Offset: 1, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: "St", Offset: 2, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "MAC", Offset: 3, Type: "eui48"},
					smdx.PointElement{Id: "Nam", Offset: 7, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "Ctl", Offset: 11, Type: "bitfield16", Access: "rw"},
					smdx.PointElement{Id: "FrcSpd", Offset: 12, Type: "uint16", Units: "Mbps", Access: "rw"},
				},
			},
		}})
}

// Block12 - IPv4 - Include to support an IPv4 protocol stack on this interface

type Block12 struct {
	Nam     String     `sunspec:"offset=0,len=4,access=rw"`
	CfgSt   Enum16     `sunspec:"offset=4"`
	ChgSt   Bitfield16 `sunspec:"offset=5"`
	Cap     Bitfield16 `sunspec:"offset=6"`
	Cfg     Enum16     `sunspec:"offset=7,access=rw"`
	Ctl     Enum16     `sunspec:"offset=8,access=rw"`
	Addr    String     `sunspec:"offset=9,len=8,access=rw"`
	Msk     String     `sunspec:"offset=17,len=8,access=rw"`
	Gw      String     `sunspec:"offset=25,len=8,access=rw"`
	DNS1    String     `sunspec:"offset=33,len=8,access=rw"`
	DNS2    String     `sunspec:"offset=41,len=8,access=rw"`
	NTP1    String     `sunspec:"offset=49,len=12,access=rw"`
	NTP2    String     `sunspec:"offset=61,len=12,access=rw"`
	DomNam  String     `sunspec:"offset=73,len=12,access=rw"`
	HostNam String     `sunspec:"offset=85,len=12,access=rw"`
	Pad     Pad        `sunspec:"offset=97"`
}

func (self *Block12) GetId() ModelId {
	return 12
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     12,
		Name:   "",
		Length: 98,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 98,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Nam", Offset: 0, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "CfgSt", Offset: 4, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "ChgSt", Offset: 5, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: "Cap", Offset: 6, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: "Cfg", Offset: 7, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ctl", Offset: 8, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Addr", Offset: 9, Type: "string", Access: "rw", Length: 8, Mandatory: true},
					smdx.PointElement{Id: "Msk", Offset: 17, Type: "string", Access: "rw", Length: 8, Mandatory: true},
					smdx.PointElement{Id: "Gw", Offset: 25, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "DNS1", Offset: 33, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "DNS2", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "NTP1", Offset: 49, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: "NTP2", Offset: 61, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: "DomNam", Offset: 73, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: "HostNam", Offset: 85, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: "Pad", Offset: 97, Type: "pad"},
				},
			},
		}})
}

// Block13 - IPv6 - Include to support an IPv6 protocol stack on this interface

type Block13 struct {
	Nam     String     `sunspec:"offset=0,len=4,access=rw"`
	CfgSt   Enum16     `sunspec:"offset=4"`
	ChgSt   Bitfield16 `sunspec:"offset=5"`
	Cap     Bitfield16 `sunspec:"offset=6"`
	Cfg     Enum16     `sunspec:"offset=7,access=rw"`
	Ctl     Enum16     `sunspec:"offset=8,access=rw"`
	Addr    String     `sunspec:"offset=9,len=20,access=rw"`
	CIDR    String     `sunspec:"offset=29,len=20,access=rw"`
	Gw      String     `sunspec:"offset=49,len=20,access=rw"`
	DNS1    String     `sunspec:"offset=69,len=20,access=rw"`
	DNS2    String     `sunspec:"offset=89,len=20,access=rw"`
	NTP1    String     `sunspec:"offset=109,len=20,access=rw"`
	NTP2    String     `sunspec:"offset=129,len=20,access=rw"`
	DomNam  String     `sunspec:"offset=149,len=12,access=rw"`
	HostNam String     `sunspec:"offset=161,len=12,access=rw"`
	Pad     Pad        `sunspec:"offset=173"`
}

func (self *Block13) GetId() ModelId {
	return 13
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     13,
		Name:   "",
		Length: 174,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 174,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Nam", Offset: 0, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "CfgSt", Offset: 4, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "ChgSt", Offset: 5, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: "Cap", Offset: 6, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: "Cfg", Offset: 7, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Ctl", Offset: 8, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Addr", Offset: 9, Type: "string", Access: "rw", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "CIDR", Offset: 29, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: "Gw", Offset: 49, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: "DNS1", Offset: 69, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: "DNS2", Offset: 89, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: "NTP1", Offset: 109, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: "NTP2", Offset: 129, Type: "string", Access: "rw", Length: 20},
					smdx.PointElement{Id: "DomNam", Offset: 149, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: "HostNam", Offset: 161, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: "Pad", Offset: 173, Type: "pad"},
				},
			},
		}})
}

// Block14 - Proxy Server - Include this block to allow for a proxy server

type Block14 struct {
	Nam  String     `sunspec:"offset=0,len=4,access=rw"`
	Cap  Bitfield16 `sunspec:"offset=4,access=rw"`
	Cfg  Enum16     `sunspec:"offset=5,access=rw"`
	Typ  Bitfield16 `sunspec:"offset=6,access=rw"`
	Addr String     `sunspec:"offset=7,len=20,access=rw"`
	Port uint16     `sunspec:"offset=27,access=rw"`
	User String     `sunspec:"offset=28,len=12,access=rw"`
	Pw   String     `sunspec:"offset=40,len=12,access=rw"`
}

func (self *Block14) GetId() ModelId {
	return 14
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     14,
		Name:   "",
		Length: 52,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 52,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Nam", Offset: 0, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "Cap", Offset: 4, Type: "bitfield16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Cfg", Offset: 5, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Typ", Offset: 6, Type: "bitfield16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Addr", Offset: 7, Type: "string", Access: "rw", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "Port", Offset: 27, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "User", Offset: 28, Type: "string", Access: "rw", Length: 12},
					smdx.PointElement{Id: "Pw", Offset: 40, Type: "string", Access: "rw", Length: 12},
				},
			},
		}})
}

// Block15 - Interface Counters Model - Interface counters

type Block15 struct {
	Clr       uint16 `sunspec:"offset=0,access=rw"`
	InCnt     Acc32  `sunspec:"offset=1"`
	InUcCnt   Acc32  `sunspec:"offset=3"`
	InNUcCnt  Acc32  `sunspec:"offset=5"`
	InDscCnt  Acc32  `sunspec:"offset=7"`
	InErrCnt  Acc32  `sunspec:"offset=9"`
	InUnkCnt  Acc32  `sunspec:"offset=11"`
	OutCnt    Acc32  `sunspec:"offset=13"`
	OutUcCnt  Acc32  `sunspec:"offset=15"`
	OutNUcCnt Acc32  `sunspec:"offset=17"`
	OutDscCnt Acc32  `sunspec:"offset=19"`
	OutErrCnt Acc32  `sunspec:"offset=21"`
	Pad       Pad    `sunspec:"offset=23"`
}

func (self *Block15) GetId() ModelId {
	return 15
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     15,
		Name:   "",
		Length: 24,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 24,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Clr", Offset: 0, Type: "uint16", Access: "rw"},
					smdx.PointElement{Id: "InCnt", Offset: 1, Type: "acc32"},
					smdx.PointElement{Id: "InUcCnt", Offset: 3, Type: "acc32"},
					smdx.PointElement{Id: "InNUcCnt", Offset: 5, Type: "acc32"},
					smdx.PointElement{Id: "InDscCnt", Offset: 7, Type: "acc32"},
					smdx.PointElement{Id: "InErrCnt", Offset: 9, Type: "acc32"},
					smdx.PointElement{Id: "InUnkCnt", Offset: 11, Type: "acc32"},
					smdx.PointElement{Id: "OutCnt", Offset: 13, Type: "acc32"},
					smdx.PointElement{Id: "OutUcCnt", Offset: 15, Type: "acc32"},
					smdx.PointElement{Id: "OutNUcCnt", Offset: 17, Type: "acc32"},
					smdx.PointElement{Id: "OutDscCnt", Offset: 19, Type: "acc32"},
					smdx.PointElement{Id: "OutErrCnt", Offset: 21, Type: "acc32"},
					smdx.PointElement{Id: "Pad", Offset: 23, Type: "pad"},
				},
			},
		}})
}

// Block16 - Simple IP Network - Include this model for a simple IPv4 network stack

type Block16 struct {
	Nam    String     `sunspec:"offset=0,len=4,access=rw"`
	Cfg    Enum16     `sunspec:"offset=4"`
	Ctl    Enum16     `sunspec:"offset=5,access=rw"`
	Addr   String     `sunspec:"offset=6,len=8,access=rw"`
	Msk    String     `sunspec:"offset=14,len=8,access=rw"`
	Gw     String     `sunspec:"offset=22,len=8,access=rw"`
	DNS1   String     `sunspec:"offset=30,len=8,access=rw"`
	DNS2   String     `sunspec:"offset=38,len=8,access=rw"`
	MAC    uint64     `sunspec:"offset=46,access=r"`
	LnkCtl Bitfield16 `sunspec:"offset=50,access=rw"`
	Pad    Pad        `sunspec:"offset=51"`
}

func (self *Block16) GetId() ModelId {
	return 16
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     16,
		Name:   "",
		Length: 52,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 52,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Nam", Offset: 0, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "Cfg", Offset: 4, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "Ctl", Offset: 5, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Addr", Offset: 6, Type: "string", Access: "rw", Length: 8, Mandatory: true},
					smdx.PointElement{Id: "Msk", Offset: 14, Type: "string", Access: "rw", Length: 8, Mandatory: true},
					smdx.PointElement{Id: "Gw", Offset: 22, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "DNS1", Offset: 30, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "DNS2", Offset: 38, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "MAC", Offset: 46, Type: "uint64", Access: "r"},
					smdx.PointElement{Id: "LnkCtl", Offset: 50, Type: "bitfield16", Access: "rw"},
					smdx.PointElement{Id: "Pad", Offset: 51, Type: "pad"},
				},
			},
		}})
}

// Block17 - Serial Interface - Include this model for serial interface configuration support

type Block17 struct {
	Nam  String `sunspec:"offset=0,len=4,access=rw"`
	Rte  uint32 `sunspec:"offset=4,access=rw"`
	Bits uint16 `sunspec:"offset=6,access=rw"`
	Pty  Enum16 `sunspec:"offset=7,access=rw"`
	Dup  Enum16 `sunspec:"offset=8,access=rw"`
	Flw  Enum16 `sunspec:"offset=9,access=rw"`
	Typ  Enum16 `sunspec:"offset=10"`
	Pcol Enum16 `sunspec:"offset=11"`
}

func (self *Block17) GetId() ModelId {
	return 17
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     17,
		Name:   "",
		Length: 12,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 12,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Nam", Offset: 0, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "Rte", Offset: 4, Type: "uint32", Units: "bps", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Bits", Offset: 6, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Pty", Offset: 7, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Dup", Offset: 8, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "Flw", Offset: 9, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "Typ", Offset: 10, Type: "enum16"},
					smdx.PointElement{Id: "Pcol", Offset: 11, Type: "enum16"},
				},
			},
		}})
}

// Block18 - Cellular Link - Include this model to support a cellular interface link

type Block18 struct {
	Nam  String `sunspec:"offset=0,len=4,access=rw"`
	IMEI uint32 `sunspec:"offset=4,access=rw"`
	APN  String `sunspec:"offset=6,len=4,access=rw"`
	Num  String `sunspec:"offset=10,len=6,access=rw"`
	Pin  String `sunspec:"offset=16,len=6,access=rw"`
}

func (self *Block18) GetId() ModelId {
	return 18
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     18,
		Name:   "",
		Length: 22,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 22,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Nam", Offset: 0, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "IMEI", Offset: 4, Type: "uint32", Access: "rw"},
					smdx.PointElement{Id: "APN", Offset: 6, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "Num", Offset: 10, Type: "string", Access: "rw", Length: 6},
					smdx.PointElement{Id: "Pin", Offset: 16, Type: "string", Access: "rw", Length: 6},
				},
			},
		}})
}

// Block19 - PPP Link - Include this model to configure a Point-to-Point Protocol link

type Block19 struct {
	Nam    String `sunspec:"offset=0,len=4,access=rw"`
	Rte    uint32 `sunspec:"offset=4,access=rw"`
	Bits   uint16 `sunspec:"offset=6,access=rw"`
	Pty    Enum16 `sunspec:"offset=7,access=rw"`
	Dup    Enum16 `sunspec:"offset=8,access=rw"`
	Flw    Enum16 `sunspec:"offset=9,access=rw"`
	Auth   Enum16 `sunspec:"offset=10"`
	UsrNam String `sunspec:"offset=11,len=12"`
	Pw     String `sunspec:"offset=23,len=6"`
	Pad    Pad    `sunspec:"offset=29"`
}

func (self *Block19) GetId() ModelId {
	return 19
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     19,
		Name:   "",
		Length: 30,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 30,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Nam", Offset: 0, Type: "string", Access: "rw", Length: 4},
					smdx.PointElement{Id: "Rte", Offset: 4, Type: "uint32", Units: "bps", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Bits", Offset: 6, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Pty", Offset: 7, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Dup", Offset: 8, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "Flw", Offset: 9, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "Auth", Offset: 10, Type: "enum16"},
					smdx.PointElement{Id: "UsrNam", Offset: 11, Type: "string", Length: 12},
					smdx.PointElement{Id: "Pw", Offset: 23, Type: "string", Length: 6},
					smdx.PointElement{Id: "Pad", Offset: 29, Type: "pad"},
				},
			},
		}})
}

// Block101 - Inverter (Single Phase) - Include this model for single phase inverter monitoring

type Block101 struct {
	A       uint16      `sunspec:"offset=0,sf=A_SF"`
	AphA    uint16      `sunspec:"offset=1,sf=A_SF"`
	AphB    uint16      `sunspec:"offset=2,sf=A_SF"`
	AphC    uint16      `sunspec:"offset=3,sf=A_SF"`
	A_SF    ScaleFactor `sunspec:"offset=4"`
	PPVphAB uint16      `sunspec:"offset=5,sf=V_SF"`
	PPVphBC uint16      `sunspec:"offset=6,sf=V_SF"`
	PPVphCA uint16      `sunspec:"offset=7,sf=V_SF"`
	PhVphA  uint16      `sunspec:"offset=8,sf=V_SF"`
	PhVphB  uint16      `sunspec:"offset=9,sf=V_SF"`
	PhVphC  uint16      `sunspec:"offset=10,sf=V_SF"`
	V_SF    ScaleFactor `sunspec:"offset=11"`
	W       int16       `sunspec:"offset=12,sf=W_SF"`
	W_SF    ScaleFactor `sunspec:"offset=13"`
	Hz      uint16      `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF   ScaleFactor `sunspec:"offset=15"`
	VA      int16       `sunspec:"offset=16,sf=VA_SF"`
	VA_SF   ScaleFactor `sunspec:"offset=17"`
	VAr     int16       `sunspec:"offset=18,sf=VAr_SF"`
	VAr_SF  ScaleFactor `sunspec:"offset=19"`
	PF      int16       `sunspec:"offset=20,sf=PF_SF"`
	PF_SF   ScaleFactor `sunspec:"offset=21"`
	WH      Acc32       `sunspec:"offset=22,sf=WH_SF"`
	WH_SF   ScaleFactor `sunspec:"offset=24"`
	DCA     uint16      `sunspec:"offset=25,sf=DCA_SF"`
	DCA_SF  ScaleFactor `sunspec:"offset=26"`
	DCV     uint16      `sunspec:"offset=27,sf=DCV_SF"`
	DCV_SF  ScaleFactor `sunspec:"offset=28"`
	DCW     int16       `sunspec:"offset=29,sf=DCW_SF"`
	DCW_SF  ScaleFactor `sunspec:"offset=30"`
	TmpCab  int16       `sunspec:"offset=31,sf=Tmp_SF"`
	TmpSnk  int16       `sunspec:"offset=32,sf=Tmp_SF"`
	TmpTrns int16       `sunspec:"offset=33,sf=Tmp_SF"`
	TmpOt   int16       `sunspec:"offset=34,sf=Tmp_SF"`
	Tmp_SF  ScaleFactor `sunspec:"offset=35"`
	St      Enum16      `sunspec:"offset=36"`
	StVnd   Enum16      `sunspec:"offset=37"`
	Evt1    Bitfield32  `sunspec:"offset=38"`
	Evt2    Bitfield32  `sunspec:"offset=40"`
	EvtVnd1 Bitfield32  `sunspec:"offset=42"`
	EvtVnd2 Bitfield32  `sunspec:"offset=44"`
	EvtVnd3 Bitfield32  `sunspec:"offset=46"`
	EvtVnd4 Bitfield32  `sunspec:"offset=48"`
}

func (self *Block101) GetId() ModelId {
	return 101
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     101,
		Name:   "inverter",
		Length: 50,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 50,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 1, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 2, Type: "uint16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "AphC", Offset: 3, Type: "uint16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "A_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "PPVphAB", Offset: 5, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphBC", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 7, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 9, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphC", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "V_SF", Offset: 11, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "W", Offset: 12, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "W_SF", Offset: 13, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 15, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 16, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VA_SF", Offset: 17, Type: "sunssf"},
					smdx.PointElement{Id: "VAr", Offset: 18, Type: "int16", ScaleFactor: "VAr_SF", Units: "var"},
					smdx.PointElement{Id: "VAr_SF", Offset: 19, Type: "sunssf"},
					smdx.PointElement{Id: "PF", Offset: 20, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PF_SF", Offset: 21, Type: "sunssf"},
					smdx.PointElement{Id: "WH", Offset: 22, Type: "acc32", ScaleFactor: "WH_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "WH_SF", Offset: 24, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DCA", Offset: 25, Type: "uint16", ScaleFactor: "DCA_SF", Units: "A"},
					smdx.PointElement{Id: "DCA_SF", Offset: 26, Type: "sunssf"},
					smdx.PointElement{Id: "DCV", Offset: 27, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "DCV_SF", Offset: 28, Type: "sunssf"},
					smdx.PointElement{Id: "DCW", Offset: 29, Type: "int16", ScaleFactor: "DCW_SF", Units: "W"},
					smdx.PointElement{Id: "DCW_SF", Offset: 30, Type: "sunssf"},
					smdx.PointElement{Id: "TmpCab", Offset: 31, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "TmpSnk", Offset: 32, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "TmpTrns", Offset: 33, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "TmpOt", Offset: 34, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "Tmp_SF", Offset: 35, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "St", Offset: 36, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StVnd", Offset: 37, Type: "enum16"},
					smdx.PointElement{Id: "Evt1", Offset: 38, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 40, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd1", Offset: 42, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd2", Offset: 44, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd3", Offset: 46, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd4", Offset: 48, Type: "bitfield32"},
				},
			},
		}})
}

// Block102 - Inverter (Split-Phase) - Include this model for split phase inverter monitoring

type Block102 struct {
	A       uint16      `sunspec:"offset=0,sf=A_SF"`
	AphA    uint16      `sunspec:"offset=1,sf=A_SF"`
	AphB    uint16      `sunspec:"offset=2,sf=A_SF"`
	AphC    uint16      `sunspec:"offset=3,sf=A_SF"`
	A_SF    ScaleFactor `sunspec:"offset=4"`
	PPVphAB uint16      `sunspec:"offset=5,sf=V_SF"`
	PPVphBC uint16      `sunspec:"offset=6,sf=V_SF"`
	PPVphCA uint16      `sunspec:"offset=7,sf=V_SF"`
	PhVphA  uint16      `sunspec:"offset=8,sf=V_SF"`
	PhVphB  uint16      `sunspec:"offset=9,sf=V_SF"`
	PhVphC  uint16      `sunspec:"offset=10,sf=V_SF"`
	V_SF    ScaleFactor `sunspec:"offset=11"`
	W       int16       `sunspec:"offset=12,sf=W_SF"`
	W_SF    ScaleFactor `sunspec:"offset=13"`
	Hz      uint16      `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF   ScaleFactor `sunspec:"offset=15"`
	VA      int16       `sunspec:"offset=16,sf=VA_SF"`
	VA_SF   ScaleFactor `sunspec:"offset=17"`
	VAr     int16       `sunspec:"offset=18,sf=VAr_SF"`
	VAr_SF  ScaleFactor `sunspec:"offset=19"`
	PF      int16       `sunspec:"offset=20,sf=PF_SF"`
	PF_SF   ScaleFactor `sunspec:"offset=21"`
	WH      Acc32       `sunspec:"offset=22,sf=WH_SF"`
	WH_SF   ScaleFactor `sunspec:"offset=24"`
	DCA     uint16      `sunspec:"offset=25,sf=DCA_SF"`
	DCA_SF  ScaleFactor `sunspec:"offset=26"`
	DCV     uint16      `sunspec:"offset=27,sf=DCV_SF"`
	DCV_SF  ScaleFactor `sunspec:"offset=28"`
	DCW     int16       `sunspec:"offset=29,sf=DCW_SF"`
	DCW_SF  ScaleFactor `sunspec:"offset=30"`
	TmpCab  int16       `sunspec:"offset=31,sf=Tmp_SF"`
	TmpSnk  int16       `sunspec:"offset=32,sf=Tmp_SF"`
	TmpTrns int16       `sunspec:"offset=33,sf=Tmp_SF"`
	TmpOt   int16       `sunspec:"offset=34,sf=Tmp_SF"`
	Tmp_SF  ScaleFactor `sunspec:"offset=35"`
	St      Enum16      `sunspec:"offset=36"`
	StVnd   Enum16      `sunspec:"offset=37"`
	Evt1    Bitfield32  `sunspec:"offset=38"`
	Evt2    Bitfield32  `sunspec:"offset=40"`
	EvtVnd1 Bitfield32  `sunspec:"offset=42"`
	EvtVnd2 Bitfield32  `sunspec:"offset=44"`
	EvtVnd3 Bitfield32  `sunspec:"offset=46"`
	EvtVnd4 Bitfield32  `sunspec:"offset=48"`
}

func (self *Block102) GetId() ModelId {
	return 102
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     102,
		Name:   "inverter",
		Length: 50,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 50,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 1, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 2, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 3, Type: "uint16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "A_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "PPVphAB", Offset: 5, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphBC", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 7, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 9, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphC", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "V_SF", Offset: 11, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "W", Offset: 12, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "W_SF", Offset: 13, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 15, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 16, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VA_SF", Offset: 17, Type: "sunssf"},
					smdx.PointElement{Id: "VAr", Offset: 18, Type: "int16", ScaleFactor: "VAr_SF", Units: "var"},
					smdx.PointElement{Id: "VAr_SF", Offset: 19, Type: "sunssf"},
					smdx.PointElement{Id: "PF", Offset: 20, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PF_SF", Offset: 21, Type: "sunssf"},
					smdx.PointElement{Id: "WH", Offset: 22, Type: "acc32", ScaleFactor: "WH_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "WH_SF", Offset: 24, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DCA", Offset: 25, Type: "uint16", ScaleFactor: "DCA_SF", Units: "A"},
					smdx.PointElement{Id: "DCA_SF", Offset: 26, Type: "sunssf"},
					smdx.PointElement{Id: "DCV", Offset: 27, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "DCV_SF", Offset: 28, Type: "sunssf"},
					smdx.PointElement{Id: "DCW", Offset: 29, Type: "int16", ScaleFactor: "DCW_SF", Units: "W"},
					smdx.PointElement{Id: "DCW_SF", Offset: 30, Type: "sunssf"},
					smdx.PointElement{Id: "TmpCab", Offset: 31, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "TmpSnk", Offset: 32, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "TmpTrns", Offset: 33, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "TmpOt", Offset: 34, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "Tmp_SF", Offset: 35, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "St", Offset: 36, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StVnd", Offset: 37, Type: "enum16"},
					smdx.PointElement{Id: "Evt1", Offset: 38, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 40, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd1", Offset: 42, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd2", Offset: 44, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd3", Offset: 46, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd4", Offset: 48, Type: "bitfield32"},
				},
			},
		}})
}

// Block103 - Inverter (Three Phase) - Include this model for three phase inverter monitoring

type Block103 struct {
	A       uint16      `sunspec:"offset=0,sf=A_SF"`
	AphA    uint16      `sunspec:"offset=1,sf=A_SF"`
	AphB    uint16      `sunspec:"offset=2,sf=A_SF"`
	AphC    uint16      `sunspec:"offset=3,sf=A_SF"`
	A_SF    ScaleFactor `sunspec:"offset=4"`
	PPVphAB uint16      `sunspec:"offset=5,sf=V_SF"`
	PPVphBC uint16      `sunspec:"offset=6,sf=V_SF"`
	PPVphCA uint16      `sunspec:"offset=7,sf=V_SF"`
	PhVphA  uint16      `sunspec:"offset=8,sf=V_SF"`
	PhVphB  uint16      `sunspec:"offset=9,sf=V_SF"`
	PhVphC  uint16      `sunspec:"offset=10,sf=V_SF"`
	V_SF    ScaleFactor `sunspec:"offset=11"`
	W       int16       `sunspec:"offset=12,sf=W_SF"`
	W_SF    ScaleFactor `sunspec:"offset=13"`
	Hz      uint16      `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF   ScaleFactor `sunspec:"offset=15"`
	VA      int16       `sunspec:"offset=16,sf=VA_SF"`
	VA_SF   ScaleFactor `sunspec:"offset=17"`
	VAr     int16       `sunspec:"offset=18,sf=VAr_SF"`
	VAr_SF  ScaleFactor `sunspec:"offset=19"`
	PF      int16       `sunspec:"offset=20,sf=PF_SF"`
	PF_SF   ScaleFactor `sunspec:"offset=21"`
	WH      Acc32       `sunspec:"offset=22,sf=WH_SF"`
	WH_SF   ScaleFactor `sunspec:"offset=24"`
	DCA     uint16      `sunspec:"offset=25,sf=DCA_SF"`
	DCA_SF  ScaleFactor `sunspec:"offset=26"`
	DCV     uint16      `sunspec:"offset=27,sf=DCV_SF"`
	DCV_SF  ScaleFactor `sunspec:"offset=28"`
	DCW     int16       `sunspec:"offset=29,sf=DCW_SF"`
	DCW_SF  ScaleFactor `sunspec:"offset=30"`
	TmpCab  int16       `sunspec:"offset=31,sf=Tmp_SF"`
	TmpSnk  int16       `sunspec:"offset=32,sf=Tmp_SF"`
	TmpTrns int16       `sunspec:"offset=33,sf=Tmp_SF"`
	TmpOt   int16       `sunspec:"offset=34,sf=Tmp_SF"`
	Tmp_SF  ScaleFactor `sunspec:"offset=35"`
	St      Enum16      `sunspec:"offset=36"`
	StVnd   Enum16      `sunspec:"offset=37"`
	Evt1    Bitfield32  `sunspec:"offset=38"`
	Evt2    Bitfield32  `sunspec:"offset=40"`
	EvtVnd1 Bitfield32  `sunspec:"offset=42"`
	EvtVnd2 Bitfield32  `sunspec:"offset=44"`
	EvtVnd3 Bitfield32  `sunspec:"offset=46"`
	EvtVnd4 Bitfield32  `sunspec:"offset=48"`
}

func (self *Block103) GetId() ModelId {
	return 103
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     103,
		Name:   "inverter",
		Length: 50,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 50,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 1, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 2, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 3, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "A_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "PPVphAB", Offset: 5, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphBC", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 7, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 9, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphC", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 11, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "W", Offset: 12, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "W_SF", Offset: 13, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 15, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 16, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VA_SF", Offset: 17, Type: "sunssf"},
					smdx.PointElement{Id: "VAr", Offset: 18, Type: "int16", ScaleFactor: "VAr_SF", Units: "var"},
					smdx.PointElement{Id: "VAr_SF", Offset: 19, Type: "sunssf"},
					smdx.PointElement{Id: "PF", Offset: 20, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PF_SF", Offset: 21, Type: "sunssf"},
					smdx.PointElement{Id: "WH", Offset: 22, Type: "acc32", ScaleFactor: "WH_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "WH_SF", Offset: 24, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DCA", Offset: 25, Type: "uint16", ScaleFactor: "DCA_SF", Units: "A"},
					smdx.PointElement{Id: "DCA_SF", Offset: 26, Type: "sunssf"},
					smdx.PointElement{Id: "DCV", Offset: 27, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "DCV_SF", Offset: 28, Type: "sunssf"},
					smdx.PointElement{Id: "DCW", Offset: 29, Type: "int16", ScaleFactor: "DCW_SF", Units: "W"},
					smdx.PointElement{Id: "DCW_SF", Offset: 30, Type: "sunssf"},
					smdx.PointElement{Id: "TmpCab", Offset: 31, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "TmpSnk", Offset: 32, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "TmpTrns", Offset: 33, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "TmpOt", Offset: 34, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "Tmp_SF", Offset: 35, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "St", Offset: 36, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StVnd", Offset: 37, Type: "enum16"},
					smdx.PointElement{Id: "Evt1", Offset: 38, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 40, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd1", Offset: 42, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd2", Offset: 44, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd3", Offset: 46, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd4", Offset: 48, Type: "bitfield32"},
				},
			},
		}})
}

// Block111 - Inverter (Single Phase) FLOAT - Include this model for single phase inverter monitoring using float values

type Block111 struct {
	A       float32    `sunspec:"offset=0"`
	AphA    float32    `sunspec:"offset=2"`
	AphB    float32    `sunspec:"offset=4"`
	AphC    float32    `sunspec:"offset=6"`
	PPVphAB float32    `sunspec:"offset=8"`
	PPVphBC float32    `sunspec:"offset=10"`
	PPVphCA float32    `sunspec:"offset=12"`
	PhVphA  float32    `sunspec:"offset=14"`
	PhVphB  float32    `sunspec:"offset=16"`
	PhVphC  float32    `sunspec:"offset=18"`
	W       float32    `sunspec:"offset=20"`
	Hz      float32    `sunspec:"offset=22"`
	VA      float32    `sunspec:"offset=24"`
	VAr     float32    `sunspec:"offset=26"`
	PF      float32    `sunspec:"offset=28"`
	WH      float32    `sunspec:"offset=30"`
	DCA     float32    `sunspec:"offset=32"`
	DCV     float32    `sunspec:"offset=34"`
	DCW     float32    `sunspec:"offset=36"`
	TmpCab  float32    `sunspec:"offset=38"`
	TmpSnk  float32    `sunspec:"offset=40"`
	TmpTrns float32    `sunspec:"offset=42"`
	TmpOt   float32    `sunspec:"offset=44"`
	St      Enum16     `sunspec:"offset=46"`
	StVnd   Enum16     `sunspec:"offset=47"`
	Evt1    Bitfield32 `sunspec:"offset=48"`
	Evt2    Bitfield32 `sunspec:"offset=50"`
	EvtVnd1 Bitfield32 `sunspec:"offset=52"`
	EvtVnd2 Bitfield32 `sunspec:"offset=54"`
	EvtVnd3 Bitfield32 `sunspec:"offset=56"`
	EvtVnd4 Bitfield32 `sunspec:"offset=58"`
}

func (self *Block111) GetId() ModelId {
	return 111
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     111,
		Name:   "inverter",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 60,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 2, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 4, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "AphC", Offset: 6, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "PPVphAB", Offset: 8, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphBC", Offset: 10, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 12, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 14, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 16, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphC", Offset: 18, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "W", Offset: 20, Type: "float32", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 22, Type: "float32", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 24, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAr", Offset: 26, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "PF", Offset: 28, Type: "float32", Units: "Pct"},
					smdx.PointElement{Id: "WH", Offset: 30, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "DCA", Offset: 32, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "DCV", Offset: 34, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "DCW", Offset: 36, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "TmpCab", Offset: 38, Type: "float32", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "TmpSnk", Offset: 40, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "TmpTrns", Offset: 42, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "TmpOt", Offset: 44, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "St", Offset: 46, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StVnd", Offset: 47, Type: "enum16"},
					smdx.PointElement{Id: "Evt1", Offset: 48, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 50, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd1", Offset: 52, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd2", Offset: 54, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd3", Offset: 56, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd4", Offset: 58, Type: "bitfield32"},
				},
			},
		}})
}

// Block112 - Inverter (Split Phase) FLOAT - Include this model for split phase inverter monitoring using float values

type Block112 struct {
	A       float32    `sunspec:"offset=0"`
	AphA    float32    `sunspec:"offset=2"`
	AphB    float32    `sunspec:"offset=4"`
	AphC    float32    `sunspec:"offset=6"`
	PPVphAB float32    `sunspec:"offset=8"`
	PPVphBC float32    `sunspec:"offset=10"`
	PPVphCA float32    `sunspec:"offset=12"`
	PhVphA  float32    `sunspec:"offset=14"`
	PhVphB  float32    `sunspec:"offset=16"`
	PhVphC  float32    `sunspec:"offset=18"`
	W       float32    `sunspec:"offset=20"`
	Hz      float32    `sunspec:"offset=22"`
	VA      float32    `sunspec:"offset=24"`
	VAr     float32    `sunspec:"offset=26"`
	PF      float32    `sunspec:"offset=28"`
	WH      float32    `sunspec:"offset=30"`
	DCA     float32    `sunspec:"offset=32"`
	DCV     float32    `sunspec:"offset=34"`
	DCW     float32    `sunspec:"offset=36"`
	TmpCab  float32    `sunspec:"offset=38"`
	TmpSnk  float32    `sunspec:"offset=40"`
	TmpTrns float32    `sunspec:"offset=42"`
	TmpOt   float32    `sunspec:"offset=44"`
	St      Enum16     `sunspec:"offset=46"`
	StVnd   Enum16     `sunspec:"offset=47"`
	Evt1    Bitfield32 `sunspec:"offset=48"`
	Evt2    Bitfield32 `sunspec:"offset=50"`
	EvtVnd1 Bitfield32 `sunspec:"offset=52"`
	EvtVnd2 Bitfield32 `sunspec:"offset=54"`
	EvtVnd3 Bitfield32 `sunspec:"offset=56"`
	EvtVnd4 Bitfield32 `sunspec:"offset=58"`
}

func (self *Block112) GetId() ModelId {
	return 112
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     112,
		Name:   "inverter",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 60,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 2, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 4, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 6, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "PPVphAB", Offset: 8, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphBC", Offset: 10, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 12, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 14, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 16, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphC", Offset: 18, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "W", Offset: 20, Type: "float32", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 22, Type: "float32", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 24, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAr", Offset: 26, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "PF", Offset: 28, Type: "float32", Units: "Pct"},
					smdx.PointElement{Id: "WH", Offset: 30, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "DCA", Offset: 32, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "DCV", Offset: 34, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "DCW", Offset: 36, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "TmpCab", Offset: 38, Type: "float32", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "TmpSnk", Offset: 40, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "TmpTrns", Offset: 42, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "TmpOt", Offset: 44, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "St", Offset: 46, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StVnd", Offset: 47, Type: "enum16"},
					smdx.PointElement{Id: "Evt1", Offset: 48, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 50, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd1", Offset: 52, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd2", Offset: 54, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd3", Offset: 56, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd4", Offset: 58, Type: "bitfield32"},
				},
			},
		}})
}

// Block113 - Inverter (Three Phase) FLOAT - Include this model for three phase inverter monitoring using float values

type Block113 struct {
	A       float32    `sunspec:"offset=0"`
	AphA    float32    `sunspec:"offset=2"`
	AphB    float32    `sunspec:"offset=4"`
	AphC    float32    `sunspec:"offset=6"`
	PPVphAB float32    `sunspec:"offset=8"`
	PPVphBC float32    `sunspec:"offset=10"`
	PPVphCA float32    `sunspec:"offset=12"`
	PhVphA  float32    `sunspec:"offset=14"`
	PhVphB  float32    `sunspec:"offset=16"`
	PhVphC  float32    `sunspec:"offset=18"`
	W       float32    `sunspec:"offset=20"`
	Hz      float32    `sunspec:"offset=22"`
	VA      float32    `sunspec:"offset=24"`
	VAr     float32    `sunspec:"offset=26"`
	PF      float32    `sunspec:"offset=28"`
	WH      float32    `sunspec:"offset=30"`
	DCA     float32    `sunspec:"offset=32"`
	DCV     float32    `sunspec:"offset=34"`
	DCW     float32    `sunspec:"offset=36"`
	TmpCab  float32    `sunspec:"offset=38"`
	TmpSnk  float32    `sunspec:"offset=40"`
	TmpTrns float32    `sunspec:"offset=42"`
	TmpOt   float32    `sunspec:"offset=44"`
	St      Enum16     `sunspec:"offset=46"`
	StVnd   Enum16     `sunspec:"offset=47"`
	Evt1    Bitfield32 `sunspec:"offset=48"`
	Evt2    Bitfield32 `sunspec:"offset=50"`
	EvtVnd1 Bitfield32 `sunspec:"offset=52"`
	EvtVnd2 Bitfield32 `sunspec:"offset=54"`
	EvtVnd3 Bitfield32 `sunspec:"offset=56"`
	EvtVnd4 Bitfield32 `sunspec:"offset=58"`
}

func (self *Block113) GetId() ModelId {
	return 113
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     113,
		Name:   "inverter",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 60,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 2, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 4, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 6, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "PPVphAB", Offset: 8, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphBC", Offset: 10, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 12, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 14, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 16, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphC", Offset: 18, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "W", Offset: 20, Type: "float32", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 22, Type: "float32", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 24, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAr", Offset: 26, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "PF", Offset: 28, Type: "float32", Units: "Pct"},
					smdx.PointElement{Id: "WH", Offset: 30, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "DCA", Offset: 32, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "DCV", Offset: 34, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "DCW", Offset: 36, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "TmpCab", Offset: 38, Type: "float32", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "TmpSnk", Offset: 40, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "TmpTrns", Offset: 42, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "TmpOt", Offset: 44, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "St", Offset: 46, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StVnd", Offset: 47, Type: "enum16"},
					smdx.PointElement{Id: "Evt1", Offset: 48, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 50, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd1", Offset: 52, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd2", Offset: 54, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd3", Offset: 56, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd4", Offset: 58, Type: "bitfield32"},
				},
			},
		}})
}

// Block120 - Nameplate - Inverter Controls Nameplate Ratings

type Block120 struct {
	DERTyp          Enum16      `sunspec:"offset=0,len=1,access=r"`
	WRtg            uint16      `sunspec:"offset=1,len=1,sf=WRtg_SF,access=r"`
	WRtg_SF         ScaleFactor `sunspec:"offset=2,len=1,access=r"`
	VARtg           uint16      `sunspec:"offset=3,len=1,sf=VARtg_SF,access=r"`
	VARtg_SF        ScaleFactor `sunspec:"offset=4,len=1,access=r"`
	VArRtgQ1        int16       `sunspec:"offset=5,len=1,sf=VArRtg_SF,access=r"`
	VArRtgQ2        int16       `sunspec:"offset=6,len=1,sf=VArRtg_SF,access=r"`
	VArRtgQ3        int16       `sunspec:"offset=7,len=1,sf=VArRtg_SF,access=r"`
	VArRtgQ4        int16       `sunspec:"offset=8,len=1,sf=VArRtg_SF,access=r"`
	VArRtg_SF       ScaleFactor `sunspec:"offset=9,len=1,access=r"`
	ARtg            uint16      `sunspec:"offset=10,len=1,sf=ARtg_SF,access=r"`
	ARtg_SF         ScaleFactor `sunspec:"offset=11,len=1,access=r"`
	PFRtgQ1         int16       `sunspec:"offset=12,len=1,sf=PFRtg_SF,access=r"`
	PFRtgQ2         int16       `sunspec:"offset=13,len=1,sf=PFRtg_SF,access=r"`
	PFRtgQ3         int16       `sunspec:"offset=14,len=1,sf=PFRtg_SF,access=r"`
	PFRtgQ4         int16       `sunspec:"offset=15,len=1,sf=PFRtg_SF,access=r"`
	PFRtg_SF        ScaleFactor `sunspec:"offset=16,len=1,access=r"`
	WHRtg           uint16      `sunspec:"offset=17,len=1,sf=WHRtg_SF,access=r"`
	WHRtg_SF        ScaleFactor `sunspec:"offset=18,len=1,access=r"`
	AhrRtg          uint16      `sunspec:"offset=19,len=1,sf=AhrRtg_SF,access=r"`
	AhrRtg_SF       ScaleFactor `sunspec:"offset=20,len=1,access=r"`
	MaxChaRte       uint16      `sunspec:"offset=21,len=1,sf=MaxChaRte_SF,access=r"`
	MaxChaRte_SF    ScaleFactor `sunspec:"offset=22,len=1,access=r"`
	MaxDisChaRte    uint16      `sunspec:"offset=23,len=1,sf=MaxDisChaRte_SF,access=r"`
	MaxDisChaRte_SF ScaleFactor `sunspec:"offset=24,len=1,access=r"`
	Pad             Pad         `sunspec:"offset=25,len=1,access=r"`
}

func (self *Block120) GetId() ModelId {
	return 120
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     120,
		Name:   "nameplate",
		Length: 26,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 26,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DERTyp", Offset: 0, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WRtg", Offset: 1, Type: "uint16", ScaleFactor: "WRtg_SF", Units: "W", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WRtg_SF", Offset: 2, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VARtg", Offset: 3, Type: "uint16", ScaleFactor: "VARtg_SF", Units: "VA", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VARtg_SF", Offset: 4, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VArRtgQ1", Offset: 5, Type: "int16", ScaleFactor: "VArRtg_SF", Units: "var", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VArRtgQ2", Offset: 6, Type: "int16", ScaleFactor: "VArRtg_SF", Units: "var", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VArRtgQ3", Offset: 7, Type: "int16", ScaleFactor: "VArRtg_SF", Units: "var", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VArRtgQ4", Offset: 8, Type: "int16", ScaleFactor: "VArRtg_SF", Units: "var", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VArRtg_SF", Offset: 9, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ARtg", Offset: 10, Type: "uint16", ScaleFactor: "ARtg_SF", Units: "A", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ARtg_SF", Offset: 11, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "PFRtgQ1", Offset: 12, Type: "int16", ScaleFactor: "PFRtg_SF", Units: "cos()", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "PFRtgQ2", Offset: 13, Type: "int16", ScaleFactor: "PFRtg_SF", Units: "cos()", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "PFRtgQ3", Offset: 14, Type: "int16", ScaleFactor: "PFRtg_SF", Units: "cos()", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "PFRtgQ4", Offset: 15, Type: "int16", ScaleFactor: "PFRtg_SF", Units: "cos()", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "PFRtg_SF", Offset: 16, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WHRtg", Offset: 17, Type: "uint16", ScaleFactor: "WHRtg_SF", Units: "Wh", Access: "r", Length: 1},
					smdx.PointElement{Id: "WHRtg_SF", Offset: 18, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "AhrRtg", Offset: 19, Type: "uint16", ScaleFactor: "AhrRtg_SF", Units: "AH", Access: "r", Length: 1},
					smdx.PointElement{Id: "AhrRtg_SF", Offset: 20, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "MaxChaRte", Offset: 21, Type: "uint16", ScaleFactor: "MaxChaRte_SF", Units: "W", Access: "r", Length: 1},
					smdx.PointElement{Id: "MaxChaRte_SF", Offset: 22, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "MaxDisChaRte", Offset: 23, Type: "uint16", ScaleFactor: "MaxDisChaRte_SF", Units: "W", Access: "r", Length: 1},
					smdx.PointElement{Id: "MaxDisChaRte_SF", Offset: 24, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "Pad", Offset: 25, Type: "pad", Access: "r", Length: 1},
				},
			},
		}})
}

// Block121 - Basic Settings - Inverter Controls Basic Settings

type Block121 struct {
	WMax         uint16      `sunspec:"offset=0,len=1,sf=WMax_SF,access=rw"`
	VRef         uint16      `sunspec:"offset=1,len=1,sf=VRef_SF,access=rw"`
	VRefOfs      int16       `sunspec:"offset=2,len=1,sf=VRefOfs_SF,access=rw"`
	VMax         uint16      `sunspec:"offset=3,len=1,sf=VMinMax_SF,access=rw"`
	VMin         uint16      `sunspec:"offset=4,len=1,sf=VMinMax_SF,access=rw"`
	VAMax        uint16      `sunspec:"offset=5,len=1,sf=VAMax_SF,access=rw"`
	VArMaxQ1     int16       `sunspec:"offset=6,len=1,sf=VArMax_SF,access=rw"`
	VArMaxQ2     int16       `sunspec:"offset=7,len=1,sf=VArMax_SF,access=rw"`
	VArMaxQ3     int16       `sunspec:"offset=8,len=1,sf=VArMax_SF,access=rw"`
	VArMaxQ4     int16       `sunspec:"offset=9,len=1,sf=VArMax_SF,access=rw"`
	WGra         uint16      `sunspec:"offset=10,len=1,sf=WGra_SF,access=rw"`
	PFMinQ1      int16       `sunspec:"offset=11,len=1,sf=PFMin_SF,access=rw"`
	PFMinQ2      int16       `sunspec:"offset=12,len=1,sf=PFMin_SF,access=rw"`
	PFMinQ3      int16       `sunspec:"offset=13,len=1,sf=PFMin_SF,access=rw"`
	PFMinQ4      int16       `sunspec:"offset=14,len=1,sf=PFMin_SF,access=rw"`
	VArAct       Enum16      `sunspec:"offset=15,len=1,access=rw"`
	ClcTotVA     Enum16      `sunspec:"offset=16,len=1,access=rw"`
	MaxRmpRte    uint16      `sunspec:"offset=17,len=1,sf=MaxRmpRte_SF,access=rw"`
	ECPNomHz     uint16      `sunspec:"offset=18,len=1,sf=ECPNomHz_SF,access=rw"`
	ConnPh       Enum16      `sunspec:"offset=19,len=1,access=rw"`
	WMax_SF      ScaleFactor `sunspec:"offset=20,len=1,access=r"`
	VRef_SF      ScaleFactor `sunspec:"offset=21,len=1,access=r"`
	VRefOfs_SF   ScaleFactor `sunspec:"offset=22,len=1,access=r"`
	VMinMax_SF   ScaleFactor `sunspec:"offset=23,len=1,access=r"`
	VAMax_SF     ScaleFactor `sunspec:"offset=24,len=1,access=r"`
	VArMax_SF    ScaleFactor `sunspec:"offset=25,len=1,access=r"`
	WGra_SF      ScaleFactor `sunspec:"offset=26,len=1,access=r"`
	PFMin_SF     ScaleFactor `sunspec:"offset=27,len=1,access=r"`
	MaxRmpRte_SF ScaleFactor `sunspec:"offset=28,len=1,access=r"`
	ECPNomHz_SF  ScaleFactor `sunspec:"offset=29,len=1,access=r"`
}

func (self *Block121) GetId() ModelId {
	return 121
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     121,
		Name:   "settings",
		Length: 30,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 30,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "WMax", Offset: 0, Type: "uint16", ScaleFactor: "WMax_SF", Units: "W", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VRef", Offset: 1, Type: "uint16", ScaleFactor: "VRef_SF", Units: "V", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VRefOfs", Offset: 2, Type: "int16", ScaleFactor: "VRefOfs_SF", Units: "V", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VMax", Offset: 3, Type: "uint16", ScaleFactor: "VMinMax_SF", Units: "V", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VMin", Offset: 4, Type: "uint16", ScaleFactor: "VMinMax_SF", Units: "V", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAMax", Offset: 5, Type: "uint16", ScaleFactor: "VAMax_SF", Units: "VA", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArMaxQ1", Offset: 6, Type: "int16", ScaleFactor: "VArMax_SF", Units: "var", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArMaxQ2", Offset: 7, Type: "int16", ScaleFactor: "VArMax_SF", Units: "var", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArMaxQ3", Offset: 8, Type: "int16", ScaleFactor: "VArMax_SF", Units: "var", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArMaxQ4", Offset: 9, Type: "int16", ScaleFactor: "VArMax_SF", Units: "var", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WGra", Offset: 10, Type: "uint16", ScaleFactor: "WGra_SF", Units: "% WMax/sec", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PFMinQ1", Offset: 11, Type: "int16", ScaleFactor: "PFMin_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PFMinQ2", Offset: 12, Type: "int16", ScaleFactor: "PFMin_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PFMinQ3", Offset: 13, Type: "int16", ScaleFactor: "PFMin_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PFMinQ4", Offset: 14, Type: "int16", ScaleFactor: "PFMin_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArAct", Offset: 15, Type: "enum16", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ClcTotVA", Offset: 16, Type: "enum16", Access: "rw", Length: 1},
					smdx.PointElement{Id: "MaxRmpRte", Offset: 17, Type: "uint16", ScaleFactor: "MaxRmpRte_SF", Units: "% WGra", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ECPNomHz", Offset: 18, Type: "uint16", ScaleFactor: "ECPNomHz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ConnPh", Offset: 19, Type: "enum16", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WMax_SF", Offset: 20, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VRef_SF", Offset: 21, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VRefOfs_SF", Offset: 22, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VMinMax_SF", Offset: 23, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "VAMax_SF", Offset: 24, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "VArMax_SF", Offset: 25, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "WGra_SF", Offset: 26, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "PFMin_SF", Offset: 27, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "MaxRmpRte_SF", Offset: 28, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "ECPNomHz_SF", Offset: 29, Type: "sunssf", Access: "r", Length: 1},
				},
			},
		}})
}

// Block122 - Measurements_Status - Inverter Controls Extended Measurements and Status

type Block122 struct {
	PVConn      Bitfield16  `sunspec:"offset=0,len=1,access=r"`
	StorConn    Bitfield16  `sunspec:"offset=1,len=1,access=r"`
	ECPConn     Bitfield16  `sunspec:"offset=2,len=1,access=r"`
	ActWh       Acc64       `sunspec:"offset=3,len=4,access=r"`
	ActVAh      Acc64       `sunspec:"offset=7,len=4,access=r"`
	ActVArhQ1   Acc64       `sunspec:"offset=11,len=4,access=r"`
	ActVArhQ2   Acc64       `sunspec:"offset=15,len=4,access=r"`
	ActVArhQ3   Acc64       `sunspec:"offset=19,len=4,access=r"`
	ActVArhQ4   Acc64       `sunspec:"offset=23,len=4,access=r"`
	VArAval     int16       `sunspec:"offset=27,len=1,sf=VArAval_SF,access=r"`
	VArAval_SF  ScaleFactor `sunspec:"offset=28,len=1,access=r"`
	WAval       uint16      `sunspec:"offset=29,len=1,sf=WAval_SF,access=r"`
	WAval_SF    ScaleFactor `sunspec:"offset=30,len=1,access=r"`
	StSetLimMsk Bitfield32  `sunspec:"offset=31,len=2,access=r"`
	StActCtl    Bitfield32  `sunspec:"offset=33,len=2,access=r"`
	TmSrc       String      `sunspec:"offset=35,len=4,access=r"`
	Tms         uint32      `sunspec:"offset=39,len=2,access=r"`
	RtSt        Bitfield16  `sunspec:"offset=41,len=1,access=r"`
	Ris         uint16      `sunspec:"offset=42,len=1,sf=Ris_SF,access=r"`
	Ris_SF      ScaleFactor `sunspec:"offset=43,len=1,access=r"`
}

func (self *Block122) GetId() ModelId {
	return 122
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     122,
		Name:   "status",
		Length: 44,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 44,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "PVConn", Offset: 0, Type: "bitfield16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "StorConn", Offset: 1, Type: "bitfield16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ECPConn", Offset: 2, Type: "bitfield16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ActWh", Offset: 3, Type: "acc64", Units: "Wh", Access: "r", Length: 4},
					smdx.PointElement{Id: "ActVAh", Offset: 7, Type: "acc64", Units: "VAh", Access: "r", Length: 4},
					smdx.PointElement{Id: "ActVArhQ1", Offset: 11, Type: "acc64", Units: "varh", Access: "r", Length: 4},
					smdx.PointElement{Id: "ActVArhQ2", Offset: 15, Type: "acc64", Units: "varh", Access: "r", Length: 4},
					smdx.PointElement{Id: "ActVArhQ3", Offset: 19, Type: "acc64", Units: "varh", Access: "r", Length: 4},
					smdx.PointElement{Id: "ActVArhQ4", Offset: 23, Type: "acc64", Units: "varh", Access: "r", Length: 4},
					smdx.PointElement{Id: "VArAval", Offset: 27, Type: "int16", ScaleFactor: "VArAval_SF", Units: "var", Access: "r", Length: 1},
					smdx.PointElement{Id: "VArAval_SF", Offset: 28, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "WAval", Offset: 29, Type: "uint16", ScaleFactor: "WAval_SF", Units: "var", Access: "r", Length: 1},
					smdx.PointElement{Id: "WAval_SF", Offset: 30, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "StSetLimMsk", Offset: 31, Type: "bitfield32", Access: "r", Length: 2},
					smdx.PointElement{Id: "StActCtl", Offset: 33, Type: "bitfield32", Access: "r", Length: 2},
					smdx.PointElement{Id: "TmSrc", Offset: 35, Type: "string", Access: "r", Length: 4},
					smdx.PointElement{Id: "Tms", Offset: 39, Type: "uint32", Units: "Secs", Access: "r", Length: 2},
					smdx.PointElement{Id: "RtSt", Offset: 41, Type: "bitfield16", Access: "r", Length: 1},
					smdx.PointElement{Id: "Ris", Offset: 42, Type: "uint16", ScaleFactor: "Ris_SF", Units: "ohms", Access: "r", Length: 1},
					smdx.PointElement{Id: "Ris_SF", Offset: 43, Type: "sunssf", Access: "r", Length: 1},
				},
			},
		}})
}

// Block123 - Immediate Controls - Immediate Inverter Controls

type Block123 struct {
	Conn_WinTms        uint16      `sunspec:"offset=0,len=1,access=rw"`
	Conn_RvrtTms       uint16      `sunspec:"offset=1,len=1,access=rw"`
	Conn               Enum16      `sunspec:"offset=2,len=1,access=rw"`
	WMaxLimPct         uint16      `sunspec:"offset=3,len=1,sf=WMaxLimPct_SF,access=rw"`
	WMaxLimPct_WinTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	WMaxLimPct_RvrtTms uint16      `sunspec:"offset=5,len=1,access=rw"`
	WMaxLimPct_RmpTms  uint16      `sunspec:"offset=6,len=1,access=rw"`
	WMaxLim_Ena        Enum16      `sunspec:"offset=7,len=1,access=rw"`
	OutPFSet           int16       `sunspec:"offset=8,len=1,sf=OutPFSet_SF,access=rw"`
	OutPFSet_WinTms    uint16      `sunspec:"offset=9,len=1,access=rw"`
	OutPFSet_RvrtTms   uint16      `sunspec:"offset=10,len=1,access=rw"`
	OutPFSet_RmpTms    uint16      `sunspec:"offset=11,len=1,access=rw"`
	OutPFSet_Ena       Enum16      `sunspec:"offset=12,len=1,access=rw"`
	VArWMaxPct         int16       `sunspec:"offset=13,len=1,sf=VArPct_SF,access=rw"`
	VArMaxPct          int16       `sunspec:"offset=14,len=1,sf=VArPct_SF,access=rw"`
	VArAvalPct         int16       `sunspec:"offset=15,len=1,sf=VArPct_SF,access=rw"`
	VArPct_WinTms      uint16      `sunspec:"offset=16,len=1,access=rw"`
	VArPct_RvrtTms     uint16      `sunspec:"offset=17,len=1,access=rw"`
	VArPct_RmpTms      uint16      `sunspec:"offset=18,len=1,access=rw"`
	VArPct_Mod         Enum16      `sunspec:"offset=19,len=1,access=rw"`
	VArPct_Ena         Enum16      `sunspec:"offset=20,len=1,access=rw"`
	WMaxLimPct_SF      ScaleFactor `sunspec:"offset=21,len=1,access=r"`
	OutPFSet_SF        ScaleFactor `sunspec:"offset=22,len=1,access=r"`
	VArPct_SF          ScaleFactor `sunspec:"offset=23,len=1,access=r"`
}

func (self *Block123) GetId() ModelId {
	return 123
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     123,
		Name:   "controls",
		Length: 24,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 24,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Conn_WinTms", Offset: 0, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Conn_RvrtTms", Offset: 1, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Conn", Offset: 2, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WMaxLimPct", Offset: 3, Type: "uint16", ScaleFactor: "WMaxLimPct_SF", Units: "% WMax", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WMaxLimPct_WinTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WMaxLimPct_RvrtTms", Offset: 5, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WMaxLimPct_RmpTms", Offset: 6, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WMaxLim_Ena", Offset: 7, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "OutPFSet", Offset: 8, Type: "int16", ScaleFactor: "OutPFSet_SF", Units: "cos()", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "OutPFSet_WinTms", Offset: 9, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "OutPFSet_RvrtTms", Offset: 10, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "OutPFSet_RmpTms", Offset: 11, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "OutPFSet_Ena", Offset: 12, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VArWMaxPct", Offset: 13, Type: "int16", ScaleFactor: "VArPct_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArMaxPct", Offset: 14, Type: "int16", ScaleFactor: "VArPct_SF", Units: "% VArMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArAvalPct", Offset: 15, Type: "int16", ScaleFactor: "VArPct_SF", Units: "% VArAval", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArPct_WinTms", Offset: 16, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArPct_RvrtTms", Offset: 17, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArPct_RmpTms", Offset: 18, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArPct_Mod", Offset: 19, Type: "enum16", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VArPct_Ena", Offset: 20, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WMaxLimPct_SF", Offset: 21, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "OutPFSet_SF", Offset: 22, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VArPct_SF", Offset: 23, Type: "sunssf", Access: "r", Length: 1},
				},
			},
		}})
}

// Block124 - Storage - Basic Storage Controls

type Block124 struct {
	WChaMax           uint16      `sunspec:"offset=0,len=1,sf=WChaMax_SF,access=rw"`
	WChaGra           uint16      `sunspec:"offset=1,len=1,sf=WChaDisChaGra_SF,access=rw"`
	WDisChaGra        uint16      `sunspec:"offset=2,len=1,sf=WChaDisChaGra_SF,access=rw"`
	StorCtl_Mod       Bitfield16  `sunspec:"offset=3,len=1,access=rw"`
	VAChaMax          uint16      `sunspec:"offset=4,len=1,sf=VAChaMax_SF,access=rw"`
	MinRsvPct         uint16      `sunspec:"offset=5,len=1,sf=MinRsvPct_SF,access=rw"`
	ChaState          uint16      `sunspec:"offset=6,len=1,sf=ChaState_SF,access=r"`
	StorAval          uint16      `sunspec:"offset=7,len=1,sf=StorAval_SF,access=r"`
	InBatV            uint16      `sunspec:"offset=8,len=1,sf=InBatV_SF,access=r"`
	ChaSt             Enum16      `sunspec:"offset=9,len=1,access=r"`
	OutWRte           int16       `sunspec:"offset=10,len=1,sf=InOutWRte_SF,access=rw"`
	InWRte            int16       `sunspec:"offset=11,len=1,sf=InOutWRte_SF,access=rw"`
	InOutWRte_WinTms  uint16      `sunspec:"offset=12,len=1,access=rw"`
	InOutWRte_RvrtTms uint16      `sunspec:"offset=13,len=1,access=rw"`
	InOutWRte_RmpTms  uint16      `sunspec:"offset=14,len=1,access=rw"`
	ChaGriSet         Enum16      `sunspec:"offset=15,len=1,access=rw"`
	WChaMax_SF        ScaleFactor `sunspec:"offset=16,len=1,access=r"`
	WChaDisChaGra_SF  ScaleFactor `sunspec:"offset=17,len=1,access=r"`
	VAChaMax_SF       ScaleFactor `sunspec:"offset=18,len=1,access=r"`
	MinRsvPct_SF      ScaleFactor `sunspec:"offset=19,len=1,access=r"`
	ChaState_SF       ScaleFactor `sunspec:"offset=20,len=1,access=r"`
	StorAval_SF       ScaleFactor `sunspec:"offset=21,len=1,access=r"`
	InBatV_SF         ScaleFactor `sunspec:"offset=22,len=1,access=r"`
	InOutWRte_SF      ScaleFactor `sunspec:"offset=23,len=1,access=r"`
}

func (self *Block124) GetId() ModelId {
	return 124
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     124,
		Name:   "storage",
		Length: 24,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 24,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "WChaMax", Offset: 0, Type: "uint16", ScaleFactor: "WChaMax_SF", Units: "W", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WChaGra", Offset: 1, Type: "uint16", ScaleFactor: "WChaDisChaGra_SF", Units: "% WChaMax/sec", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WDisChaGra", Offset: 2, Type: "uint16", ScaleFactor: "WChaDisChaGra_SF", Units: "% WChaMax/sec", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "StorCtl_Mod", Offset: 3, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VAChaMax", Offset: 4, Type: "uint16", ScaleFactor: "VAChaMax_SF", Units: "VA", Access: "rw", Length: 1},
					smdx.PointElement{Id: "MinRsvPct", Offset: 5, Type: "uint16", ScaleFactor: "MinRsvPct_SF", Units: "% WChaMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ChaState", Offset: 6, Type: "uint16", ScaleFactor: "ChaState_SF", Units: "% AhrRtg", Access: "r", Length: 1},
					smdx.PointElement{Id: "StorAval", Offset: 7, Type: "uint16", ScaleFactor: "StorAval_SF", Units: "AH", Access: "r", Length: 1},
					smdx.PointElement{Id: "InBatV", Offset: 8, Type: "uint16", ScaleFactor: "InBatV_SF", Units: "V", Access: "r", Length: 1},
					smdx.PointElement{Id: "ChaSt", Offset: 9, Type: "enum16", Access: "r", Length: 1},
					smdx.PointElement{Id: "OutWRte", Offset: 10, Type: "int16", ScaleFactor: "InOutWRte_SF", Units: "% WDisChaMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "InWRte", Offset: 11, Type: "int16", ScaleFactor: "InOutWRte_SF", Units: " % WChaMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "InOutWRte_WinTms", Offset: 12, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "InOutWRte_RvrtTms", Offset: 13, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "InOutWRte_RmpTms", Offset: 14, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ChaGriSet", Offset: 15, Type: "enum16", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WChaMax_SF", Offset: 16, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WChaDisChaGra_SF", Offset: 17, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VAChaMax_SF", Offset: 18, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "MinRsvPct_SF", Offset: 19, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "ChaState_SF", Offset: 20, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "StorAval_SF", Offset: 21, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "InBatV_SF", Offset: 22, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "InOutWRte_SF", Offset: 23, Type: "sunssf", Access: "r", Length: 1},
				},
			},
		}})
}

// Block125 - Pricing - Pricing Signal

type Block125 struct {
	ModEna  Bitfield16  `sunspec:"offset=0,len=1,access=rw"`
	SigType Enum16      `sunspec:"offset=1,len=1,sf= ,access=rw"`
	Sig     int16       `sunspec:"offset=2,len=1,sf=Sig_SF,access=rw"`
	WinTms  uint16      `sunspec:"offset=3,len=1,access=rw"`
	RvtTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=5,len=1,access=rw"`
	Sig_SF  ScaleFactor `sunspec:"offset=6,len=1,sf= ,access=r"`
	Pad     Pad         `sunspec:"offset=7,len=1,access=r"`
}

func (self *Block125) GetId() ModelId {
	return 125
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     125,
		Name:   "pricing",
		Length: 8,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 8,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ModEna", Offset: 0, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "SigType", Offset: 1, Type: "enum16", ScaleFactor: " ", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Sig", Offset: 2, Type: "int16", ScaleFactor: "Sig_SF", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvtTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 5, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Sig_SF", Offset: 6, Type: "sunssf", ScaleFactor: " ", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 7, Type: "pad", Access: "r", Length: 1},
				},
			},
		}})
}

// Block126 - Static Volt-VAR - Static Volt-VAR Arrays

type Block126Repeat struct {
	ActPt     uint16 `sunspec:"offset=0,len=1,access=rw"`
	DeptRef   Enum16 `sunspec:"offset=1,len=1,access=rw"`
	V1        uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	VAr1      int16  `sunspec:"offset=3,len=1,sf=DeptRef_SF,access=rw"`
	V2        uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	VAr2      int16  `sunspec:"offset=5,len=1,sf=DeptRef_SF,access=rw"`
	V3        uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	VAr3      int16  `sunspec:"offset=7,len=1,sf=DeptRef_SF,access=rw"`
	V4        uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	VAr4      int16  `sunspec:"offset=9,len=1,sf=DeptRef_SF,access=rw"`
	V5        uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	VAr5      int16  `sunspec:"offset=11,len=1,sf=DeptRef_SF,access=rw"`
	V6        uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	VAr6      int16  `sunspec:"offset=13,len=1,sf=DeptRef_SF,access=rw"`
	V7        uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	VAr7      int16  `sunspec:"offset=15,len=1,sf=DeptRef_SF,access=rw"`
	V8        uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	VAr8      int16  `sunspec:"offset=17,len=1,sf=DeptRef_SF,access=rw"`
	V9        uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	VAr9      int16  `sunspec:"offset=19,len=1,sf=DeptRef_SF,access=rw"`
	V10       uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	VAr10     int16  `sunspec:"offset=21,len=1,sf=DeptRef_SF,access=rw"`
	V11       uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	VAr11     int16  `sunspec:"offset=23,len=1,sf=DeptRef_SF,access=rw"`
	V12       uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	VAr12     int16  `sunspec:"offset=25,len=1,sf=DeptRef_SF,access=rw"`
	V13       uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	VAr13     int16  `sunspec:"offset=27,len=1,sf=DeptRef_SF,access=rw"`
	V14       uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	VAr14     int16  `sunspec:"offset=29,len=1,sf=DeptRef_SF,access=rw"`
	V15       uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	VAr15     int16  `sunspec:"offset=31,len=1,sf=DeptRef_SF,access=rw"`
	V16       uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	VAr16     int16  `sunspec:"offset=33,len=1,sf=DeptRef_SF,access=rw"`
	V17       uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	VAr17     int16  `sunspec:"offset=35,len=1,sf=DeptRef_SF,access=rw"`
	V18       uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	VAr18     int16  `sunspec:"offset=37,len=1,sf=DeptRef_SF,access=rw"`
	V19       uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	VAr19     int16  `sunspec:"offset=39,len=1,sf=DeptRef_SF,access=rw"`
	V20       uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	VAr20     int16  `sunspec:"offset=41,len=1,sf=DeptRef_SF,access=rw"`
	CrvNam    String `sunspec:"offset=42,len=8,access=rw"`
	RmpTms    uint16 `sunspec:"offset=50,len=1,access=rw"`
	RmpDecTmm uint16 `sunspec:"offset=51,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpIncTmm uint16 `sunspec:"offset=52,len=1,sf=RmpIncDec_SF,access=rw"`
	ReadOnly  Enum16 `sunspec:"offset=53,len=1,access=r"`
}

type Block126 struct {
	ActCrv       uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms       uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms      uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms       uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv         uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt          uint16      `sunspec:"offset=6,len=1,access=r"`
	V_SF         ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	DeptRef_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block126Repeat
}

func (self *Block126) GetId() ModelId {
	return 126
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     126,
		Name:   "volt_var",
		Length: 64,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "DeptRef_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "RmpIncDec_SF", Offset: 9, Type: "sunssf", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 54,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "DeptRef", Offset: 1, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V1", Offset: 2, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VAr1", Offset: 3, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V2", Offset: 4, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr2", Offset: 5, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V3", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr3", Offset: 7, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "Various", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V4", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr4", Offset: 9, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V5", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr5", Offset: 11, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V6", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr6", Offset: 13, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V7", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr7", Offset: 15, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V8", Offset: 16, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr8", Offset: 17, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V9", Offset: 18, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr9", Offset: 19, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V10", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr10", Offset: 21, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V11", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr11", Offset: 23, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V12", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr12", Offset: 25, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V13", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr13", Offset: 27, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V14", Offset: 28, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr14", Offset: 29, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V15", Offset: 30, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr15", Offset: 31, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V16", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr16", Offset: 33, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V17", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr17", Offset: 35, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V18", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr18", Offset: 37, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V19", Offset: 38, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr19", Offset: 39, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V20", Offset: 40, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "VAr20", Offset: 41, Type: "int16", ScaleFactor: "DeptRef_SF", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 42, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "RmpTms", Offset: 50, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpDecTmm", Offset: 51, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% ref_value/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpIncTmm", Offset: 52, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% ref_value/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ReadOnly", Offset: 53, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block127 - Freq-Watt Param - Parameterized Frequency-Watt

type Block127 struct {
	WGra         uint16      `sunspec:"offset=0,len=1,sf=WGra_SF,access=rw"`
	HzStr        int16       `sunspec:"offset=1,len=1,sf=HzStrStop_SF,access=rw"`
	HzStop       int16       `sunspec:"offset=2,len=1,sf=HzStrStop_SF,access=rw"`
	HysEna       Bitfield16  `sunspec:"offset=3,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=4,len=1,access=rw"`
	HzStopWGra   uint16      `sunspec:"offset=5,len=1,sf=RmpIncDec_SF,access=rw"`
	WGra_SF      ScaleFactor `sunspec:"offset=6,len=1,access=r"`
	HzStrStop_SF ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad          Pad         `sunspec:"offset=9,len=1,access=r"`
}

func (self *Block127) GetId() ModelId {
	return 127
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     127,
		Name:   "freq_watt_param",
		Length: 10,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "WGra", Offset: 0, Type: "uint16", ScaleFactor: "WGra_SF", Units: "% PM/Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "HzStr", Offset: 1, Type: "int16", ScaleFactor: "HzStrStop_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "HzStop", Offset: 2, Type: "int16", ScaleFactor: "HzStrStop_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "HysEna", Offset: 3, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 4, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "HzStopWGra", Offset: 5, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% WMax/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WGra_SF", Offset: 6, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "HzStrStop_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "RmpIncDec_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
		}})
}

// Block128 - Dynamic Reactive Current - Dynamic Reactive Current

type Block128 struct {
	ArGraMod   Enum16      `sunspec:"offset=0,len=1,access=rw"`
	ArGraSag   uint16      `sunspec:"offset=1,len=1,sf=ArGra_SF,access=rw"`
	ArGraSwell uint16      `sunspec:"offset=2,len=1,sf=ArGra_SF,access=rw"`
	ModEna     Bitfield16  `sunspec:"offset=3,len=1,access=rw"`
	FilTms     uint16      `sunspec:"offset=4,len=1,access=rw"`
	DbVMin     uint16      `sunspec:"offset=5,len=1,sf=VRefPct_SF,access=rw"`
	DbVMax     uint16      `sunspec:"offset=6,len=1,sf=VRefPct_SF,access=rw"`
	BlkZnV     uint16      `sunspec:"offset=7,len=1,sf=VRefPct_SF,access=rw"`
	HysBlkZnV  uint16      `sunspec:"offset=8,len=1,sf=VRefPct_SF,access=rw"`
	BlkZnTmms  uint16      `sunspec:"offset=9,len=1,access=rw"`
	HoldTmms   uint16      `sunspec:"offset=10,len=1,access=rw"`
	ArGra_SF   ScaleFactor `sunspec:"offset=11,len=1,access=r"`
	VRefPct_SF ScaleFactor `sunspec:"offset=12,len=1,access=r"`
	Pad        Pad         `sunspec:"offset=13,len=1,access=r"`
}

func (self *Block128) GetId() ModelId {
	return 128
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     128,
		Name:   "reactive_current",
		Length: 14,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 14,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ArGraMod", Offset: 0, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ArGraSag", Offset: 1, Type: "uint16", ScaleFactor: "ArGra_SF", Units: "%ARtg/%dV", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ArGraSwell", Offset: 2, Type: "uint16", ScaleFactor: "ArGra_SF", Units: "%ARtg/%dV", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 3, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "FilTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "DbVMin", Offset: 5, Type: "uint16", ScaleFactor: "VRefPct_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "DbVMax", Offset: 6, Type: "uint16", ScaleFactor: "VRefPct_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "BlkZnV", Offset: 7, Type: "uint16", ScaleFactor: "VRefPct_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "HysBlkZnV", Offset: 8, Type: "uint16", ScaleFactor: "VRefPct_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "BlkZnTmms", Offset: 9, Type: "uint16", Units: "mSecs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "HoldTmms", Offset: 10, Type: "uint16", Units: "mSecs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ArGra_SF", Offset: 11, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "VRefPct_SF", Offset: 12, Type: "sunssf", Access: "r", Length: 1},
					smdx.PointElement{Id: "Pad", Offset: 13, Type: "pad", Access: "r", Length: 1},
				},
			},
		}})
}

// Block129 - LVRTD - LVRT Must Disconnect

type Block129Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block129 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block129Repeat
}

func (self *Block129) GetId() ModelId {
	return 129
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     129,
		Name:   "lvrt",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V1", Offset: 2, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V2", Offset: 4, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V3", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V4", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V5", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V6", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V7", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V8", Offset: 16, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V9", Offset: 18, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V10", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V11", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V12", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V13", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V14", Offset: 28, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V15", Offset: 30, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V16", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V17", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V18", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V19", Offset: 38, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V20", Offset: 40, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block130 - HVRTD - HVRT Must Disconnect

type Block130Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block130 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block130Repeat
}

func (self *Block130) GetId() ModelId {
	return 130
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     130,
		Name:   "hvrt",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V1", Offset: 2, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V2", Offset: 4, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V3", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V4", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V5", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V6", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V7", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V8", Offset: 16, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V9", Offset: 18, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V10", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V11", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V12", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V13", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V14", Offset: 28, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V15", Offset: 30, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V16", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V17", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V18", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V19", Offset: 38, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V20", Offset: 40, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block131 - Watt-PF - Watt-Power Factor

type Block131Repeat struct {
	ActPt     uint16 `sunspec:"offset=0,len=1,access=rw"`
	W1        int16  `sunspec:"offset=1,len=1,sf=W_SF,access=rw"`
	PF1       int16  `sunspec:"offset=2,len=1,sf=PF_SF,access=rw"`
	W2        int16  `sunspec:"offset=3,len=1,sf=W_SF,access=rw"`
	PF2       int16  `sunspec:"offset=4,len=1,sf=PF_SF,access=rw"`
	W3        int16  `sunspec:"offset=5,len=1,sf=W_SF,access=rw"`
	PF3       int16  `sunspec:"offset=6,len=1,sf=PF_SF,access=rw"`
	W4        int16  `sunspec:"offset=7,len=1,sf=W_SF,access=rw"`
	PF4       int16  `sunspec:"offset=8,len=1,sf=PF_SF,access=rw"`
	W5        int16  `sunspec:"offset=9,len=1,sf=W_SF,access=rw"`
	PF5       int16  `sunspec:"offset=10,len=1,sf=PF_SF,access=rw"`
	W6        int16  `sunspec:"offset=11,len=1,sf=W_SF,access=rw"`
	PF6       int16  `sunspec:"offset=12,len=1,sf=PF_SF,access=rw"`
	W7        int16  `sunspec:"offset=13,len=1,sf=W_SF,access=rw"`
	PF7       int16  `sunspec:"offset=14,len=1,sf=PF_SF,access=rw"`
	W8        int16  `sunspec:"offset=15,len=1,sf=W_SF,access=rw"`
	PF8       int16  `sunspec:"offset=16,len=1,sf=PF_SF,access=rw"`
	W9        int16  `sunspec:"offset=17,len=1,sf=W_SF,access=rw"`
	PF9       int16  `sunspec:"offset=18,len=1,sf=PF_SF,access=rw"`
	W10       int16  `sunspec:"offset=19,len=1,sf=W_SF,access=rw"`
	PF10      int16  `sunspec:"offset=20,len=1,sf=PF_SF,access=rw"`
	W11       int16  `sunspec:"offset=21,len=1,sf=W_SF,access=rw"`
	PF11      int16  `sunspec:"offset=22,len=1,sf=PF_SF,access=rw"`
	W12       int16  `sunspec:"offset=23,len=1,sf=W_SF,access=rw"`
	PF12      int16  `sunspec:"offset=24,len=1,sf=PF_SF,access=rw"`
	W13       int16  `sunspec:"offset=25,len=1,sf=W_SF,access=rw"`
	PF13      int16  `sunspec:"offset=26,len=1,sf=PF_SF,access=rw"`
	W14       int16  `sunspec:"offset=27,len=1,sf=W_SF,access=rw"`
	PF14      int16  `sunspec:"offset=28,len=1,sf=PF_SF,access=rw"`
	W15       int16  `sunspec:"offset=29,len=1,sf=W_SF,access=rw"`
	PF15      int16  `sunspec:"offset=30,len=1,sf=PF_SF,access=rw"`
	W16       int16  `sunspec:"offset=31,len=1,sf=W_SF,access=rw"`
	PF16      int16  `sunspec:"offset=32,len=1,sf=PF_SF,access=rw"`
	W17       int16  `sunspec:"offset=33,len=1,sf=W_SF,access=rw"`
	PF17      int16  `sunspec:"offset=34,len=1,sf=PF_SF,access=rw"`
	W18       int16  `sunspec:"offset=35,len=1,sf=W_SF,access=rw"`
	PF18      int16  `sunspec:"offset=36,len=1,sf=PF_SF,access=rw"`
	W19       int16  `sunspec:"offset=37,len=1,sf=W_SF,access=rw"`
	PF19      int16  `sunspec:"offset=38,len=1,sf=PF_SF,access=rw"`
	W20       int16  `sunspec:"offset=39,len=1,sf=W_SF,access=rw"`
	PF20      int16  `sunspec:"offset=40,len=1,sf=PF_SF,access=rw"`
	CrvNam    String `sunspec:"offset=41,len=8,access=rw"`
	RmpPT1Tms uint16 `sunspec:"offset=49,len=1,access=rw"`
	RmpDecTmm uint16 `sunspec:"offset=50,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpIncTmm uint16 `sunspec:"offset=51,len=1,sf=RmpIncDec_SF,access=rw"`
	ReadOnly  Enum16 `sunspec:"offset=52,len=1,access=r"`
	Pad       Pad    `sunspec:"offset=53,len=1,access=r"`
}

type Block131 struct {
	ActCrv       uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms       uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms      uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms       uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv         uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt          uint16      `sunspec:"offset=6,len=1,access=r"`
	W_SF         ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	PF_SF        ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block131Repeat
}

func (self *Block131) GetId() ModelId {
	return 131
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     131,
		Name:   "watt_pf",
		Length: 64,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "W_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "PF_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "RmpIncDec_SF", Offset: 9, Type: "sunssf", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 54,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "W1", Offset: 1, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "PF1", Offset: 2, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "W2", Offset: 3, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF2", Offset: 4, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W3", Offset: 5, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF3", Offset: 6, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W4", Offset: 7, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF4", Offset: 8, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W5", Offset: 9, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF5", Offset: 10, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W6", Offset: 11, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF6", Offset: 12, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W7", Offset: 13, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF7", Offset: 14, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W8", Offset: 15, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF8", Offset: 16, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W9", Offset: 17, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF9", Offset: 18, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W10", Offset: 19, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF10", Offset: 20, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W11", Offset: 21, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF11", Offset: 22, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W12", Offset: 23, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF12", Offset: 24, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W13", Offset: 25, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF13", Offset: 26, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W14", Offset: 27, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF14", Offset: 28, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W15", Offset: 29, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF15", Offset: 30, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W16", Offset: 31, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF16", Offset: 32, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W17", Offset: 33, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF17", Offset: 34, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W18", Offset: 35, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF18", Offset: 36, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W19", Offset: 37, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF19", Offset: 38, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W20", Offset: 39, Type: "int16", ScaleFactor: "W_SF", Units: "% WMax", Access: "rw", Length: 1},
					smdx.PointElement{Id: "PF20", Offset: 40, Type: "int16", ScaleFactor: "PF_SF", Units: "cos()", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "RmpPT1Tms", Offset: 49, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpDecTmm", Offset: 50, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% PF/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpIncTmm", Offset: 51, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% PF/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ReadOnly", Offset: 52, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 53, Type: "pad", Access: "r", Length: 1},
				},
			},
		}})
}

// Block132 - Volt-Watt - Volt-Watt

type Block132Repeat struct {
	ActPt     uint16 `sunspec:"offset=0,len=1,access=rw"`
	DeptRef   Enum16 `sunspec:"offset=1,len=1,access=rw"`
	V1        uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	W1        int16  `sunspec:"offset=3,len=1,sf=DeptRef_SF,access=rw"`
	V2        uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	W2        int16  `sunspec:"offset=5,len=1,sf=DeptRef_SF,access=rw"`
	V3        uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	W3        int16  `sunspec:"offset=7,len=1,sf=DeptRef_SF,access=rw"`
	V4        uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	W4        int16  `sunspec:"offset=9,len=1,sf=DeptRef_SF,access=rw"`
	V5        uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	W5        int16  `sunspec:"offset=11,len=1,sf=DeptRef_SF,access=rw"`
	V6        uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	W6        int16  `sunspec:"offset=13,len=1,sf=DeptRef_SF,access=rw"`
	V7        uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	W7        int16  `sunspec:"offset=15,len=1,sf=DeptRef_SF,access=rw"`
	V8        uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	W8        int16  `sunspec:"offset=17,len=1,sf=DeptRef_SF,access=rw"`
	V9        uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	W9        int16  `sunspec:"offset=19,len=1,sf=DeptRef_SF,access=rw"`
	V10       uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	W10       int16  `sunspec:"offset=21,len=1,sf=DeptRef_SF,access=rw"`
	V11       uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	W11       int16  `sunspec:"offset=23,len=1,sf=DeptRef_SF,access=rw"`
	V12       uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	W12       int16  `sunspec:"offset=25,len=1,sf=DeptRef_SF,access=rw"`
	V13       uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	W13       int16  `sunspec:"offset=27,len=1,sf=DeptRef_SF,access=rw"`
	V14       uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	W14       int16  `sunspec:"offset=29,len=1,sf=DeptRef_SF,access=rw"`
	V15       uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	W15       int16  `sunspec:"offset=31,len=1,sf=DeptRef_SF,access=rw"`
	V16       uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	W16       int16  `sunspec:"offset=33,len=1,sf=DeptRef_SF,access=rw"`
	V17       uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	W17       int16  `sunspec:"offset=35,len=1,sf=DeptRef_SF,access=rw"`
	V18       uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	W18       int16  `sunspec:"offset=37,len=1,sf=DeptRef_SF,access=rw"`
	V19       uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	W19       int16  `sunspec:"offset=39,len=1,sf=DeptRef_SF,access=rw"`
	V20       uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	W20       int16  `sunspec:"offset=41,len=1,sf=DeptRef_SF,access=rw"`
	CrvNam    String `sunspec:"offset=42,len=8,access=rw"`
	RmpPt1Tms uint16 `sunspec:"offset=50,len=1,access=rw"`
	RmpDecTmm uint16 `sunspec:"offset=51,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpIncTmm uint16 `sunspec:"offset=52,len=1,sf=RmpIncDec_SF,access=rw"`
	ReadOnly  Enum16 `sunspec:"offset=53,len=1,access=r"`
}

type Block132 struct {
	ActCrv       uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms       uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms      uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms       uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv         uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt          uint16      `sunspec:"offset=6,len=1,access=r"`
	V_SF         ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	DeptRef_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block132Repeat
}

func (self *Block132) GetId() ModelId {
	return 132
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     132,
		Name:   "volt_watt",
		Length: 64,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "DeptRef_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "RmpIncDec_SF", Offset: 9, Type: "sunssf", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 54,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "DeptRef", Offset: 1, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V1", Offset: 2, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "W1", Offset: 3, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V2", Offset: 4, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W2", Offset: 5, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V3", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W3", Offset: 7, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V4", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W4", Offset: 9, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V5", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W5", Offset: 11, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V6", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W6", Offset: 13, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V7", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W7", Offset: 15, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V8", Offset: 16, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W8", Offset: 17, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V9", Offset: 18, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W9", Offset: 19, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V10", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W10", Offset: 21, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V11", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W11", Offset: 23, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V12", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W12", Offset: 25, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V13", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W13", Offset: 27, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V14", Offset: 28, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W14", Offset: 29, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V15", Offset: 30, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W15", Offset: 31, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V16", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W16", Offset: 33, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V17", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W17", Offset: 35, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V18", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W18", Offset: 37, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V19", Offset: 38, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W19", Offset: 39, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V20", Offset: 40, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W20", Offset: 41, Type: "int16", ScaleFactor: "DeptRef_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 42, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "RmpPt1Tms", Offset: 50, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpDecTmm", Offset: 51, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% WMax/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpIncTmm", Offset: 52, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% WMax/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ReadOnly", Offset: 53, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block133 - Basic Scheduling - Basic Scheduling

type Block133Repeat struct {
	ActPts  uint16      `sunspec:"offset=0,len=1,access=rw"`
	StrTms  uint32      `sunspec:"offset=1,len=2,access=rw"`
	RepPer  uint16      `sunspec:"offset=3,len=1,access=rw"`
	IntvTyp Enum16      `sunspec:"offset=4,len=1,access=rw"`
	XTyp    Enum16      `sunspec:"offset=5,len=1,access=rw"`
	X_SF    ScaleFactor `sunspec:"offset=6,len=1,access=rw"`
	YTyp    Enum16      `sunspec:"offset=7,len=1,access=rw"`
	Y_SF    ScaleFactor `sunspec:"offset=8,len=1,access=rw"`
	X1      int32       `sunspec:"offset=9,len=2,sf=X_SF,access=rw"`
	Y1      int32       `sunspec:"offset=11,len=2,sf=Y_SF,access=rw"`
	X2      int32       `sunspec:"offset=13,len=2,sf=X_SF,access=rw"`
	Y2      int32       `sunspec:"offset=15,len=2,sf=Y_SF,access=rw"`
	X3      int32       `sunspec:"offset=17,len=2,sf=X_SF,access=rw"`
	Y3      int32       `sunspec:"offset=19,len=2,sf=Y_SF,access=rw"`
	X4      int32       `sunspec:"offset=21,len=2,sf=X_SF,access=rw"`
	Y4      int32       `sunspec:"offset=23,len=2,sf=Y_SF,access=rw"`
	X5      int32       `sunspec:"offset=25,len=2,sf=X_SF,access=rw"`
	Y5      int32       `sunspec:"offset=27,len=2,sf=Y_SF,access=rw"`
	X6      int32       `sunspec:"offset=29,len=2,sf=X_SF,access=rw"`
	Y6      int32       `sunspec:"offset=31,len=2,sf=Y_SF,access=rw"`
	X7      int32       `sunspec:"offset=33,len=2,sf=X_SF,access=rw"`
	Y7      int32       `sunspec:"offset=35,len=2,sf=Y_SF,access=rw"`
	X8      int32       `sunspec:"offset=37,len=2,sf=X_SF,access=rw"`
	Y8      int32       `sunspec:"offset=39,len=2,sf=Y_SF,access=rw"`
	X9      int32       `sunspec:"offset=41,len=2,sf=X_SF,access=rw"`
	Y9      int32       `sunspec:"offset=43,len=2,sf=Y_SF,access=rw"`
	X10     int32       `sunspec:"offset=45,len=2,sf=X_SF,access=rw"`
	Y10     int32       `sunspec:"offset=47,len=2,sf=Y_SF,access=rw"`
	Nam     String      `sunspec:"offset=49,len=8,access=rw"`
	WinTms  uint16      `sunspec:"offset=57,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=58,len=1,access=rw"`
	ActIndx uint16      `sunspec:"offset=59,len=1,access=r"`
}

type Block133 struct {
	ActSchd Bitfield32 `sunspec:"offset=0,len=2,access=rw"`
	ModEna  Bitfield16 `sunspec:"offset=2,len=1,access=rw"`
	NSchd   uint16     `sunspec:"offset=3,len=1,access=r"`
	NPts    uint16     `sunspec:"offset=4,len=1,access=r"`
	Pad     Pad        `sunspec:"offset=5,len=1,access=r"`

	Repeats []Block133Repeat
}

func (self *Block133) GetId() ModelId {
	return 133
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     133,
		Name:   "schedule",
		Length: 66,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 6,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActSchd", Offset: 0, Type: "bitfield32", Access: "rw", Length: 2, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 2, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NSchd", Offset: 3, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPts", Offset: 4, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 5, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{
				Length: 60,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPts", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "StrTms", Offset: 1, Type: "uint32", Units: "Secs", Access: "rw", Length: 2, Mandatory: true},
					smdx.PointElement{Id: "RepPer", Offset: 3, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "IntvTyp", Offset: 4, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "XTyp", Offset: 5, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "X_SF", Offset: 6, Type: "sunssf", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "YTyp", Offset: 7, Type: "enum16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Y_SF", Offset: 8, Type: "sunssf", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "X1", Offset: 9, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2, Mandatory: true},
					smdx.PointElement{Id: "Y1", Offset: 11, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2, Mandatory: true},
					smdx.PointElement{Id: "X2", Offset: 13, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y2", Offset: 15, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "X3", Offset: 17, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y3", Offset: 19, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "X4", Offset: 21, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y4", Offset: 23, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "X5", Offset: 25, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y5", Offset: 27, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "X6", Offset: 29, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y6", Offset: 31, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "X7", Offset: 33, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y7", Offset: 35, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "X8", Offset: 37, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y8", Offset: 39, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "X9", Offset: 41, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y9", Offset: 43, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "X10", Offset: 45, Type: "int32", ScaleFactor: "X_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Y10", Offset: 47, Type: "int32", ScaleFactor: "Y_SF", Access: "rw", Length: 2},
					smdx.PointElement{Id: "Nam", Offset: 49, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "WinTms", Offset: 57, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 58, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ActIndx", Offset: 59, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block134 - Freq-Watt Crv - Curve-Based Frequency-Watt

type Block134Repeat struct {
	ActPt      uint16     `sunspec:"offset=0,len=1,access=rw"`
	Hz1        uint16     `sunspec:"offset=1,len=1,sf=Hz_SF,access=rw"`
	W1         int16      `sunspec:"offset=2,len=1,sf=W_SF,access=rw"`
	Hz2        uint16     `sunspec:"offset=3,len=1,sf=Hz_SF,access=rw"`
	W2         int16      `sunspec:"offset=4,len=1,sf=W_SF,access=rw"`
	Hz3        uint16     `sunspec:"offset=5,len=1,sf=Hz_SF,access=rw"`
	W3         int16      `sunspec:"offset=6,len=1,sf=W_SF,access=rw"`
	Hz4        uint16     `sunspec:"offset=7,len=1,sf=Hz_SF,access=rw"`
	W4         int16      `sunspec:"offset=8,len=1,sf=W_SF,access=rw"`
	Hz5        uint16     `sunspec:"offset=9,len=1,sf=Hz_SF,access=rw"`
	W5         int16      `sunspec:"offset=10,len=1,sf=W_SF,access=rw"`
	Hz6        uint16     `sunspec:"offset=11,len=1,sf=Hz_SF,access=rw"`
	W6         int16      `sunspec:"offset=12,len=1,sf=W_SF,access=rw"`
	Hz7        uint16     `sunspec:"offset=13,len=1,sf=Hz_SF,access=rw"`
	W7         int16      `sunspec:"offset=14,len=1,sf=W_SF,access=rw"`
	Hz8        uint16     `sunspec:"offset=15,len=1,sf=Hz_SF,access=rw"`
	W8         int16      `sunspec:"offset=16,len=1,sf=W_SF,access=rw"`
	Hz9        uint16     `sunspec:"offset=17,len=1,sf=Hz_SF,access=rw"`
	W9         int16      `sunspec:"offset=18,len=1,sf=W_SF,access=rw"`
	Hz10       uint16     `sunspec:"offset=19,len=1,sf=Hz_SF,access=rw"`
	W10        int16      `sunspec:"offset=20,len=1,sf=W_SF,access=rw"`
	Hz11       uint16     `sunspec:"offset=21,len=1,sf=Hz_SF,access=rw"`
	W11        int16      `sunspec:"offset=22,len=1,sf=W_SF,access=rw"`
	Hz12       uint16     `sunspec:"offset=23,len=1,sf=Hz_SF,access=rw"`
	W12        int16      `sunspec:"offset=24,len=1,sf=W_SF,access=rw"`
	Hz13       uint16     `sunspec:"offset=25,len=1,sf=Hz_SF,access=rw"`
	W13        int16      `sunspec:"offset=26,len=1,sf=W_SF,access=rw"`
	Hz14       uint16     `sunspec:"offset=27,len=1,sf=Hz_SF,access=rw"`
	W14        int16      `sunspec:"offset=28,len=1,sf=W_SF,access=rw"`
	Hz15       uint16     `sunspec:"offset=29,len=1,sf=Hz_SF,access=rw"`
	W15        int16      `sunspec:"offset=30,len=1,sf=W_SF,access=rw"`
	Hz16       uint16     `sunspec:"offset=31,len=1,sf=Hz_SF,access=rw"`
	W16        int16      `sunspec:"offset=32,len=1,sf=W_SF,access=rw"`
	Hz17       uint16     `sunspec:"offset=33,len=1,sf=Hz_SF,access=rw"`
	W17        int16      `sunspec:"offset=34,len=1,sf=W_SF,access=rw"`
	Hz18       uint16     `sunspec:"offset=35,len=1,sf=Hz_SF,access=rw"`
	W18        int16      `sunspec:"offset=36,len=1,sf=W_SF,access=rw"`
	Hz19       uint16     `sunspec:"offset=37,len=1,sf=Hz_SF,access=rw"`
	W19        int16      `sunspec:"offset=38,len=1,sf=W_SF,access=rw"`
	Hz20       uint16     `sunspec:"offset=39,len=1,sf=Hz_SF,access=rw"`
	W20        int16      `sunspec:"offset=40,len=1,sf=W_SF,access=rw"`
	CrvNam     String     `sunspec:"offset=41,len=8,access=rw"`
	RmpPT1Tms  uint16     `sunspec:"offset=49,len=1,access=rw"`
	RmpDecTmm  uint16     `sunspec:"offset=50,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpIncTmm  uint16     `sunspec:"offset=51,len=1,sf=RmpIncDec_SF,access=rw"`
	RmpRsUp    uint16     `sunspec:"offset=52,len=1,sf=RmpIncDec_SF,access=rw"`
	SnptW      Bitfield16 `sunspec:"offset=53,len=1,access=rw"`
	WRef       uint16     `sunspec:"offset=54,len=1,sf=W_SF,access=rw"`
	WRefStrHz  uint16     `sunspec:"offset=55,len=1,sf=Hz_SF,access=rw"`
	WRefStopHz uint16     `sunspec:"offset=56,len=1,sf=Hz_SF,access=rw"`
	ReadOnly   Enum16     `sunspec:"offset=57,len=1,access=r"`
}

type Block134 struct {
	ActCrv       uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna       Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms       uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms      uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms       uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv         uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt          uint16      `sunspec:"offset=6,len=1,access=r"`
	Hz_SF        ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	W_SF         ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	RmpIncDec_SF ScaleFactor `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block134Repeat
}

func (self *Block134) GetId() ModelId {
	return 134
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     134,
		Name:   "freq_watt",
		Length: 68,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 7, Type: "sunssf", Units: "SF", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "W_SF", Offset: 8, Type: "sunssf", Units: "SF", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "RmpIncDec_SF", Offset: 9, Type: "sunssf", Units: "SF", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 58,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz1", Offset: 1, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "W1", Offset: 2, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz2", Offset: 3, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W2", Offset: 4, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz3", Offset: 5, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W3", Offset: 6, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz4", Offset: 7, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W4", Offset: 8, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz5", Offset: 9, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W5", Offset: 10, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz6", Offset: 11, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W6", Offset: 12, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz7", Offset: 13, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W7", Offset: 14, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz8", Offset: 15, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W8", Offset: 16, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz9", Offset: 17, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W9", Offset: 18, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz10", Offset: 19, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W10", Offset: 20, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz11", Offset: 21, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W11", Offset: 22, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz12", Offset: 23, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W12", Offset: 24, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz13", Offset: 25, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W13", Offset: 26, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz14", Offset: 27, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W14", Offset: 28, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz15", Offset: 29, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W15", Offset: 30, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz16", Offset: 31, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W16", Offset: 32, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz17", Offset: 33, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W17", Offset: 34, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz18", Offset: 35, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W18", Offset: 36, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz19", Offset: 37, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W19", Offset: 38, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz20", Offset: 39, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "W20", Offset: 40, Type: "int16", ScaleFactor: "W_SF", Units: "% WRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "RmpPT1Tms", Offset: 49, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpDecTmm", Offset: 50, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% WMax/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpIncTmm", Offset: 51, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% WMax/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpRsUp", Offset: 52, Type: "uint16", ScaleFactor: "RmpIncDec_SF", Units: "% WMax/min", Access: "rw", Length: 1},
					smdx.PointElement{Id: "SnptW", Offset: 53, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WRef", Offset: 54, Type: "uint16", ScaleFactor: "W_SF", Units: "W", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WRefStrHz", Offset: 55, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "WRefStopHz", Offset: 56, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ReadOnly", Offset: 57, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block135 - LFRT - Low Frequency Ride-through

type Block135Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block135 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block135Repeat
}

func (self *Block135) GetId() ModelId {
	return 135
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     135,
		Name:   "lfrt",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz1", Offset: 2, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz2", Offset: 4, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz3", Offset: 6, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz4", Offset: 8, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz5", Offset: 10, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz6", Offset: 12, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz7", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz8", Offset: 16, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz9", Offset: 18, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz10", Offset: 20, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz11", Offset: 22, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz12", Offset: 24, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz13", Offset: 26, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz14", Offset: 28, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz15", Offset: 30, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz16", Offset: 32, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz17", Offset: 34, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz18", Offset: 36, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz19", Offset: 38, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz20", Offset: 40, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block136 - HFRT - High Frequency Ride-through

type Block136Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block136 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block136Repeat
}

func (self *Block136) GetId() ModelId {
	return 136
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     136,
		Name:   "hfrt",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz1", Offset: 2, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz2", Offset: 4, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz3", Offset: 6, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz4", Offset: 8, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz5", Offset: 10, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz6", Offset: 12, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz7", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz8", Offset: 16, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz9", Offset: 18, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz10", Offset: 20, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz11", Offset: 22, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz12", Offset: 24, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz13", Offset: 26, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz14", Offset: 28, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz15", Offset: 30, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz16", Offset: 32, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz17", Offset: 34, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz18", Offset: 36, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz19", Offset: 38, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz20", Offset: 40, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block137 - LVRTC - LVRT must remain connected

type Block137Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block137 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block137Repeat
}

func (self *Block137) GetId() ModelId {
	return 137
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     137,
		Name:   "lvrtc",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V1", Offset: 2, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V2", Offset: 4, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V3", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V4", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V5", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V6", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V7", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V8", Offset: 16, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V9", Offset: 18, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V10", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V11", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V12", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V13", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V14", Offset: 28, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V15", Offset: 30, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V16", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V17", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V18", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V19", Offset: 38, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V20", Offset: 40, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block138 - HVRTC - HVRT must remain connected

type Block138Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block138 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block138Repeat
}

func (self *Block138) GetId() ModelId {
	return 138
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     138,
		Name:   "hvrtc",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V1", Offset: 2, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V2", Offset: 4, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V3", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V4", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V5", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V6", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V7", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V8", Offset: 16, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V9", Offset: 18, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V10", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V11", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V12", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V13", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V14", Offset: 28, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V15", Offset: 30, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V16", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V17", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V18", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V19", Offset: 38, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V20", Offset: 40, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block139 - LVRTX - LVRT extended curve

type Block139Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block139 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	CrvType Enum16      `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block139Repeat
}

func (self *Block139) GetId() ModelId {
	return 139
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     139,
		Name:   "lvrtx",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "CrvType", Offset: 9, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V1", Offset: 2, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V2", Offset: 4, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V3", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V4", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V5", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V6", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V7", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V8", Offset: 16, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V9", Offset: 18, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V10", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V11", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V12", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V13", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V14", Offset: 28, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V15", Offset: 30, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V16", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V17", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V18", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V19", Offset: 38, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V20", Offset: 40, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block140 - HVRTX - HVRT extended curve

type Block140Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	V1       uint16 `sunspec:"offset=2,len=1,sf=V_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	V2       uint16 `sunspec:"offset=4,len=1,sf=V_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	V3       uint16 `sunspec:"offset=6,len=1,sf=V_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	V4       uint16 `sunspec:"offset=8,len=1,sf=V_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	V5       uint16 `sunspec:"offset=10,len=1,sf=V_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	V6       uint16 `sunspec:"offset=12,len=1,sf=V_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	V7       uint16 `sunspec:"offset=14,len=1,sf=V_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	V8       uint16 `sunspec:"offset=16,len=1,sf=V_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	V9       uint16 `sunspec:"offset=18,len=1,sf=V_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	V10      uint16 `sunspec:"offset=20,len=1,sf=V_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	V11      uint16 `sunspec:"offset=22,len=1,sf=V_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	V12      uint16 `sunspec:"offset=24,len=1,sf=V_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	V13      uint16 `sunspec:"offset=26,len=1,sf=V_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	V14      uint16 `sunspec:"offset=28,len=1,sf=V_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	V15      uint16 `sunspec:"offset=30,len=1,sf=V_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	V16      uint16 `sunspec:"offset=32,len=1,sf=V_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	V17      uint16 `sunspec:"offset=34,len=1,sf=V_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	V18      uint16 `sunspec:"offset=36,len=1,sf=V_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	V19      uint16 `sunspec:"offset=38,len=1,sf=V_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	V20      uint16 `sunspec:"offset=40,len=1,sf=V_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block140 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	V_SF    ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	CrvType Enum16      `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block140Repeat
}

func (self *Block140) GetId() ModelId {
	return 140
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     140,
		Name:   "hvrtx",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "CrvType", Offset: 9, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "V1", Offset: 2, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V2", Offset: 4, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V3", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V4", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V5", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V6", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V7", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V8", Offset: 16, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V9", Offset: 18, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V10", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V11", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V12", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V13", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V14", Offset: 28, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V15", Offset: 30, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V16", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V17", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V18", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V19", Offset: 38, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "V20", Offset: 40, Type: "uint16", ScaleFactor: "V_SF", Units: "% VRef", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block141 - LFRTC - LFRT must remain connected

type Block141Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block141 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block141Repeat
}

func (self *Block141) GetId() ModelId {
	return 141
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     141,
		Name:   "lfrtc",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz1", Offset: 2, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz2", Offset: 4, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz3", Offset: 6, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz4", Offset: 8, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz5", Offset: 10, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz6", Offset: 12, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz7", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz8", Offset: 16, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz9", Offset: 18, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz10", Offset: 20, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz11", Offset: 22, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz12", Offset: 24, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz13", Offset: 26, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz14", Offset: 28, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz15", Offset: 30, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz16", Offset: 32, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz17", Offset: 34, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz18", Offset: 36, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz19", Offset: 38, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz20", Offset: 40, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block142 - HFRTC - HFRT must remain connected

type Block142Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block142 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	Pad     Pad         `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block142Repeat
}

func (self *Block142) GetId() ModelId {
	return 142
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     142,
		Name:   "hfrtc",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Pad", Offset: 9, Type: "pad", Access: "r", Length: 1},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz1", Offset: 2, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz2", Offset: 4, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz3", Offset: 6, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz4", Offset: 8, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz5", Offset: 10, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz6", Offset: 12, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz7", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz8", Offset: 16, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz9", Offset: 18, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz10", Offset: 20, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz11", Offset: 22, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz12", Offset: 24, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz13", Offset: 26, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz14", Offset: 28, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz15", Offset: 30, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz16", Offset: 32, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz17", Offset: 34, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz18", Offset: 36, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz19", Offset: 38, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz20", Offset: 40, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block143 - LFRTX - LFRT extended curve

type Block143Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block143 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	CrvType Enum16      `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block143Repeat
}

func (self *Block143) GetId() ModelId {
	return 143
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     143,
		Name:   "lfrtx",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "CrvType", Offset: 9, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz1", Offset: 2, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz2", Offset: 4, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz3", Offset: 6, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz4", Offset: 8, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz5", Offset: 10, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz6", Offset: 12, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz7", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz8", Offset: 16, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz9", Offset: 18, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz10", Offset: 20, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz11", Offset: 22, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz12", Offset: 24, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz13", Offset: 26, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz14", Offset: 28, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz15", Offset: 30, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz16", Offset: 32, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz17", Offset: 34, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz18", Offset: 36, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz19", Offset: 38, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz20", Offset: 40, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block144 - HFRTX - HFRT extended curve

type Block144Repeat struct {
	ActPt    uint16 `sunspec:"offset=0,len=1,access=rw"`
	Tms1     uint16 `sunspec:"offset=1,len=1,sf=Tms_SF,access=rw"`
	Hz1      uint16 `sunspec:"offset=2,len=1,sf=Hz_SF,access=rw"`
	Tms2     uint16 `sunspec:"offset=3,len=1,sf=Tms_SF,access=rw"`
	Hz2      uint16 `sunspec:"offset=4,len=1,sf=Hz_SF,access=rw"`
	Tms3     uint16 `sunspec:"offset=5,len=1,sf=Tms_SF,access=rw"`
	Hz3      uint16 `sunspec:"offset=6,len=1,sf=Hz_SF,access=rw"`
	Tms4     uint16 `sunspec:"offset=7,len=1,sf=Tms_SF,access=rw"`
	Hz4      uint16 `sunspec:"offset=8,len=1,sf=Hz_SF,access=rw"`
	Tms5     uint16 `sunspec:"offset=9,len=1,sf=Tms_SF,access=rw"`
	Hz5      uint16 `sunspec:"offset=10,len=1,sf=Hz_SF,access=rw"`
	Tms6     uint16 `sunspec:"offset=11,len=1,sf=Tms_SF,access=rw"`
	Hz6      uint16 `sunspec:"offset=12,len=1,sf=Hz_SF,access=rw"`
	Tms7     uint16 `sunspec:"offset=13,len=1,sf=Tms_SF,access=rw"`
	Hz7      uint16 `sunspec:"offset=14,len=1,sf=Hz_SF,access=rw"`
	Tms8     uint16 `sunspec:"offset=15,len=1,sf=Tms_SF,access=rw"`
	Hz8      uint16 `sunspec:"offset=16,len=1,sf=Hz_SF,access=rw"`
	Tms9     uint16 `sunspec:"offset=17,len=1,sf=Tms_SF,access=rw"`
	Hz9      uint16 `sunspec:"offset=18,len=1,sf=Hz_SF,access=rw"`
	Tms10    uint16 `sunspec:"offset=19,len=1,sf=Tms_SF,access=rw"`
	Hz10     uint16 `sunspec:"offset=20,len=1,sf=Hz_SF,access=rw"`
	Tms11    uint16 `sunspec:"offset=21,len=1,sf=Tms_SF,access=rw"`
	Hz11     uint16 `sunspec:"offset=22,len=1,sf=Hz_SF,access=rw"`
	Tms12    uint16 `sunspec:"offset=23,len=1,sf=Tms_SF,access=rw"`
	Hz12     uint16 `sunspec:"offset=24,len=1,sf=Hz_SF,access=rw"`
	Tms13    uint16 `sunspec:"offset=25,len=1,sf=Tms_SF,access=rw"`
	Hz13     uint16 `sunspec:"offset=26,len=1,sf=Hz_SF,access=rw"`
	Tms14    uint16 `sunspec:"offset=27,len=1,sf=Tms_SF,access=rw"`
	Hz14     uint16 `sunspec:"offset=28,len=1,sf=Hz_SF,access=rw"`
	Tms15    uint16 `sunspec:"offset=29,len=1,sf=Tms_SF,access=rw"`
	Hz15     uint16 `sunspec:"offset=30,len=1,sf=Hz_SF,access=rw"`
	Tms16    uint16 `sunspec:"offset=31,len=1,sf=Tms_SF,access=rw"`
	Hz16     uint16 `sunspec:"offset=32,len=1,sf=Hz_SF,access=rw"`
	Tms17    uint16 `sunspec:"offset=33,len=1,sf=Tms_SF,access=rw"`
	Hz17     uint16 `sunspec:"offset=34,len=1,sf=Hz_SF,access=rw"`
	Tms18    uint16 `sunspec:"offset=35,len=1,sf=Tms_SF,access=rw"`
	Hz18     uint16 `sunspec:"offset=36,len=1,sf=Hz_SF,access=rw"`
	Tms19    uint16 `sunspec:"offset=37,len=1,sf=Tms_SF,access=rw"`
	Hz19     uint16 `sunspec:"offset=38,len=1,sf=Hz_SF,access=rw"`
	Tms20    uint16 `sunspec:"offset=39,len=1,sf=Tms_SF,access=rw"`
	Hz20     uint16 `sunspec:"offset=40,len=1,sf=Hz_SF,access=rw"`
	CrvNam   String `sunspec:"offset=41,len=8,access=rw"`
	ReadOnly Enum16 `sunspec:"offset=49,len=1,access=r"`
}

type Block144 struct {
	ActCrv  uint16      `sunspec:"offset=0,len=1,access=rw"`
	ModEna  Bitfield16  `sunspec:"offset=1,len=1,access=rw"`
	WinTms  uint16      `sunspec:"offset=2,len=1,access=rw"`
	RvrtTms uint16      `sunspec:"offset=3,len=1,access=rw"`
	RmpTms  uint16      `sunspec:"offset=4,len=1,access=rw"`
	NCrv    uint16      `sunspec:"offset=5,len=1,access=r"`
	NPt     uint16      `sunspec:"offset=6,len=1,access=r"`
	Tms_SF  ScaleFactor `sunspec:"offset=7,len=1,access=r"`
	Hz_SF   ScaleFactor `sunspec:"offset=8,len=1,access=r"`
	CrvType Enum16      `sunspec:"offset=9,len=1,access=r"`

	Repeats []Block144Repeat
}

func (self *Block144) GetId() ModelId {
	return 144
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     144,
		Name:   "hfrtx",
		Length: 60,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 10,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActCrv", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "ModEna", Offset: 1, Type: "bitfield16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "WinTms", Offset: 2, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RvrtTms", Offset: 3, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "RmpTms", Offset: 4, Type: "uint16", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NCrv", Offset: 5, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "NPt", Offset: 6, Type: "uint16", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 8, Type: "sunssf", Access: "r", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "CrvType", Offset: 9, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "curve",
				Length: 50,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ActPt", Offset: 0, Type: "uint16", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms1", Offset: 1, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Hz1", Offset: 2, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1, Mandatory: true},
					smdx.PointElement{Id: "Tms2", Offset: 3, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz2", Offset: 4, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms3", Offset: 5, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz3", Offset: 6, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms4", Offset: 7, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz4", Offset: 8, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms5", Offset: 9, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz5", Offset: 10, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms6", Offset: 11, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz6", Offset: 12, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms7", Offset: 13, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz7", Offset: 14, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms8", Offset: 15, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz8", Offset: 16, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms9", Offset: 17, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz9", Offset: 18, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms10", Offset: 19, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz10", Offset: 20, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms11", Offset: 21, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz11", Offset: 22, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms12", Offset: 23, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz12", Offset: 24, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms13", Offset: 25, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz13", Offset: 26, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms14", Offset: 27, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz14", Offset: 28, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms15", Offset: 29, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz15", Offset: 30, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms16", Offset: 31, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz16", Offset: 32, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms17", Offset: 33, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz17", Offset: 34, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms18", Offset: 35, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz18", Offset: 36, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms19", Offset: 37, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz19", Offset: 38, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Tms20", Offset: 39, Type: "uint16", ScaleFactor: "Tms_SF", Units: "Secs", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Hz20", Offset: 40, Type: "uint16", ScaleFactor: "Hz_SF", Units: "Hz", Access: "rw", Length: 1},
					smdx.PointElement{Id: "CrvNam", Offset: 41, Type: "string", Access: "rw", Length: 8},
					smdx.PointElement{Id: "ReadOnly", Offset: 49, Type: "enum16", Access: "r", Length: 1, Mandatory: true},
				},
			},
		}})
}

// Block145 - Extended Settings - Inverter controls extended settings

type Block145 struct {
	NomRmpUpRte  uint16      `sunspec:"offset=0,len=1,sf=Rmp_SF,access=rw"`
	NomRmpDnRte  uint16      `sunspec:"offset=1,len=1,sf=Rmp_SF,access=rw"`
	EmgRmpUpRte  uint16      `sunspec:"offset=2,len=1,sf=Rmp_SF,access=rw"`
	EmgRmpDnRte  uint16      `sunspec:"offset=3,len=1,sf=Rmp_SF,access=rw"`
	ConnRmpUpRte uint16      `sunspec:"offset=4,len=1,sf=Rmp_SF,access=rw"`
	ConnRmpDnRte uint16      `sunspec:"offset=5,len=1,sf=Rmp_SF,access=rw"`
	AGra         uint16      `sunspec:"offset=6,len=1,sf=Rmp_SF,access=rw"`
	Rmp_SF       ScaleFactor `sunspec:"offset=7,len=1,access=r"`
}

func (self *Block145) GetId() ModelId {
	return 145
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     145,
		Name:   "ext_settings",
		Length: 8,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 8,
				Type:   "fixed",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "NomRmpUpRte", Offset: 0, Type: "uint16", ScaleFactor: "Rmp_SF", Units: "Pct", Access: "rw", Length: 1},
					smdx.PointElement{Id: "NomRmpDnRte", Offset: 1, Type: "uint16", ScaleFactor: "Rmp_SF", Units: "Pct", Access: "rw", Length: 1},
					smdx.PointElement{Id: "EmgRmpUpRte", Offset: 2, Type: "uint16", ScaleFactor: "Rmp_SF", Units: "Pct", Access: "rw", Length: 1},
					smdx.PointElement{Id: "EmgRmpDnRte", Offset: 3, Type: "uint16", ScaleFactor: "Rmp_SF", Units: "Pct", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ConnRmpUpRte", Offset: 4, Type: "uint16", ScaleFactor: "Rmp_SF", Units: "Pct", Access: "rw", Length: 1},
					smdx.PointElement{Id: "ConnRmpDnRte", Offset: 5, Type: "uint16", ScaleFactor: "Rmp_SF", Units: "Pct", Access: "rw", Length: 1},
					smdx.PointElement{Id: "AGra", Offset: 6, Type: "uint16", ScaleFactor: "Rmp_SF", Units: "Pct", Access: "rw", Length: 1},
					smdx.PointElement{Id: "Rmp_SF", Offset: 7, Type: "sunssf", Access: "r", Length: 1},
				},
			},
		}})
}

// Block160 - Multiple MPPT Inverter Extension Model -

type Block160Repeat struct {
	ID    uint16     `sunspec:"offset=0"`
	IDStr String     `sunspec:"offset=1,len=8"`
	DCA   uint16     `sunspec:"offset=9,sf=DCA_SF"`
	DCV   uint16     `sunspec:"offset=10,sf=DCV_SF"`
	DCW   uint16     `sunspec:"offset=11,sf=DCW_SF"`
	DCWH  Acc32      `sunspec:"offset=12,sf=DCWH_SF"`
	Tms   uint32     `sunspec:"offset=14"`
	Tmp   int16      `sunspec:"offset=16"`
	DCSt  Enum16     `sunspec:"offset=17"`
	DCEvt Bitfield32 `sunspec:"offset=18"`
}

type Block160 struct {
	DCA_SF  ScaleFactor `sunspec:"offset=0"`
	DCV_SF  ScaleFactor `sunspec:"offset=1"`
	DCW_SF  ScaleFactor `sunspec:"offset=2"`
	DCWH_SF ScaleFactor `sunspec:"offset=3"`
	Evt     Bitfield32  `sunspec:"offset=4"`
	N       Count       `sunspec:"offset=6"`
	TmsPer  uint16      `sunspec:"offset=7"`

	Repeats []Block160Repeat
}

func (self *Block160) GetId() ModelId {
	return 160
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     160,
		Name:   "mppt",
		Length: 28,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 8,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DCA_SF", Offset: 0, Type: "sunssf"},
					smdx.PointElement{Id: "DCV_SF", Offset: 1, Type: "sunssf"},
					smdx.PointElement{Id: "DCW_SF", Offset: 2, Type: "sunssf"},
					smdx.PointElement{Id: "DCWH_SF", Offset: 3, Type: "sunssf"},
					smdx.PointElement{Id: "Evt", Offset: 4, Type: "bitfield32"},
					smdx.PointElement{Id: "N", Offset: 6, Type: "count"},
					smdx.PointElement{Id: "TmsPer", Offset: 7, Type: "uint16"},
				},
			},
			smdx.BlockElement{Name: "module",
				Length: 20,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ID", Offset: 0, Type: "uint16"},
					smdx.PointElement{Id: "IDStr", Offset: 1, Type: "string", Length: 8},
					smdx.PointElement{Id: "DCA", Offset: 9, Type: "uint16", ScaleFactor: "DCA_SF", Units: "A"},
					smdx.PointElement{Id: "DCV", Offset: 10, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "DCW", Offset: 11, Type: "uint16", ScaleFactor: "DCW_SF", Units: "W"},
					smdx.PointElement{Id: "DCWH", Offset: 12, Type: "acc32", ScaleFactor: "DCWH_SF", Units: "Wh"},
					smdx.PointElement{Id: "Tms", Offset: 14, Type: "uint32", Units: "Secs"},
					smdx.PointElement{Id: "Tmp", Offset: 16, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "DCSt", Offset: 17, Type: "enum16"},
					smdx.PointElement{Id: "DCEvt", Offset: 18, Type: "bitfield32"},
				},
			},
		}})
}

// Block201 - Meter (Single Phase)single phase (AN or AB) meter - Include this model for single phase (AN or AB) metering

type Block201 struct {
	A               int16       `sunspec:"offset=0,sf=A_SF"`
	AphA            int16       `sunspec:"offset=1,sf=A_SF"`
	AphB            int16       `sunspec:"offset=2,sf=A_SF"`
	AphC            int16       `sunspec:"offset=3,sf=A_SF"`
	A_SF            ScaleFactor `sunspec:"offset=4"`
	PhV             int16       `sunspec:"offset=5,sf=V_SF"`
	PhVphA          int16       `sunspec:"offset=6,sf=V_SF"`
	PhVphB          int16       `sunspec:"offset=7,sf=V_SF"`
	PhVphC          int16       `sunspec:"offset=8,sf=V_SF"`
	PPV             int16       `sunspec:"offset=9,sf=V_SF"`
	PPVphAB         int16       `sunspec:"offset=10,sf=V_SF"`
	PPVphBC         int16       `sunspec:"offset=11,sf=V_SF"`
	PPVphCA         int16       `sunspec:"offset=12,sf=V_SF"`
	V_SF            ScaleFactor `sunspec:"offset=13"`
	Hz              int16       `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF           ScaleFactor `sunspec:"offset=15"`
	W               int16       `sunspec:"offset=16,sf=W_SF"`
	WphA            int16       `sunspec:"offset=17,sf=W_SF"`
	WphB            int16       `sunspec:"offset=18,sf=W_SF"`
	WphC            int16       `sunspec:"offset=19,sf=W_SF"`
	W_SF            ScaleFactor `sunspec:"offset=20"`
	VA              int16       `sunspec:"offset=21,sf=VA_SF"`
	VAphA           int16       `sunspec:"offset=22,sf=VA_SF"`
	VAphB           int16       `sunspec:"offset=23,sf=VA_SF"`
	VAphC           int16       `sunspec:"offset=24,sf=VA_SF"`
	VA_SF           ScaleFactor `sunspec:"offset=25"`
	VAR             int16       `sunspec:"offset=26,sf=VAR_SF"`
	VARphA          int16       `sunspec:"offset=27,sf=VAR_SF"`
	VARphB          int16       `sunspec:"offset=28,sf=VAR_SF"`
	VARphC          int16       `sunspec:"offset=29,sf=VAR_SF"`
	VAR_SF          ScaleFactor `sunspec:"offset=30"`
	PF              int16       `sunspec:"offset=31,sf=PF_SF"`
	PFphA           int16       `sunspec:"offset=32,sf=PF_SF"`
	PFphB           int16       `sunspec:"offset=33,sf=PF_SF"`
	PFphC           int16       `sunspec:"offset=34,sf=PF_SF"`
	PF_SF           ScaleFactor `sunspec:"offset=35"`
	TotWhExp        Acc32       `sunspec:"offset=36,sf=TotWh_SF"`
	TotWhExpPhA     Acc32       `sunspec:"offset=38,sf=TotWh_SF"`
	TotWhExpPhB     Acc32       `sunspec:"offset=40,sf=TotWh_SF"`
	TotWhExpPhC     Acc32       `sunspec:"offset=42,sf=TotWh_SF"`
	TotWhImp        Acc32       `sunspec:"offset=44,sf=TotWh_SF"`
	TotWhImpPhA     Acc32       `sunspec:"offset=46,sf=TotWh_SF"`
	TotWhImpPhB     Acc32       `sunspec:"offset=48,sf=TotWh_SF"`
	TotWhImpPhC     Acc32       `sunspec:"offset=50,sf=TotWh_SF"`
	TotWh_SF        ScaleFactor `sunspec:"offset=52"`
	TotVAhExp       Acc32       `sunspec:"offset=53,sf=TotVAh_SF"`
	TotVAhExpPhA    Acc32       `sunspec:"offset=55,sf=TotVAh_SF"`
	TotVAhExpPhB    Acc32       `sunspec:"offset=57,sf=TotVAh_SF"`
	TotVAhExpPhC    Acc32       `sunspec:"offset=59,sf=TotVAh_SF"`
	TotVAhImp       Acc32       `sunspec:"offset=61,sf=TotVAh_SF"`
	TotVAhImpPhA    Acc32       `sunspec:"offset=63,sf=TotVAh_SF"`
	TotVAhImpPhB    Acc32       `sunspec:"offset=65,sf=TotVAh_SF"`
	TotVAhImpPhC    Acc32       `sunspec:"offset=67,sf=TotVAh_SF"`
	TotVAh_SF       ScaleFactor `sunspec:"offset=69"`
	TotVArhImpQ1    Acc32       `sunspec:"offset=70,sf=TotVArh_SF"`
	TotVArhImpQ1PhA Acc32       `sunspec:"offset=72,sf=TotVArh_SF"`
	TotVArhImpQ1PhB Acc32       `sunspec:"offset=74,sf=TotVArh_SF"`
	TotVArhImpQ1PhC Acc32       `sunspec:"offset=76,sf=TotVArh_SF"`
	TotVArhImpQ2    Acc32       `sunspec:"offset=78,sf=TotVArh_SF"`
	TotVArhImpQ2PhA Acc32       `sunspec:"offset=80,sf=TotVArh_SF"`
	TotVArhImpQ2PhB Acc32       `sunspec:"offset=82,sf=TotVArh_SF"`
	TotVArhImpQ2PhC Acc32       `sunspec:"offset=84,sf=TotVArh_SF"`
	TotVArhExpQ3    Acc32       `sunspec:"offset=86,sf=TotVArh_SF"`
	TotVArhExpQ3PhA Acc32       `sunspec:"offset=88,sf=TotVArh_SF"`
	TotVArhExpQ3PhB Acc32       `sunspec:"offset=90,sf=TotVArh_SF"`
	TotVArhExpQ3PhC Acc32       `sunspec:"offset=92,sf=TotVArh_SF"`
	TotVArhExpQ4    Acc32       `sunspec:"offset=94,sf=TotVArh_SF"`
	TotVArhExpQ4PhA Acc32       `sunspec:"offset=96,sf=TotVArh_SF"`
	TotVArhExpQ4PhB Acc32       `sunspec:"offset=98,sf=TotVArh_SF"`
	TotVArhExpQ4PhC Acc32       `sunspec:"offset=100,sf=TotVArh_SF"`
	TotVArh_SF      ScaleFactor `sunspec:"offset=102"`
	Evt             Bitfield32  `sunspec:"offset=103"`
}

func (self *Block201) GetId() ModelId {
	return 201
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     201,
		Name:   "ac_meter",
		Length: 105,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 105,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 1, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 2, Type: "int16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "AphC", Offset: 3, Type: "int16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "A_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "PhV", Offset: 5, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 6, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphB", Offset: 7, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphC", Offset: 8, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPV", Offset: 9, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphAB", Offset: 10, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphBC", Offset: 11, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 12, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "V_SF", Offset: 13, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 14, Type: "int16", ScaleFactor: "Hz_SF", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 15, Type: "sunssf"},
					smdx.PointElement{Id: "W", Offset: 16, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WphA", Offset: 17, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "WphB", Offset: 18, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "WphC", Offset: 19, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "W_SF", Offset: 20, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 21, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphA", Offset: 22, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphB", Offset: 23, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphC", Offset: 24, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VA_SF", Offset: 25, Type: "sunssf"},
					smdx.PointElement{Id: "VAR", Offset: 26, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphA", Offset: 27, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphB", Offset: 28, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphC", Offset: 29, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VAR_SF", Offset: 30, Type: "sunssf"},
					smdx.PointElement{Id: "PF", Offset: 31, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphA", Offset: 32, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphB", Offset: 33, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphC", Offset: 34, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PF_SF", Offset: 35, Type: "sunssf"},
					smdx.PointElement{Id: "TotWhExp", Offset: 36, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhExpPhA", Offset: 38, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhB", Offset: 40, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhC", Offset: 42, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImp", Offset: 44, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImpPhA", Offset: 46, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhB", Offset: 48, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhC", Offset: 50, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWh_SF", Offset: 52, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "TotVAhExp", Offset: 53, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhA", Offset: 55, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhB", Offset: 57, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhC", Offset: 59, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 61, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhA", Offset: 63, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhB", Offset: 65, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhC", Offset: 67, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAh_SF", Offset: 69, Type: "sunssf"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 70, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhA", Offset: 72, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhB", Offset: 74, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhC", Offset: 76, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 78, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhA", Offset: 80, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhB", Offset: 82, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhC", Offset: 84, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 86, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhA", Offset: 88, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhB", Offset: 90, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhC", Offset: 92, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 94, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhA", Offset: 96, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhB", Offset: 98, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhC", Offset: 100, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArh_SF", Offset: 102, Type: "sunssf"},
					smdx.PointElement{Id: "Evt", Offset: 103, Type: "bitfield32", Mandatory: true},
				},
			},
		}})
}

// Block202 - split single phase (ABN) meter -

type Block202 struct {
	A               int16       `sunspec:"offset=0,sf=A_SF"`
	AphA            int16       `sunspec:"offset=1,sf=A_SF"`
	AphB            int16       `sunspec:"offset=2,sf=A_SF"`
	AphC            int16       `sunspec:"offset=3,sf=A_SF"`
	A_SF            ScaleFactor `sunspec:"offset=4"`
	PhV             int16       `sunspec:"offset=5,sf=V_SF"`
	PhVphA          int16       `sunspec:"offset=6,sf=V_SF"`
	PhVphB          int16       `sunspec:"offset=7,sf=V_SF"`
	PhVphC          int16       `sunspec:"offset=8,sf=V_SF"`
	PPV             int16       `sunspec:"offset=9,sf=V_SF"`
	PhVphAB         int16       `sunspec:"offset=10,sf=V_SF"`
	PhVphBC         int16       `sunspec:"offset=11,sf=V_SF"`
	PhVphCA         int16       `sunspec:"offset=12,sf=V_SF"`
	V_SF            ScaleFactor `sunspec:"offset=13"`
	Hz              int16       `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF           ScaleFactor `sunspec:"offset=15"`
	W               int16       `sunspec:"offset=16,sf=W_SF"`
	WphA            int16       `sunspec:"offset=17,sf=W_SF"`
	WphB            int16       `sunspec:"offset=18,sf=W_SF"`
	WphC            int16       `sunspec:"offset=19,sf=W_SF"`
	W_SF            ScaleFactor `sunspec:"offset=20"`
	VA              int16       `sunspec:"offset=21,sf=VA_SF"`
	VAphA           int16       `sunspec:"offset=22,sf=VA_SF"`
	VAphB           int16       `sunspec:"offset=23,sf=VA_SF"`
	VAphC           int16       `sunspec:"offset=24,sf=VA_SF"`
	VA_SF           ScaleFactor `sunspec:"offset=25"`
	VAR             int16       `sunspec:"offset=26,sf=VAR_SF"`
	VARphA          int16       `sunspec:"offset=27,sf=VAR_SF"`
	VARphB          int16       `sunspec:"offset=28,sf=VAR_SF"`
	VARphC          int16       `sunspec:"offset=29,sf=VAR_SF"`
	VAR_SF          ScaleFactor `sunspec:"offset=30"`
	PF              int16       `sunspec:"offset=31,sf=PF_SF"`
	PFphA           int16       `sunspec:"offset=32,sf=PF_SF"`
	PFphB           int16       `sunspec:"offset=33,sf=PF_SF"`
	PFphC           int16       `sunspec:"offset=34,sf=PF_SF"`
	PF_SF           ScaleFactor `sunspec:"offset=35"`
	TotWhExp        Acc32       `sunspec:"offset=36,sf=TotWh_SF"`
	TotWhExpPhA     Acc32       `sunspec:"offset=38,sf=TotWh_SF"`
	TotWhExpPhB     Acc32       `sunspec:"offset=40,sf=TotWh_SF"`
	TotWhExpPhC     Acc32       `sunspec:"offset=42,sf=TotWh_SF"`
	TotWhImp        Acc32       `sunspec:"offset=44,sf=TotWh_SF"`
	TotWhImpPhA     Acc32       `sunspec:"offset=46,sf=TotWh_SF"`
	TotWhImpPhB     Acc32       `sunspec:"offset=48,sf=TotWh_SF"`
	TotWhImpPhC     Acc32       `sunspec:"offset=50,sf=TotWh_SF"`
	TotWh_SF        ScaleFactor `sunspec:"offset=52"`
	TotVAhExp       Acc32       `sunspec:"offset=53,sf=TotVAh_SF"`
	TotVAhExpPhA    Acc32       `sunspec:"offset=55,sf=TotVAh_SF"`
	TotVAhExpPhB    Acc32       `sunspec:"offset=57,sf=TotVAh_SF"`
	TotVAhExpPhC    Acc32       `sunspec:"offset=59,sf=TotVAh_SF"`
	TotVAhImp       Acc32       `sunspec:"offset=61,sf=TotVAh_SF"`
	TotVAhImpPhA    Acc32       `sunspec:"offset=63,sf=TotVAh_SF"`
	TotVAhImpPhB    Acc32       `sunspec:"offset=65,sf=TotVAh_SF"`
	TotVAhImpPhC    Acc32       `sunspec:"offset=67,sf=TotVAh_SF"`
	TotVAh_SF       ScaleFactor `sunspec:"offset=69"`
	TotVArhImpQ1    Acc32       `sunspec:"offset=70,sf=TotVArh_SF"`
	TotVArhImpQ1PhA Acc32       `sunspec:"offset=72,sf=TotVArh_SF"`
	TotVArhImpQ1PhB Acc32       `sunspec:"offset=74,sf=TotVArh_SF"`
	TotVArhImpQ1PhC Acc32       `sunspec:"offset=76,sf=TotVArh_SF"`
	TotVArhImpQ2    Acc32       `sunspec:"offset=78,sf=TotVArh_SF"`
	TotVArhImpQ2PhA Acc32       `sunspec:"offset=80,sf=TotVArh_SF"`
	TotVArhImpQ2PhB Acc32       `sunspec:"offset=82,sf=TotVArh_SF"`
	TotVArhImpQ2PhC Acc32       `sunspec:"offset=84,sf=TotVArh_SF"`
	TotVArhExpQ3    Acc32       `sunspec:"offset=86,sf=TotVArh_SF"`
	TotVArhExpQ3PhA Acc32       `sunspec:"offset=88,sf=TotVArh_SF"`
	TotVArhExpQ3PhB Acc32       `sunspec:"offset=90,sf=TotVArh_SF"`
	TotVArhExpQ3PhC Acc32       `sunspec:"offset=92,sf=TotVArh_SF"`
	TotVArhExpQ4    Acc32       `sunspec:"offset=94,sf=TotVArh_SF"`
	TotVArhExpQ4PhA Acc32       `sunspec:"offset=96,sf=TotVArh_SF"`
	TotVArhExpQ4PhB Acc32       `sunspec:"offset=98,sf=TotVArh_SF"`
	TotVArhExpQ4PhC Acc32       `sunspec:"offset=100,sf=TotVArh_SF"`
	TotVArh_SF      ScaleFactor `sunspec:"offset=102"`
	Evt             Bitfield32  `sunspec:"offset=103"`
}

func (self *Block202) GetId() ModelId {
	return 202
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     202,
		Name:   "ac_meter",
		Length: 105,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 105,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 1, Type: "int16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "AphB", Offset: 2, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 3, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "A_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "PhV", Offset: 5, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphA", Offset: 6, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 7, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphC", Offset: 8, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPV", Offset: 9, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphAB", Offset: 10, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphBC", Offset: 11, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphCA", Offset: 12, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "V_SF", Offset: 13, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 14, Type: "int16", ScaleFactor: "Hz_SF", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 15, Type: "sunssf"},
					smdx.PointElement{Id: "W", Offset: 16, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WphA", Offset: 17, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "WphB", Offset: 18, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "WphC", Offset: 19, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "W_SF", Offset: 20, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 21, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphA", Offset: 22, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphB", Offset: 23, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphC", Offset: 24, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VA_SF", Offset: 25, Type: "sunssf"},
					smdx.PointElement{Id: "VAR", Offset: 26, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphA", Offset: 27, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphB", Offset: 28, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphC", Offset: 29, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VAR_SF", Offset: 30, Type: "sunssf"},
					smdx.PointElement{Id: "PF", Offset: 31, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphA", Offset: 32, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphB", Offset: 33, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphC", Offset: 34, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PF_SF", Offset: 35, Type: "sunssf"},
					smdx.PointElement{Id: "TotWhExp", Offset: 36, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhExpPhA", Offset: 38, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhB", Offset: 40, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhC", Offset: 42, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImp", Offset: 44, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImpPhA", Offset: 46, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhB", Offset: 48, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhC", Offset: 50, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWh_SF", Offset: 52, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "TotVAhExp", Offset: 53, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhA", Offset: 55, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhB", Offset: 57, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhC", Offset: 59, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 61, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhA", Offset: 63, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhB", Offset: 65, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhC", Offset: 67, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAh_SF", Offset: 69, Type: "sunssf"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 70, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhA", Offset: 72, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhB", Offset: 74, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhC", Offset: 76, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 78, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhA", Offset: 80, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhB", Offset: 82, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhC", Offset: 84, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 86, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhA", Offset: 88, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhB", Offset: 90, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhC", Offset: 92, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 94, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhA", Offset: 96, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhB", Offset: 98, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhC", Offset: 100, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArh_SF", Offset: 102, Type: "sunssf"},
					smdx.PointElement{Id: "Evt", Offset: 103, Type: "bitfield32", Mandatory: true},
				},
			},
		}})
}

// Block203 - wye-connect three phase (abcn) meter -

type Block203 struct {
	A               int16       `sunspec:"offset=0,sf=A_SF"`
	AphA            int16       `sunspec:"offset=1,sf=A_SF"`
	AphB            int16       `sunspec:"offset=2,sf=A_SF"`
	AphC            int16       `sunspec:"offset=3,sf=A_SF"`
	A_SF            ScaleFactor `sunspec:"offset=4"`
	PhV             int16       `sunspec:"offset=5,sf=V_SF"`
	PhVphA          int16       `sunspec:"offset=6,sf=V_SF"`
	PhVphB          int16       `sunspec:"offset=7,sf=V_SF"`
	PhVphC          int16       `sunspec:"offset=8,sf=V_SF"`
	PPV             int16       `sunspec:"offset=9,sf=V_SF"`
	PhVphAB         int16       `sunspec:"offset=10,sf=V_SF"`
	PhVphBC         int16       `sunspec:"offset=11,sf=V_SF"`
	PhVphCA         int16       `sunspec:"offset=12,sf=V_SF"`
	V_SF            ScaleFactor `sunspec:"offset=13"`
	Hz              int16       `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF           ScaleFactor `sunspec:"offset=15"`
	W               int16       `sunspec:"offset=16,sf=W_SF"`
	WphA            int16       `sunspec:"offset=17,sf=W_SF"`
	WphB            int16       `sunspec:"offset=18,sf=W_SF"`
	WphC            int16       `sunspec:"offset=19,sf=W_SF"`
	W_SF            ScaleFactor `sunspec:"offset=20"`
	VA              int16       `sunspec:"offset=21,sf=VA_SF"`
	VAphA           int16       `sunspec:"offset=22,sf=VA_SF"`
	VAphB           int16       `sunspec:"offset=23,sf=VA_SF"`
	VAphC           int16       `sunspec:"offset=24,sf=VA_SF"`
	VA_SF           ScaleFactor `sunspec:"offset=25"`
	VAR             int16       `sunspec:"offset=26,sf=VAR_SF"`
	VARphA          int16       `sunspec:"offset=27,sf=VAR_SF"`
	VARphB          int16       `sunspec:"offset=28,sf=VAR_SF"`
	VARphC          int16       `sunspec:"offset=29,sf=VAR_SF"`
	VAR_SF          ScaleFactor `sunspec:"offset=30"`
	PF              int16       `sunspec:"offset=31,sf=PF_SF"`
	PFphA           int16       `sunspec:"offset=32,sf=PF_SF"`
	PFphB           int16       `sunspec:"offset=33,sf=PF_SF"`
	PFphC           int16       `sunspec:"offset=34,sf=PF_SF"`
	PF_SF           ScaleFactor `sunspec:"offset=35"`
	TotWhExp        Acc32       `sunspec:"offset=36,sf=TotWh_SF"`
	TotWhExpPhA     Acc32       `sunspec:"offset=38,sf=TotWh_SF"`
	TotWhExpPhB     Acc32       `sunspec:"offset=40,sf=TotWh_SF"`
	TotWhExpPhC     Acc32       `sunspec:"offset=42,sf=TotWh_SF"`
	TotWhImp        Acc32       `sunspec:"offset=44,sf=TotWh_SF"`
	TotWhImpPhA     Acc32       `sunspec:"offset=46,sf=TotWh_SF"`
	TotWhImpPhB     Acc32       `sunspec:"offset=48,sf=TotWh_SF"`
	TotWhImpPhC     Acc32       `sunspec:"offset=50,sf=TotWh_SF"`
	TotWh_SF        ScaleFactor `sunspec:"offset=52"`
	TotVAhExp       Acc32       `sunspec:"offset=53,sf=TotVAh_SF"`
	TotVAhExpPhA    Acc32       `sunspec:"offset=55,sf=TotVAh_SF"`
	TotVAhExpPhB    Acc32       `sunspec:"offset=57,sf=TotVAh_SF"`
	TotVAhExpPhC    Acc32       `sunspec:"offset=59,sf=TotVAh_SF"`
	TotVAhImp       Acc32       `sunspec:"offset=61,sf=TotVAh_SF"`
	TotVAhImpPhA    Acc32       `sunspec:"offset=63,sf=TotVAh_SF"`
	TotVAhImpPhB    Acc32       `sunspec:"offset=65,sf=TotVAh_SF"`
	TotVAhImpPhC    Acc32       `sunspec:"offset=67,sf=TotVAh_SF"`
	TotVAh_SF       ScaleFactor `sunspec:"offset=69"`
	TotVArhImpQ1    Acc32       `sunspec:"offset=70,sf=TotVArh_SF"`
	TotVArhImpQ1PhA Acc32       `sunspec:"offset=72,sf=TotVArh_SF"`
	TotVArhImpQ1PhB Acc32       `sunspec:"offset=74,sf=TotVArh_SF"`
	TotVArhImpQ1PhC Acc32       `sunspec:"offset=76,sf=TotVArh_SF"`
	TotVArhImpQ2    Acc32       `sunspec:"offset=78,sf=TotVArh_SF"`
	TotVArhImpQ2PhA Acc32       `sunspec:"offset=80,sf=TotVArh_SF"`
	TotVArhImpQ2PhB Acc32       `sunspec:"offset=82,sf=TotVArh_SF"`
	TotVArhImpQ2PhC Acc32       `sunspec:"offset=84,sf=TotVArh_SF"`
	TotVArhExpQ3    Acc32       `sunspec:"offset=86,sf=TotVArh_SF"`
	TotVArhExpQ3PhA Acc32       `sunspec:"offset=88,sf=TotVArh_SF"`
	TotVArhExpQ3PhB Acc32       `sunspec:"offset=90,sf=TotVArh_SF"`
	TotVArhExpQ3PhC Acc32       `sunspec:"offset=92,sf=TotVArh_SF"`
	TotVArhExpQ4    Acc32       `sunspec:"offset=94,sf=TotVArh_SF"`
	TotVArhExpQ4PhA Acc32       `sunspec:"offset=96,sf=TotVArh_SF"`
	TotVArhExpQ4PhB Acc32       `sunspec:"offset=98,sf=TotVArh_SF"`
	TotVArhExpQ4PhC Acc32       `sunspec:"offset=100,sf=TotVArh_SF"`
	TotVArh_SF      ScaleFactor `sunspec:"offset=102"`
	Evt             Bitfield32  `sunspec:"offset=103"`
}

func (self *Block203) GetId() ModelId {
	return 203
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     203,
		Name:   "ac_meter",
		Length: 105,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 105,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 1, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 2, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 3, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "A_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "PhV", Offset: 5, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphA", Offset: 6, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 7, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphC", Offset: 8, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPV", Offset: 9, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphAB", Offset: 10, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphBC", Offset: 11, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphCA", Offset: 12, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 13, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 14, Type: "int16", ScaleFactor: "Hz_SF", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 15, Type: "sunssf"},
					smdx.PointElement{Id: "W", Offset: 16, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WphA", Offset: 17, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "WphB", Offset: 18, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "WphC", Offset: 19, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "W_SF", Offset: 20, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 21, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphA", Offset: 22, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphB", Offset: 23, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphC", Offset: 24, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VA_SF", Offset: 25, Type: "sunssf"},
					smdx.PointElement{Id: "VAR", Offset: 26, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphA", Offset: 27, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphB", Offset: 28, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphC", Offset: 29, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VAR_SF", Offset: 30, Type: "sunssf"},
					smdx.PointElement{Id: "PF", Offset: 31, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphA", Offset: 32, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphB", Offset: 33, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphC", Offset: 34, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PF_SF", Offset: 35, Type: "sunssf"},
					smdx.PointElement{Id: "TotWhExp", Offset: 36, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhExpPhA", Offset: 38, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhB", Offset: 40, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhC", Offset: 42, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImp", Offset: 44, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImpPhA", Offset: 46, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhB", Offset: 48, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhC", Offset: 50, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWh_SF", Offset: 52, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "TotVAhExp", Offset: 53, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhA", Offset: 55, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhB", Offset: 57, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhC", Offset: 59, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 61, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhA", Offset: 63, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhB", Offset: 65, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhC", Offset: 67, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAh_SF", Offset: 69, Type: "sunssf"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 70, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhA", Offset: 72, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhB", Offset: 74, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhC", Offset: 76, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 78, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhA", Offset: 80, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhB", Offset: 82, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhC", Offset: 84, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 86, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhA", Offset: 88, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhB", Offset: 90, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhC", Offset: 92, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 94, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhA", Offset: 96, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhB", Offset: 98, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhC", Offset: 100, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArh_SF", Offset: 102, Type: "sunssf"},
					smdx.PointElement{Id: "Evt", Offset: 103, Type: "bitfield32", Mandatory: true},
				},
			},
		}})
}

// Block204 - delta-connect three phase (abc) meter -

type Block204 struct {
	A               int16       `sunspec:"offset=0,sf=A_SF"`
	AphA            int16       `sunspec:"offset=1,sf=A_SF"`
	AphB            int16       `sunspec:"offset=2,sf=A_SF"`
	AphC            int16       `sunspec:"offset=3,sf=A_SF"`
	A_SF            ScaleFactor `sunspec:"offset=4"`
	PhV             int16       `sunspec:"offset=5,sf=V_SF"`
	PhVphA          int16       `sunspec:"offset=6,sf=V_SF"`
	PhVphB          int16       `sunspec:"offset=7,sf=V_SF"`
	PhVphC          int16       `sunspec:"offset=8,sf=V_SF"`
	PPV             int16       `sunspec:"offset=9,sf=V_SF"`
	PhVphAB         int16       `sunspec:"offset=10,sf=V_SF"`
	PhVphBC         int16       `sunspec:"offset=11,sf=V_SF"`
	PhVphCA         int16       `sunspec:"offset=12,sf=V_SF"`
	V_SF            ScaleFactor `sunspec:"offset=13"`
	Hz              int16       `sunspec:"offset=14,sf=Hz_SF"`
	Hz_SF           ScaleFactor `sunspec:"offset=15"`
	W               int16       `sunspec:"offset=16,sf=W_SF"`
	WphA            int16       `sunspec:"offset=17,sf=W_SF"`
	WphB            int16       `sunspec:"offset=18,sf=W_SF"`
	WphC            int16       `sunspec:"offset=19,sf=W_SF"`
	W_SF            ScaleFactor `sunspec:"offset=20"`
	VA              int16       `sunspec:"offset=21,sf=VA_SF"`
	VAphA           int16       `sunspec:"offset=22,sf=VA_SF"`
	VAphB           int16       `sunspec:"offset=23,sf=VA_SF"`
	VAphC           int16       `sunspec:"offset=24,sf=VA_SF"`
	VA_SF           ScaleFactor `sunspec:"offset=25"`
	VAR             int16       `sunspec:"offset=26,sf=VAR_SF"`
	VARphA          int16       `sunspec:"offset=27,sf=VAR_SF"`
	VARphB          int16       `sunspec:"offset=28,sf=VAR_SF"`
	VARphC          int16       `sunspec:"offset=29,sf=VAR_SF"`
	VAR_SF          ScaleFactor `sunspec:"offset=30"`
	PF              int16       `sunspec:"offset=31,sf=PF_SF"`
	PFphA           int16       `sunspec:"offset=32,sf=PF_SF"`
	PFphB           int16       `sunspec:"offset=33,sf=PF_SF"`
	PFphC           int16       `sunspec:"offset=34,sf=PF_SF"`
	PF_SF           ScaleFactor `sunspec:"offset=35"`
	TotWhExp        Acc32       `sunspec:"offset=36,sf=TotWh_SF"`
	TotWhExpPhA     Acc32       `sunspec:"offset=38,sf=TotWh_SF"`
	TotWhExpPhB     Acc32       `sunspec:"offset=40,sf=TotWh_SF"`
	TotWhExpPhC     Acc32       `sunspec:"offset=42,sf=TotWh_SF"`
	TotWhImp        Acc32       `sunspec:"offset=44,sf=TotWh_SF"`
	TotWhImpPhA     Acc32       `sunspec:"offset=46,sf=TotWh_SF"`
	TotWhImpPhB     Acc32       `sunspec:"offset=48,sf=TotWh_SF"`
	TotWhImpPhC     Acc32       `sunspec:"offset=50,sf=TotWh_SF"`
	TotWh_SF        ScaleFactor `sunspec:"offset=52"`
	TotVAhExp       Acc32       `sunspec:"offset=53,sf=TotVAh_SF"`
	TotVAhExpPhA    Acc32       `sunspec:"offset=55,sf=TotVAh_SF"`
	TotVAhExpPhB    Acc32       `sunspec:"offset=57,sf=TotVAh_SF"`
	TotVAhExpPhC    Acc32       `sunspec:"offset=59,sf=TotVAh_SF"`
	TotVAhImp       Acc32       `sunspec:"offset=61,sf=TotVAh_SF"`
	TotVAhImpPhA    Acc32       `sunspec:"offset=63,sf=TotVAh_SF"`
	TotVAhImpPhB    Acc32       `sunspec:"offset=65,sf=TotVAh_SF"`
	TotVAhImpPhC    Acc32       `sunspec:"offset=67,sf=TotVAh_SF"`
	TotVAh_SF       ScaleFactor `sunspec:"offset=69"`
	TotVArhImpQ1    Acc32       `sunspec:"offset=70,sf=TotVArh_SF"`
	TotVArhImpQ1PhA Acc32       `sunspec:"offset=72,sf=TotVArh_SF"`
	TotVArhImpQ1PhB Acc32       `sunspec:"offset=74,sf=TotVArh_SF"`
	TotVArhImpQ1PhC Acc32       `sunspec:"offset=76,sf=TotVArh_SF"`
	TotVArhImpQ2    Acc32       `sunspec:"offset=78,sf=TotVArh_SF"`
	TotVArhImpQ2PhA Acc32       `sunspec:"offset=80,sf=TotVArh_SF"`
	TotVArhImpQ2PhB Acc32       `sunspec:"offset=82,sf=TotVArh_SF"`
	TotVArhImpQ2PhC Acc32       `sunspec:"offset=84,sf=TotVArh_SF"`
	TotVArhExpQ3    Acc32       `sunspec:"offset=86,sf=TotVArh_SF"`
	TotVArhExpQ3PhA Acc32       `sunspec:"offset=88,sf=TotVArh_SF"`
	TotVArhExpQ3PhB Acc32       `sunspec:"offset=90,sf=TotVArh_SF"`
	TotVArhExpQ3PhC Acc32       `sunspec:"offset=92,sf=TotVArh_SF"`
	TotVArhExpQ4    Acc32       `sunspec:"offset=94,sf=TotVArh_SF"`
	TotVArhExpQ4PhA Acc32       `sunspec:"offset=96,sf=TotVArh_SF"`
	TotVArhExpQ4PhB Acc32       `sunspec:"offset=98,sf=TotVArh_SF"`
	TotVArhExpQ4PhC Acc32       `sunspec:"offset=100,sf=TotVArh_SF"`
	TotVArh_SF      ScaleFactor `sunspec:"offset=102"`
	Evt             Bitfield32  `sunspec:"offset=103"`
}

func (self *Block204) GetId() ModelId {
	return 204
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     204,
		Name:   "ac_meter",
		Length: 105,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 105,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 1, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 2, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 3, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "A_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "PhV", Offset: 5, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 6, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphB", Offset: 7, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PhVphC", Offset: 8, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "PPV", Offset: 9, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphAB", Offset: 10, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphBC", Offset: 11, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphCA", Offset: 12, Type: "int16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 13, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 14, Type: "int16", ScaleFactor: "Hz_SF", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 15, Type: "sunssf"},
					smdx.PointElement{Id: "W", Offset: 16, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WphA", Offset: 17, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "WphB", Offset: 18, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "WphC", Offset: 19, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "W_SF", Offset: 20, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 21, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphA", Offset: 22, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphB", Offset: 23, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VAphC", Offset: 24, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VA_SF", Offset: 25, Type: "sunssf"},
					smdx.PointElement{Id: "VAR", Offset: 26, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphA", Offset: 27, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphB", Offset: 28, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VARphC", Offset: 29, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VAR_SF", Offset: 30, Type: "sunssf"},
					smdx.PointElement{Id: "PF", Offset: 31, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphA", Offset: 32, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphB", Offset: 33, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PFphC", Offset: 34, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PF_SF", Offset: 35, Type: "sunssf"},
					smdx.PointElement{Id: "TotWhExp", Offset: 36, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhExpPhA", Offset: 38, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhB", Offset: 40, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhC", Offset: 42, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImp", Offset: 44, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImpPhA", Offset: 46, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhB", Offset: 48, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhC", Offset: 50, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "TotWh_SF", Offset: 52, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "TotVAhExp", Offset: 53, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhA", Offset: 55, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhB", Offset: 57, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhC", Offset: 59, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 61, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhA", Offset: 63, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhB", Offset: 65, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhC", Offset: 67, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAh_SF", Offset: 69, Type: "sunssf"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 70, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhA", Offset: 72, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhB", Offset: 74, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1PhC", Offset: 76, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 78, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhA", Offset: 80, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhB", Offset: 82, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2PhC", Offset: 84, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 86, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhA", Offset: 88, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhB", Offset: 90, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3PhC", Offset: 92, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 94, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhA", Offset: 96, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhB", Offset: 98, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4PhC", Offset: 100, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArh_SF", Offset: 102, Type: "sunssf"},
					smdx.PointElement{Id: "Evt", Offset: 103, Type: "bitfield32", Mandatory: true},
				},
			},
		}})
}

// Block211 - single phase (AN or AB) meter -

type Block211 struct {
	A               float32    `sunspec:"offset=0"`
	AphA            float32    `sunspec:"offset=2"`
	AphB            float32    `sunspec:"offset=4"`
	AphC            float32    `sunspec:"offset=6"`
	PhV             float32    `sunspec:"offset=8"`
	PhVphA          float32    `sunspec:"offset=10"`
	PhVphB          float32    `sunspec:"offset=12"`
	PhVphC          float32    `sunspec:"offset=14"`
	PPV             float32    `sunspec:"offset=16"`
	PPVphAB         float32    `sunspec:"offset=18"`
	PPVphBC         float32    `sunspec:"offset=20"`
	PPVphCA         float32    `sunspec:"offset=22"`
	Hz              float32    `sunspec:"offset=24"`
	W               float32    `sunspec:"offset=26"`
	WphA            float32    `sunspec:"offset=28"`
	WphB            float32    `sunspec:"offset=30"`
	WphC            float32    `sunspec:"offset=32"`
	VA              float32    `sunspec:"offset=34"`
	VAphA           float32    `sunspec:"offset=36"`
	VAphB           float32    `sunspec:"offset=38"`
	VAphC           float32    `sunspec:"offset=40"`
	VAR             float32    `sunspec:"offset=42"`
	VARphA          float32    `sunspec:"offset=44"`
	VARphB          float32    `sunspec:"offset=46"`
	VARphC          float32    `sunspec:"offset=48"`
	PF              float32    `sunspec:"offset=50"`
	PFphA           float32    `sunspec:"offset=52"`
	PFphB           float32    `sunspec:"offset=54"`
	PFphC           float32    `sunspec:"offset=56"`
	TotWhExp        float32    `sunspec:"offset=58"`
	TotWhExpPhA     float32    `sunspec:"offset=60"`
	TotWhExpPhB     float32    `sunspec:"offset=62"`
	TotWhExpPhC     float32    `sunspec:"offset=64"`
	TotWhImp        float32    `sunspec:"offset=66"`
	TotWhImpPhA     float32    `sunspec:"offset=68"`
	TotWhImpPhB     float32    `sunspec:"offset=70"`
	TotWhImpPhC     float32    `sunspec:"offset=72"`
	TotVAhExp       float32    `sunspec:"offset=74"`
	TotVAhExpPhA    float32    `sunspec:"offset=76"`
	TotVAhExpPhB    float32    `sunspec:"offset=78"`
	TotVAhExpPhC    float32    `sunspec:"offset=80"`
	TotVAhImp       float32    `sunspec:"offset=82"`
	TotVAhImpPhA    float32    `sunspec:"offset=84"`
	TotVAhImpPhB    float32    `sunspec:"offset=86"`
	TotVAhImpPhC    float32    `sunspec:"offset=88"`
	TotVArhImpQ1    float32    `sunspec:"offset=90"`
	TotVArhImpQ1phA float32    `sunspec:"offset=92"`
	TotVArhImpQ1phB float32    `sunspec:"offset=94"`
	TotVArhImpQ1phC float32    `sunspec:"offset=96"`
	TotVArhImpQ2    float32    `sunspec:"offset=98"`
	TotVArhImpQ2phA float32    `sunspec:"offset=100"`
	TotVArhImpQ2phB float32    `sunspec:"offset=102"`
	TotVArhImpQ2phC float32    `sunspec:"offset=104"`
	TotVArhExpQ3    float32    `sunspec:"offset=106"`
	TotVArhExpQ3phA float32    `sunspec:"offset=108"`
	TotVArhExpQ3phB float32    `sunspec:"offset=110"`
	TotVArhExpQ3phC float32    `sunspec:"offset=112"`
	TotVArhExpQ4    float32    `sunspec:"offset=114"`
	TotVArhExpQ4phA float32    `sunspec:"offset=116"`
	TotVArhExpQ4phB float32    `sunspec:"offset=118"`
	TotVArhExpQ4phC float32    `sunspec:"offset=120"`
	Evt             Bitfield32 `sunspec:"offset=122"`
}

func (self *Block211) GetId() ModelId {
	return 211
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     211,
		Name:   "ac_meter",
		Length: 124,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 124,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 2, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 4, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "AphC", Offset: 6, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "PhV", Offset: 8, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 10, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphB", Offset: 12, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphC", Offset: 14, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPV", Offset: 16, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphAB", Offset: 18, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphBC", Offset: 20, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 22, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "Hz", Offset: 24, Type: "float32", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "W", Offset: 26, Type: "float32", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WphA", Offset: 28, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "WphB", Offset: 30, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "WphC", Offset: 32, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "VA", Offset: 34, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphA", Offset: 36, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphB", Offset: 38, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphC", Offset: 40, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAR", Offset: 42, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphA", Offset: 44, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphB", Offset: 46, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphC", Offset: 48, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "PF", Offset: 50, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphA", Offset: 52, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphB", Offset: 54, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphC", Offset: 56, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "TotWhExp", Offset: 58, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhExpPhA", Offset: 60, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhB", Offset: 62, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhC", Offset: 64, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImp", Offset: 66, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImpPhA", Offset: 68, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhB", Offset: 70, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhC", Offset: 72, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotVAhExp", Offset: 74, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhA", Offset: 76, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhB", Offset: 78, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhC", Offset: 80, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 82, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhA", Offset: 84, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhB", Offset: 86, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhC", Offset: 88, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 90, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phA", Offset: 92, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phB", Offset: 94, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phC", Offset: 96, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 98, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phA", Offset: 100, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phB", Offset: 102, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phC", Offset: 104, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 106, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phA", Offset: 108, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phB", Offset: 110, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phC", Offset: 112, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 114, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phA", Offset: 116, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phB", Offset: 118, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phC", Offset: 120, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "Evt", Offset: 122, Type: "bitfield32", Mandatory: true},
				},
			},
		}})
}

// Block212 - split single phase (ABN) meter -

type Block212 struct {
	A               float32    `sunspec:"offset=0"`
	AphA            float32    `sunspec:"offset=2"`
	AphB            float32    `sunspec:"offset=4"`
	AphC            float32    `sunspec:"offset=6"`
	PhV             float32    `sunspec:"offset=8"`
	PhVphA          float32    `sunspec:"offset=10"`
	PhVphB          float32    `sunspec:"offset=12"`
	PhVphC          float32    `sunspec:"offset=14"`
	PPV             float32    `sunspec:"offset=16"`
	PPVphAB         float32    `sunspec:"offset=18"`
	PPVphBC         float32    `sunspec:"offset=20"`
	PPVphCA         float32    `sunspec:"offset=22"`
	Hz              float32    `sunspec:"offset=24"`
	W               float32    `sunspec:"offset=26"`
	WphA            float32    `sunspec:"offset=28"`
	WphB            float32    `sunspec:"offset=30"`
	WphC            float32    `sunspec:"offset=32"`
	VA              float32    `sunspec:"offset=34"`
	VAphA           float32    `sunspec:"offset=36"`
	VAphB           float32    `sunspec:"offset=38"`
	VAphC           float32    `sunspec:"offset=40"`
	VAR             float32    `sunspec:"offset=42"`
	VARphA          float32    `sunspec:"offset=44"`
	VARphB          float32    `sunspec:"offset=46"`
	VARphC          float32    `sunspec:"offset=48"`
	PF              float32    `sunspec:"offset=50"`
	PFphA           float32    `sunspec:"offset=52"`
	PFphB           float32    `sunspec:"offset=54"`
	PFphC           float32    `sunspec:"offset=56"`
	TotWhExp        float32    `sunspec:"offset=58"`
	TotWhExpPhA     float32    `sunspec:"offset=60"`
	TotWhExpPhB     float32    `sunspec:"offset=62"`
	TotWhExpPhC     float32    `sunspec:"offset=64"`
	TotWhImp        float32    `sunspec:"offset=66"`
	TotWhImpPhA     float32    `sunspec:"offset=68"`
	TotWhImpPhB     float32    `sunspec:"offset=70"`
	TotWhImpPhC     float32    `sunspec:"offset=72"`
	TotVAhExp       float32    `sunspec:"offset=74"`
	TotVAhExpPhA    float32    `sunspec:"offset=76"`
	TotVAhExpPhB    float32    `sunspec:"offset=78"`
	TotVAhExpPhC    float32    `sunspec:"offset=80"`
	TotVAhImp       float32    `sunspec:"offset=82"`
	TotVAhImpPhA    float32    `sunspec:"offset=84"`
	TotVAhImpPhB    float32    `sunspec:"offset=86"`
	TotVAhImpPhC    float32    `sunspec:"offset=88"`
	TotVArhImpQ1    float32    `sunspec:"offset=90"`
	TotVArhImpQ1phA float32    `sunspec:"offset=92"`
	TotVArhImpQ1phB float32    `sunspec:"offset=94"`
	TotVArhImpQ1phC float32    `sunspec:"offset=96"`
	TotVArhImpQ2    float32    `sunspec:"offset=98"`
	TotVArhImpQ2phA float32    `sunspec:"offset=100"`
	TotVArhImpQ2phB float32    `sunspec:"offset=102"`
	TotVArhImpQ2phC float32    `sunspec:"offset=104"`
	TotVArhExpQ3    float32    `sunspec:"offset=106"`
	TotVArhExpQ3phA float32    `sunspec:"offset=108"`
	TotVArhExpQ3phB float32    `sunspec:"offset=110"`
	TotVArhExpQ3phC float32    `sunspec:"offset=112"`
	TotVArhExpQ4    float32    `sunspec:"offset=114"`
	TotVArhExpQ4phA float32    `sunspec:"offset=116"`
	TotVArhExpQ4phB float32    `sunspec:"offset=118"`
	TotVArhExpQ4phC float32    `sunspec:"offset=120"`
	Evt             Bitfield32 `sunspec:"offset=122"`
}

func (self *Block212) GetId() ModelId {
	return 212
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     212,
		Name:   "ac_meter",
		Length: 124,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 124,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 2, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 4, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 6, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "PhV", Offset: 8, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphA", Offset: 10, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 12, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphC", Offset: 14, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPV", Offset: 16, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPVphAB", Offset: 18, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPVphBC", Offset: 20, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPVphCA", Offset: 22, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "Hz", Offset: 24, Type: "float32", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "W", Offset: 26, Type: "float32", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WphA", Offset: 28, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "WphB", Offset: 30, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "WphC", Offset: 32, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "VA", Offset: 34, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphA", Offset: 36, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphB", Offset: 38, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphC", Offset: 40, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAR", Offset: 42, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphA", Offset: 44, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphB", Offset: 46, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphC", Offset: 48, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "PF", Offset: 50, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphA", Offset: 52, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphB", Offset: 54, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphC", Offset: 56, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "TotWhExp", Offset: 58, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhExpPhA", Offset: 60, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhB", Offset: 62, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhC", Offset: 64, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImp", Offset: 66, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImpPhA", Offset: 68, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhB", Offset: 70, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhC", Offset: 72, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotVAhExp", Offset: 74, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhA", Offset: 76, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhB", Offset: 78, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhC", Offset: 80, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 82, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhA", Offset: 84, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhB", Offset: 86, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhC", Offset: 88, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 90, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phA", Offset: 92, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phB", Offset: 94, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phC", Offset: 96, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 98, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phA", Offset: 100, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phB", Offset: 102, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phC", Offset: 104, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 106, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phA", Offset: 108, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phB", Offset: 110, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phC", Offset: 112, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 114, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phA", Offset: 116, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phB", Offset: 118, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phC", Offset: 120, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "Evt", Offset: 122, Type: "bitfield32", Mandatory: true},
				},
			},
		}})
}

// Block213 - wye-connect three phase (abcn) meter -

type Block213 struct {
	A               float32    `sunspec:"offset=0"`
	AphA            float32    `sunspec:"offset=2"`
	AphB            float32    `sunspec:"offset=4"`
	AphC            float32    `sunspec:"offset=6"`
	PhV             float32    `sunspec:"offset=8"`
	PhVphA          float32    `sunspec:"offset=10"`
	PhVphB          float32    `sunspec:"offset=12"`
	PhVphC          float32    `sunspec:"offset=14"`
	PPV             float32    `sunspec:"offset=16"`
	PPVphAB         float32    `sunspec:"offset=18"`
	PPVphBC         float32    `sunspec:"offset=20"`
	PPVphCA         float32    `sunspec:"offset=22"`
	Hz              float32    `sunspec:"offset=24"`
	W               float32    `sunspec:"offset=26"`
	WphA            float32    `sunspec:"offset=28"`
	WphB            float32    `sunspec:"offset=30"`
	WphC            float32    `sunspec:"offset=32"`
	VA              float32    `sunspec:"offset=34"`
	VAphA           float32    `sunspec:"offset=36"`
	VAphB           float32    `sunspec:"offset=38"`
	VAphC           float32    `sunspec:"offset=40"`
	VAR             float32    `sunspec:"offset=42"`
	VARphA          float32    `sunspec:"offset=44"`
	VARphB          float32    `sunspec:"offset=46"`
	VARphC          float32    `sunspec:"offset=48"`
	PF              float32    `sunspec:"offset=50"`
	PFphA           float32    `sunspec:"offset=52"`
	PFphB           float32    `sunspec:"offset=54"`
	PFphC           float32    `sunspec:"offset=56"`
	TotWhExp        float32    `sunspec:"offset=58"`
	TotWhExpPhA     float32    `sunspec:"offset=60"`
	TotWhExpPhB     float32    `sunspec:"offset=62"`
	TotWhExpPhC     float32    `sunspec:"offset=64"`
	TotWhImp        float32    `sunspec:"offset=66"`
	TotWhImpPhA     float32    `sunspec:"offset=68"`
	TotWhImpPhB     float32    `sunspec:"offset=70"`
	TotWhImpPhC     float32    `sunspec:"offset=72"`
	TotVAhExp       float32    `sunspec:"offset=74"`
	TotVAhExpPhA    float32    `sunspec:"offset=76"`
	TotVAhExpPhB    float32    `sunspec:"offset=78"`
	TotVAhExpPhC    float32    `sunspec:"offset=80"`
	TotVAhImp       float32    `sunspec:"offset=82"`
	TotVAhImpPhA    float32    `sunspec:"offset=84"`
	TotVAhImpPhB    float32    `sunspec:"offset=86"`
	TotVAhImpPhC    float32    `sunspec:"offset=88"`
	TotVArhImpQ1    float32    `sunspec:"offset=90"`
	TotVArhImpQ1phA float32    `sunspec:"offset=92"`
	TotVArhImpQ1phB float32    `sunspec:"offset=94"`
	TotVArhImpQ1phC float32    `sunspec:"offset=96"`
	TotVArhImpQ2    float32    `sunspec:"offset=98"`
	TotVArhImpQ2phA float32    `sunspec:"offset=100"`
	TotVArhImpQ2phB float32    `sunspec:"offset=102"`
	TotVArhImpQ2phC float32    `sunspec:"offset=104"`
	TotVArhExpQ3    float32    `sunspec:"offset=106"`
	TotVArhExpQ3phA float32    `sunspec:"offset=108"`
	TotVArhExpQ3phB float32    `sunspec:"offset=110"`
	TotVArhExpQ3phC float32    `sunspec:"offset=112"`
	TotVArhExpQ4    float32    `sunspec:"offset=114"`
	TotVArhExpQ4phA float32    `sunspec:"offset=116"`
	TotVArhExpQ4phB float32    `sunspec:"offset=118"`
	TotVArhExpQ4phC float32    `sunspec:"offset=120"`
	Evt             Bitfield32 `sunspec:"offset=122"`
}

func (self *Block213) GetId() ModelId {
	return 213
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     213,
		Name:   "ac_meter",
		Length: 124,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 124,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 2, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 4, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 6, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "PhV", Offset: 8, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphA", Offset: 10, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphB", Offset: 12, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PhVphC", Offset: 14, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPV", Offset: 16, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPVphAB", Offset: 18, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPVphBC", Offset: 20, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPVphCA", Offset: 22, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 24, Type: "float32", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "W", Offset: 26, Type: "float32", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WphA", Offset: 28, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "WphB", Offset: 30, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "WphC", Offset: 32, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "VA", Offset: 34, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphA", Offset: 36, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphB", Offset: 38, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphC", Offset: 40, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAR", Offset: 42, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphA", Offset: 44, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphB", Offset: 46, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphC", Offset: 48, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "PF", Offset: 50, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphA", Offset: 52, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphB", Offset: 54, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphC", Offset: 56, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "TotWhExp", Offset: 58, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhExpPhA", Offset: 60, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhB", Offset: 62, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhC", Offset: 64, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImp", Offset: 66, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImpPhA", Offset: 68, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhB", Offset: 70, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhC", Offset: 72, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotVAhExp", Offset: 74, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhA", Offset: 76, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhB", Offset: 78, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhC", Offset: 80, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 82, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhA", Offset: 84, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhB", Offset: 86, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhC", Offset: 88, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 90, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phA", Offset: 92, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phB", Offset: 94, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phC", Offset: 96, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 98, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phA", Offset: 100, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phB", Offset: 102, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phC", Offset: 104, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 106, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phA", Offset: 108, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phB", Offset: 110, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phC", Offset: 112, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 114, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phA", Offset: 116, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phB", Offset: 118, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phC", Offset: 120, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "Evt", Offset: 122, Type: "bitfield32", Mandatory: true},
				},
			},
		}})
}

// Block214 - delta-connect three phase (abc) meter -

type Block214 struct {
	A               float32    `sunspec:"offset=0"`
	AphA            float32    `sunspec:"offset=2"`
	AphB            float32    `sunspec:"offset=4"`
	AphC            float32    `sunspec:"offset=6"`
	PhV             float32    `sunspec:"offset=8"`
	PhVphA          float32    `sunspec:"offset=10"`
	PhVphB          float32    `sunspec:"offset=12"`
	PhVphC          float32    `sunspec:"offset=14"`
	PPV             float32    `sunspec:"offset=16"`
	PPVphAB         float32    `sunspec:"offset=18"`
	PPVphBC         float32    `sunspec:"offset=20"`
	PPVphCA         float32    `sunspec:"offset=22"`
	Hz              float32    `sunspec:"offset=24"`
	W               float32    `sunspec:"offset=26"`
	WphA            float32    `sunspec:"offset=28"`
	WphB            float32    `sunspec:"offset=30"`
	WphC            float32    `sunspec:"offset=32"`
	VA              float32    `sunspec:"offset=34"`
	VAphA           float32    `sunspec:"offset=36"`
	VAphB           float32    `sunspec:"offset=38"`
	VAphC           float32    `sunspec:"offset=40"`
	VAR             float32    `sunspec:"offset=42"`
	VARphA          float32    `sunspec:"offset=44"`
	VARphB          float32    `sunspec:"offset=46"`
	VARphC          float32    `sunspec:"offset=48"`
	PF              float32    `sunspec:"offset=50"`
	PFphA           float32    `sunspec:"offset=52"`
	PFphB           float32    `sunspec:"offset=54"`
	PFphC           float32    `sunspec:"offset=56"`
	TotWhExp        float32    `sunspec:"offset=58"`
	TotWhExpPhA     float32    `sunspec:"offset=60"`
	TotWhExpPhB     float32    `sunspec:"offset=62"`
	TotWhExpPhC     float32    `sunspec:"offset=64"`
	TotWhImp        float32    `sunspec:"offset=66"`
	TotWhImpPhA     float32    `sunspec:"offset=68"`
	TotWhImpPhB     float32    `sunspec:"offset=70"`
	TotWhImpPhC     float32    `sunspec:"offset=72"`
	TotVAhExp       float32    `sunspec:"offset=74"`
	TotVAhExpPhA    float32    `sunspec:"offset=76"`
	TotVAhExpPhB    float32    `sunspec:"offset=78"`
	TotVAhExpPhC    float32    `sunspec:"offset=80"`
	TotVAhImp       float32    `sunspec:"offset=82"`
	TotVAhImpPhA    float32    `sunspec:"offset=84"`
	TotVAhImpPhB    float32    `sunspec:"offset=86"`
	TotVAhImpPhC    float32    `sunspec:"offset=88"`
	TotVArhImpQ1    float32    `sunspec:"offset=90"`
	TotVArhImpQ1phA float32    `sunspec:"offset=92"`
	TotVArhImpQ1phB float32    `sunspec:"offset=94"`
	TotVArhImpQ1phC float32    `sunspec:"offset=96"`
	TotVArhImpQ2    float32    `sunspec:"offset=98"`
	TotVArhImpQ2phA float32    `sunspec:"offset=100"`
	TotVArhImpQ2phB float32    `sunspec:"offset=102"`
	TotVArhImpQ2phC float32    `sunspec:"offset=104"`
	TotVArhExpQ3    float32    `sunspec:"offset=106"`
	TotVArhExpQ3phA float32    `sunspec:"offset=108"`
	TotVArhExpQ3phB float32    `sunspec:"offset=110"`
	TotVArhExpQ3phC float32    `sunspec:"offset=112"`
	TotVArhExpQ4    float32    `sunspec:"offset=114"`
	TotVArhExpQ4phA float32    `sunspec:"offset=116"`
	TotVArhExpQ4phB float32    `sunspec:"offset=118"`
	TotVArhExpQ4phC float32    `sunspec:"offset=120"`
	Evt             Bitfield32 `sunspec:"offset=122"`
}

func (self *Block214) GetId() ModelId {
	return 214
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     214,
		Name:   "ac_meter",
		Length: 124,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 124,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphA", Offset: 2, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphB", Offset: 4, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AphC", Offset: 6, Type: "float32", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "PhV", Offset: 8, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphA", Offset: 10, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphB", Offset: 12, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PhVphC", Offset: 14, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "PPV", Offset: 16, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPVphAB", Offset: 18, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPVphBC", Offset: 20, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "PPVphCA", Offset: 22, Type: "float32", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 24, Type: "float32", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "W", Offset: 26, Type: "float32", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WphA", Offset: 28, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "WphB", Offset: 30, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "WphC", Offset: 32, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "VA", Offset: 34, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphA", Offset: 36, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphB", Offset: 38, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAphC", Offset: 40, Type: "float32", Units: "VA"},
					smdx.PointElement{Id: "VAR", Offset: 42, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphA", Offset: 44, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphB", Offset: 46, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "VARphC", Offset: 48, Type: "float32", Units: "var"},
					smdx.PointElement{Id: "PF", Offset: 50, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphA", Offset: 52, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphB", Offset: 54, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "PFphC", Offset: 56, Type: "float32", Units: "PF"},
					smdx.PointElement{Id: "TotWhExp", Offset: 58, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhExpPhA", Offset: 60, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhB", Offset: 62, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhExpPhC", Offset: 64, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImp", Offset: 66, Type: "float32", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImpPhA", Offset: 68, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhB", Offset: 70, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotWhImpPhC", Offset: 72, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "TotVAhExp", Offset: 74, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhA", Offset: 76, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhB", Offset: 78, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhExpPhC", Offset: 80, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 82, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhA", Offset: 84, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhB", Offset: 86, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImpPhC", Offset: 88, Type: "float32", Units: "VAh"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 90, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phA", Offset: 92, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phB", Offset: 94, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ1phC", Offset: 96, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 98, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phA", Offset: 100, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phB", Offset: 102, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2phC", Offset: 104, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 106, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phA", Offset: 108, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phB", Offset: 110, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3phC", Offset: 112, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 114, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phA", Offset: 116, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phB", Offset: 118, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4phC", Offset: 120, Type: "float32", Units: "varh"},
					smdx.PointElement{Id: "Evt", Offset: 122, Type: "bitfield32", Mandatory: true},
				},
			},
		}})
}

// Block220 - Secure AC Meter Selected Readings - Include this model for secure metering

type Block220Repeat struct {
	DS uint16 `sunspec:"offset=0,access=r"`
}

type Block220 struct {
	A            int16       `sunspec:"offset=0,sf=A_SF"`
	A_SF         ScaleFactor `sunspec:"offset=1"`
	PhV          int16       `sunspec:"offset=2,sf=V_SF"`
	V_SF         ScaleFactor `sunspec:"offset=3"`
	Hz           int16       `sunspec:"offset=4,sf=Hz_SF"`
	Hz_SF        ScaleFactor `sunspec:"offset=5"`
	W            int16       `sunspec:"offset=6,sf=W_SF"`
	W_SF         ScaleFactor `sunspec:"offset=7"`
	VA           int16       `sunspec:"offset=8,sf=VA_SF"`
	VA_SF        ScaleFactor `sunspec:"offset=9"`
	VAR          int16       `sunspec:"offset=10,sf=VAR_SF"`
	VAR_SF       ScaleFactor `sunspec:"offset=11"`
	PF           int16       `sunspec:"offset=12,sf=PF_SF"`
	PF_SF        ScaleFactor `sunspec:"offset=13"`
	TotWhExp     Acc32       `sunspec:"offset=14,sf=TotWh_SF"`
	TotWhImp     Acc32       `sunspec:"offset=16,sf=TotWh_SF"`
	TotWh_SF     ScaleFactor `sunspec:"offset=18"`
	TotVAhExp    Acc32       `sunspec:"offset=19,sf=TotVAh_SF"`
	TotVAhImp    Acc32       `sunspec:"offset=21,sf=TotVAh_SF"`
	TotVAh_SF    ScaleFactor `sunspec:"offset=23"`
	TotVArhImpQ1 Acc32       `sunspec:"offset=24,sf=TotVArh_SF"`
	TotVArhImpQ2 Acc32       `sunspec:"offset=26,sf=TotVArh_SF"`
	TotVArhExpQ3 Acc32       `sunspec:"offset=28,sf=TotVArh_SF"`
	TotVArhExpQ4 Acc32       `sunspec:"offset=30,sf=TotVArh_SF"`
	TotVArh_SF   ScaleFactor `sunspec:"offset=32"`
	Evt          Bitfield32  `sunspec:"offset=33"`
	Rsrvd        Pad         `sunspec:"offset=35,access=r"`
	Ts           uint32      `sunspec:"offset=36,access=r"`
	Ms           uint16      `sunspec:"offset=38,access=r"`
	Seq          uint16      `sunspec:"offset=39,access=r"`
	Alg          Enum16      `sunspec:"offset=40,access=r"`
	N            uint16      `sunspec:"offset=41,access=r"`

	Repeats []Block220Repeat
}

func (self *Block220) GetId() ModelId {
	return 220
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     220,
		Name:   "ac_meter",
		Length: 43,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 42,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A", Offset: 0, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "A_SF", Offset: 1, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "PhV", Offset: 2, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "V_SF", Offset: 3, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Hz", Offset: 4, Type: "int16", ScaleFactor: "Hz_SF", Units: "Hz", Mandatory: true},
					smdx.PointElement{Id: "Hz_SF", Offset: 5, Type: "sunssf"},
					smdx.PointElement{Id: "W", Offset: 6, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "W_SF", Offset: 7, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "VA", Offset: 8, Type: "int16", ScaleFactor: "VA_SF", Units: "VA"},
					smdx.PointElement{Id: "VA_SF", Offset: 9, Type: "sunssf"},
					smdx.PointElement{Id: "VAR", Offset: 10, Type: "int16", ScaleFactor: "VAR_SF", Units: "var"},
					smdx.PointElement{Id: "VAR_SF", Offset: 11, Type: "sunssf"},
					smdx.PointElement{Id: "PF", Offset: 12, Type: "int16", ScaleFactor: "PF_SF", Units: "Pct"},
					smdx.PointElement{Id: "PF_SF", Offset: 13, Type: "sunssf"},
					smdx.PointElement{Id: "TotWhExp", Offset: 14, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWhImp", Offset: 16, Type: "acc32", ScaleFactor: "TotWh_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "TotWh_SF", Offset: 18, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "TotVAhExp", Offset: 19, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAhImp", Offset: 21, Type: "acc32", ScaleFactor: "TotVAh_SF", Units: "VAh"},
					smdx.PointElement{Id: "TotVAh_SF", Offset: 23, Type: "sunssf"},
					smdx.PointElement{Id: "TotVArhImpQ1", Offset: 24, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhImpQ2", Offset: 26, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ3", Offset: 28, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArhExpQ4", Offset: 30, Type: "acc32", ScaleFactor: "TotVArh_SF", Units: "varh"},
					smdx.PointElement{Id: "TotVArh_SF", Offset: 32, Type: "sunssf"},
					smdx.PointElement{Id: "Evt", Offset: 33, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Rsrvd", Offset: 35, Type: "pad", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Ts", Offset: 36, Type: "uint32", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Ms", Offset: 38, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Seq", Offset: 39, Type: "uint16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "Alg", Offset: 40, Type: "enum16", Access: "r", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 41, Type: "uint16", Access: "r", Mandatory: true},
				},
			},
			smdx.BlockElement{
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DS", Offset: 0, Type: "uint16", Access: "r", Mandatory: true},
				},
			},
		}})
}

// Block302 - Irradiance Model - Include to support various irradiance measurements

type Block302 struct {
	GHI  uint16 `sunspec:"offset=0"`
	POAI uint16 `sunspec:"offset=1"`
	DFI  uint16 `sunspec:"offset=2"`
	DNI  uint16 `sunspec:"offset=3"`
	OTI  uint16 `sunspec:"offset=4"`
}

func (self *Block302) GetId() ModelId {
	return 302
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     302,
		Name:   "irradiance",
		Length: 5,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 5,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "GHI", Offset: 0, Type: "uint16", Units: "W/m2"},
					smdx.PointElement{Id: "POAI", Offset: 1, Type: "uint16", Units: "W/m2"},
					smdx.PointElement{Id: "DFI", Offset: 2, Type: "uint16", Units: "W/m2"},
					smdx.PointElement{Id: "DNI", Offset: 3, Type: "uint16", Units: "W/m2"},
					smdx.PointElement{Id: "OTI", Offset: 4, Type: "uint16", Units: "W/m2"},
				},
			},
		}})
}

// Block303 - Back of Module Temperature Model - Include to support variable number of  back of module temperature measurements

type Block303Repeat struct {
	TmpBOM int16 `sunspec:"offset=0,sf=-1"`
}

type Block303 struct {
	Repeats []Block303Repeat
}

func (self *Block303) GetId() ModelId {
	return 303
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     303,
		Name:   "bom_temp",
		Length: 2,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{Name: "temp",
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "TmpBOM", Offset: 0, Type: "int16", ScaleFactor: "-1", Units: "C", Mandatory: true},
				},
			},
		}})
}

// Block304 - Inclinometer Model - Include to support orienation measurements

type Block304Repeat struct {
	Inclx int32 `sunspec:"offset=0,sf=-2"`
	Incly int32 `sunspec:"offset=2,sf=-2"`
	Inclz int32 `sunspec:"offset=4,sf=-2"`
}

type Block304 struct {
	Repeats []Block304Repeat
}

func (self *Block304) GetId() ModelId {
	return 304
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     304,
		Name:   "inclinometer",
		Length: 6,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{Name: "incl",
				Length: 6,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Inclx", Offset: 0, Type: "int32", ScaleFactor: "-2", Units: "Degrees", Mandatory: true},
					smdx.PointElement{Id: "Incly", Offset: 2, Type: "int32", ScaleFactor: "-2", Units: "Degrees"},
					smdx.PointElement{Id: "Inclz", Offset: 4, Type: "int32", ScaleFactor: "-2", Units: "Degrees"},
				},
			},
		}})
}

// Block305 - GPS - Include to support location measurements

type Block305 struct {
	Tm   String `sunspec:"offset=0,len=6"`
	Date String `sunspec:"offset=6,len=4"`
	Loc  String `sunspec:"offset=10,len=20"`
	Lat  int32  `sunspec:"offset=30,sf=-7"`
	Long int32  `sunspec:"offset=32,sf=-7"`
	Alt  int32  `sunspec:"offset=34"`
}

func (self *Block305) GetId() ModelId {
	return 305
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     305,
		Name:   "location",
		Length: 36,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 36,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Tm", Offset: 0, Type: "string", Units: "hhmmss.sssZ", Length: 6},
					smdx.PointElement{Id: "Date", Offset: 6, Type: "string", Units: "YYYYMMDD", Length: 4},
					smdx.PointElement{Id: "Loc", Offset: 10, Type: "string", Units: "text", Length: 20},
					smdx.PointElement{Id: "Lat", Offset: 30, Type: "int32", ScaleFactor: "-7", Units: "Degrees"},
					smdx.PointElement{Id: "Long", Offset: 32, Type: "int32", ScaleFactor: "-7", Units: "Degrees"},
					smdx.PointElement{Id: "Alt", Offset: 34, Type: "int32", Units: "meters"},
				},
			},
		}})
}

// Block306 - Reference Point Model - Include to support a standard reference point

type Block306 struct {
	GHI uint16 `sunspec:"offset=0"`
	A   uint16 `sunspec:"offset=1"`
	V   uint16 `sunspec:"offset=2"`
	Tmp uint16 `sunspec:"offset=3"`
}

func (self *Block306) GetId() ModelId {
	return 306
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     306,
		Name:   "ref_point",
		Length: 4,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 4,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "GHI", Offset: 0, Type: "uint16", Units: "W/m2"},
					smdx.PointElement{Id: "A", Offset: 1, Type: "uint16", Units: "W/m2"},
					smdx.PointElement{Id: "V", Offset: 2, Type: "uint16", Units: "W/m2"},
					smdx.PointElement{Id: "Tmp", Offset: 3, Type: "uint16", Units: "W/m2"},
				},
			},
		}})
}

// Block307 - Base Met - Base Meteorolgical Model

type Block307 struct {
	TmpAmb  int16 `sunspec:"offset=0,sf=-1"`
	RH      int16 `sunspec:"offset=1"`
	Pres    int16 `sunspec:"offset=2"`
	WndSpd  int16 `sunspec:"offset=3"`
	WndDir  int16 `sunspec:"offset=4"`
	Rain    int16 `sunspec:"offset=5"`
	Snw     int16 `sunspec:"offset=6"`
	PPT     int16 `sunspec:"offset=7"`
	ElecFld int16 `sunspec:"offset=8"`
	SurWet  int16 `sunspec:"offset=9"`
	SoilWet int16 `sunspec:"offset=10"`
}

func (self *Block307) GetId() ModelId {
	return 307
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     307,
		Name:   "base_met",
		Length: 11,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 11,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "TmpAmb", Offset: 0, Type: "int16", ScaleFactor: "-1", Units: "C"},
					smdx.PointElement{Id: "RH", Offset: 1, Type: "int16", Units: "Pct"},
					smdx.PointElement{Id: "Pres", Offset: 2, Type: "int16", Units: "HPa"},
					smdx.PointElement{Id: "WndSpd", Offset: 3, Type: "int16", Units: "mps"},
					smdx.PointElement{Id: "WndDir", Offset: 4, Type: "int16", Units: "deg"},
					smdx.PointElement{Id: "Rain", Offset: 5, Type: "int16", Units: "mm"},
					smdx.PointElement{Id: "Snw", Offset: 6, Type: "int16", Units: "mm"},
					smdx.PointElement{Id: "PPT", Offset: 7, Type: "int16"},
					smdx.PointElement{Id: "ElecFld", Offset: 8, Type: "int16", Units: "Vm"},
					smdx.PointElement{Id: "SurWet", Offset: 9, Type: "int16", Units: "kO"},
					smdx.PointElement{Id: "SoilWet", Offset: 10, Type: "int16", Units: "Pct"},
				},
			},
		}})
}

// Block308 - Mini Met Model - Include to support a few basic measurements

type Block308 struct {
	GHI    uint16 `sunspec:"offset=0"`
	TmpBOM int16  `sunspec:"offset=1,sf=-1"`
	TmpAmb int16  `sunspec:"offset=2,sf=-1"`
	WndSpd uint16 `sunspec:"offset=3"`
}

func (self *Block308) GetId() ModelId {
	return 308
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     308,
		Name:   "mini_met",
		Length: 4,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 4,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "GHI", Offset: 0, Type: "uint16", Units: "W/m2"},
					smdx.PointElement{Id: "TmpBOM", Offset: 1, Type: "int16", ScaleFactor: "-1", Units: "C"},
					smdx.PointElement{Id: "TmpAmb", Offset: 2, Type: "int16", ScaleFactor: "-1", Units: "C"},
					smdx.PointElement{Id: "WndSpd", Offset: 3, Type: "uint16", Units: "m/s"},
				},
			},
		}})
}

// Block401 - String Combiner (Current) - A basic string combiner

type Block401Repeat struct {
	InID     uint16     `sunspec:"offset=0"`
	InEvt    Bitfield32 `sunspec:"offset=1"`
	InEvtVnd Bitfield32 `sunspec:"offset=3"`
	InDCA    int16      `sunspec:"offset=5,sf=DCA_SF"`
	InDCAhr  uint32     `sunspec:"offset=6,sf=DCAhr_SF"`
}

type Block401 struct {
	DCA_SF   ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF ScaleFactor `sunspec:"offset=1"`
	DCV_SF   ScaleFactor `sunspec:"offset=2"`
	DCAMax   uint16      `sunspec:"offset=3,sf=DCA_SF"`
	N        Count       `sunspec:"offset=4"`
	Evt      Bitfield32  `sunspec:"offset=5"`
	EvtVnd   Bitfield32  `sunspec:"offset=7"`
	DCA      int16       `sunspec:"offset=9,sf=DCA_SF"`
	DCAhr    uint32      `sunspec:"offset=10,sf=DCAhr_SF"`
	DCV      uint16      `sunspec:"offset=12,sf=DCV_SF"`
	Tmp      int16       `sunspec:"offset=13"`

	Repeats []Block401Repeat
}

func (self *Block401) GetId() ModelId {
	return 401
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     401,
		Name:   "string_combiner",
		Length: 22,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 14,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DCA_SF", Offset: 0, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DCAhr_SF", Offset: 1, Type: "sunssf"},
					smdx.PointElement{Id: "DCV_SF", Offset: 2, Type: "sunssf"},
					smdx.PointElement{Id: "DCAMax", Offset: 3, Type: "uint16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 4, Type: "count", Mandatory: true},
					smdx.PointElement{Id: "Evt", Offset: 5, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd", Offset: 7, Type: "bitfield32"},
					smdx.PointElement{Id: "DCA", Offset: 9, Type: "int16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "DCAhr", Offset: 10, Type: "uint32", ScaleFactor: "DCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: "DCV", Offset: 12, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "Tmp", Offset: 13, Type: "int16", Units: "C"},
				},
			},
			smdx.BlockElement{Name: "string",
				Length: 8,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "InID", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "InEvt", Offset: 1, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "InEvtVnd", Offset: 3, Type: "bitfield32"},
					smdx.PointElement{Id: "InDCA", Offset: 5, Type: "int16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "InDCAhr", Offset: 6, Type: "uint32", ScaleFactor: "DCAhr_SF", Units: "Ah"},
				},
			},
		}})
}

// Block402 - String Combiner (Advanced) - An advanced string combiner

type Block402Repeat struct {
	InID    uint16     `sunspec:"offset=0"`
	InEvt   Bitfield32 `sunspec:"offset=1"`
	EvtVnd  Bitfield32 `sunspec:"offset=3"`
	InDCA   int16      `sunspec:"offset=5,sf=DCA_SF"`
	InDCAhr uint32     `sunspec:"offset=6,sf=DCAhr_SF"`
	InDCV   uint16     `sunspec:"offset=8,sf=DCV_SF"`
	InDCW   int16      `sunspec:"offset=9,sf=DCWh_SF"`
	InDCWh  uint32     `sunspec:"offset=10"`
	InDCPR  uint16     `sunspec:"offset=12"`
	InN     uint16     `sunspec:"offset=13"`
}

type Block402 struct {
	DCA_SF   ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF ScaleFactor `sunspec:"offset=1"`
	DCV_SF   ScaleFactor `sunspec:"offset=2"`
	DCW_SF   ScaleFactor `sunspec:"offset=3"`
	DCWh_SF  ScaleFactor `sunspec:"offset=4"`
	DCAMax   uint16      `sunspec:"offset=5"`
	N        Count       `sunspec:"offset=6"`
	Evt      Bitfield32  `sunspec:"offset=7"`
	EvtVnd   Bitfield32  `sunspec:"offset=9"`
	DCA      int16       `sunspec:"offset=11,sf=DCA_SF"`
	DCAhr    uint32      `sunspec:"offset=12,sf=DCAhr_SF"`
	DCV      uint16      `sunspec:"offset=14,sf=DCV_SF"`
	Tmp      int16       `sunspec:"offset=15"`
	DCW      int16       `sunspec:"offset=16,sf=DCW_SF"`
	DCPR     uint16      `sunspec:"offset=17"`
	DCWh     uint32      `sunspec:"offset=18,sf=DCWh_SF"`

	Repeats []Block402Repeat
}

func (self *Block402) GetId() ModelId {
	return 402
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     402,
		Name:   "string_combiner",
		Length: 33,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 20,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DCA_SF", Offset: 0, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DCAhr_SF", Offset: 1, Type: "sunssf"},
					smdx.PointElement{Id: "DCV_SF", Offset: 2, Type: "sunssf"},
					smdx.PointElement{Id: "DCW_SF", Offset: 3, Type: "sunssf"},
					smdx.PointElement{Id: "DCWh_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DCAMax", Offset: 5, Type: "uint16", Units: "A"},
					smdx.PointElement{Id: "N", Offset: 6, Type: "count"},
					smdx.PointElement{Id: "Evt", Offset: 7, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd", Offset: 9, Type: "bitfield32"},
					smdx.PointElement{Id: "DCA", Offset: 11, Type: "int16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "DCAhr", Offset: 12, Type: "uint32", ScaleFactor: "DCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: "DCV", Offset: 14, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "Tmp", Offset: 15, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "DCW", Offset: 16, Type: "int16", ScaleFactor: "DCW_SF", Units: "W"},
					smdx.PointElement{Id: "DCPR", Offset: 17, Type: "uint16", Units: "Pct"},
					smdx.PointElement{Id: "DCWh", Offset: 18, Type: "uint32", ScaleFactor: "DCWh_SF", Units: "Wh", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "string",
				Length: 14,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "InID", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "InEvt", Offset: 1, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd", Offset: 3, Type: "bitfield32"},
					smdx.PointElement{Id: "InDCA", Offset: 5, Type: "int16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "InDCAhr", Offset: 6, Type: "uint32", ScaleFactor: "DCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: "InDCV", Offset: 8, Type: "uint16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "InDCW", Offset: 9, Type: "int16", ScaleFactor: "DCWh_SF", Units: "W"},
					smdx.PointElement{Id: "InDCWh", Offset: 10, Type: "uint32", Units: "Wh"},
					smdx.PointElement{Id: "InDCPR", Offset: 12, Type: "uint16", Units: "Pct"},
					smdx.PointElement{Id: "InN", Offset: 13, Type: "uint16"},
				},
			},
		}})
}

// Block403 - String Combiner (Current) - A basic string combiner model

type Block403Repeat struct {
	InID     uint16     `sunspec:"offset=0"`
	InEvt    Bitfield32 `sunspec:"offset=1"`
	InEvtVnd Bitfield32 `sunspec:"offset=3"`
	InDCA    int16      `sunspec:"offset=5,sf=InDCA_SF"`
	InDCAhr  Acc32      `sunspec:"offset=6,sf=InDCAhr_SF"`
}

type Block403 struct {
	DCA_SF     ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF   ScaleFactor `sunspec:"offset=1"`
	DCV_SF     ScaleFactor `sunspec:"offset=2"`
	DCAMax     uint16      `sunspec:"offset=3,sf=DCA_SF"`
	N          Count       `sunspec:"offset=4"`
	Evt        Bitfield32  `sunspec:"offset=5"`
	EvtVnd     Bitfield32  `sunspec:"offset=7"`
	DCA        int16       `sunspec:"offset=9,sf=DCA_SF"`
	DCAhr      Acc32       `sunspec:"offset=10,sf=DCAhr_SF"`
	DCV        int16       `sunspec:"offset=12,sf=DCV_SF"`
	Tmp        int16       `sunspec:"offset=13"`
	InDCA_SF   ScaleFactor `sunspec:"offset=14"`
	InDCAhr_SF ScaleFactor `sunspec:"offset=15"`

	Repeats []Block403Repeat
}

func (self *Block403) GetId() ModelId {
	return 403
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     403,
		Name:   "string_combiner",
		Length: 24,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 16,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DCA_SF", Offset: 0, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DCAhr_SF", Offset: 1, Type: "sunssf"},
					smdx.PointElement{Id: "DCV_SF", Offset: 2, Type: "sunssf"},
					smdx.PointElement{Id: "DCAMax", Offset: 3, Type: "uint16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 4, Type: "count", Mandatory: true},
					smdx.PointElement{Id: "Evt", Offset: 5, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd", Offset: 7, Type: "bitfield32"},
					smdx.PointElement{Id: "DCA", Offset: 9, Type: "int16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "DCAhr", Offset: 10, Type: "acc32", ScaleFactor: "DCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: "DCV", Offset: 12, Type: "int16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "Tmp", Offset: 13, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "InDCA_SF", Offset: 14, Type: "sunssf"},
					smdx.PointElement{Id: "InDCAhr_SF", Offset: 15, Type: "sunssf"},
				},
			},
			smdx.BlockElement{Name: "string",
				Length: 8,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "InID", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "InEvt", Offset: 1, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "InEvtVnd", Offset: 3, Type: "bitfield32"},
					smdx.PointElement{Id: "InDCA", Offset: 5, Type: "int16", ScaleFactor: "InDCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "InDCAhr", Offset: 6, Type: "acc32", ScaleFactor: "InDCAhr_SF", Units: "Ah"},
				},
			},
		}})
}

// Block404 - String Combiner (Advanced) - An advanced string combiner including voltage and energy measurements

type Block404Repeat struct {
	InID     uint16     `sunspec:"offset=0"`
	InEvt    Bitfield32 `sunspec:"offset=1"`
	InEvtVnd Bitfield32 `sunspec:"offset=3"`
	InDCA    int16      `sunspec:"offset=5,sf=InDCA_SF"`
	InDCAhr  Acc32      `sunspec:"offset=6,sf=InDCAhr_SF"`
	InDCV    int16      `sunspec:"offset=8,sf=InDCV_SF"`
	InDCW    int16      `sunspec:"offset=9,sf=InDCW_SF"`
	InDCWh   Acc32      `sunspec:"offset=10,sf=InDCWh_SF"`
	InDCPR   uint16     `sunspec:"offset=12"`
	InN      uint16     `sunspec:"offset=13"`
}

type Block404 struct {
	DCA_SF     ScaleFactor `sunspec:"offset=0"`
	DCAhr_SF   ScaleFactor `sunspec:"offset=1"`
	DCV_SF     ScaleFactor `sunspec:"offset=2"`
	DCW_SF     ScaleFactor `sunspec:"offset=3"`
	DCWh_SF    ScaleFactor `sunspec:"offset=4"`
	DCAMax     uint16      `sunspec:"offset=5,sf=DCA_SF"`
	N          Count       `sunspec:"offset=6"`
	Evt        Bitfield32  `sunspec:"offset=7"`
	EvtVnd     Bitfield32  `sunspec:"offset=9"`
	DCA        int16       `sunspec:"offset=11,sf=DCA_SF"`
	DCAhr      Acc32       `sunspec:"offset=12,sf=DCAhr_SF"`
	DCV        int16       `sunspec:"offset=14,sf=DCV_SF"`
	Tmp        int16       `sunspec:"offset=15"`
	DCW        int16       `sunspec:"offset=16,sf=DCW_SF"`
	DCPR       int16       `sunspec:"offset=17"`
	DCWh       Acc32       `sunspec:"offset=18,sf=DCWh_SF"`
	InDCA_SF   ScaleFactor `sunspec:"offset=20"`
	InDCAhr_SF ScaleFactor `sunspec:"offset=21"`
	InDCV_SF   ScaleFactor `sunspec:"offset=22"`
	InDCW_SF   ScaleFactor `sunspec:"offset=23"`
	InDCWh_SF  ScaleFactor `sunspec:"offset=24"`

	Repeats []Block404Repeat
}

func (self *Block404) GetId() ModelId {
	return 404
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     404,
		Name:   "string_combiner",
		Length: 39,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 25,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DCA_SF", Offset: 0, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DCAhr_SF", Offset: 1, Type: "sunssf"},
					smdx.PointElement{Id: "DCV_SF", Offset: 2, Type: "sunssf"},
					smdx.PointElement{Id: "DCW_SF", Offset: 3, Type: "sunssf"},
					smdx.PointElement{Id: "DCWh_SF", Offset: 4, Type: "sunssf"},
					smdx.PointElement{Id: "DCAMax", Offset: 5, Type: "uint16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 6, Type: "count", Mandatory: true},
					smdx.PointElement{Id: "Evt", Offset: 7, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd", Offset: 9, Type: "bitfield32"},
					smdx.PointElement{Id: "DCA", Offset: 11, Type: "int16", ScaleFactor: "DCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "DCAhr", Offset: 12, Type: "acc32", ScaleFactor: "DCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: "DCV", Offset: 14, Type: "int16", ScaleFactor: "DCV_SF", Units: "V"},
					smdx.PointElement{Id: "Tmp", Offset: 15, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "DCW", Offset: 16, Type: "int16", ScaleFactor: "DCW_SF", Units: "W"},
					smdx.PointElement{Id: "DCPR", Offset: 17, Type: "int16", Units: "Pct"},
					smdx.PointElement{Id: "DCWh", Offset: 18, Type: "acc32", ScaleFactor: "DCWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "InDCA_SF", Offset: 20, Type: "sunssf"},
					smdx.PointElement{Id: "InDCAhr_SF", Offset: 21, Type: "sunssf"},
					smdx.PointElement{Id: "InDCV_SF", Offset: 22, Type: "sunssf"},
					smdx.PointElement{Id: "InDCW_SF", Offset: 23, Type: "sunssf"},
					smdx.PointElement{Id: "InDCWh_SF", Offset: 24, Type: "sunssf"},
				},
			},
			smdx.BlockElement{Name: "string",
				Length: 14,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "InID", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "InEvt", Offset: 1, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "InEvtVnd", Offset: 3, Type: "bitfield32"},
					smdx.PointElement{Id: "InDCA", Offset: 5, Type: "int16", ScaleFactor: "InDCA_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "InDCAhr", Offset: 6, Type: "acc32", ScaleFactor: "InDCAhr_SF", Units: "Ah"},
					smdx.PointElement{Id: "InDCV", Offset: 8, Type: "int16", ScaleFactor: "InDCV_SF", Units: "V"},
					smdx.PointElement{Id: "InDCW", Offset: 9, Type: "int16", ScaleFactor: "InDCW_SF", Units: "W"},
					smdx.PointElement{Id: "InDCWh", Offset: 10, Type: "acc32", ScaleFactor: "InDCWh_SF", Units: "Wh"},
					smdx.PointElement{Id: "InDCPR", Offset: 12, Type: "uint16", Units: "Pct"},
					smdx.PointElement{Id: "InN", Offset: 13, Type: "uint16"},
				},
			},
		}})
}

// Block501 - Solar Module - A solar module model supporing DC-DC converter

type Block501 struct {
	Stat     Enum16     `sunspec:"offset=0"`
	StatVend Enum16     `sunspec:"offset=1"`
	Evt      Bitfield32 `sunspec:"offset=2"`
	EvtVend  Bitfield32 `sunspec:"offset=4"`
	Ctl      Enum16     `sunspec:"offset=6,access=rw"`
	CtlVend  Enum32     `sunspec:"offset=7,access=rw"`
	CtlVal   int32      `sunspec:"offset=9,access=rw"`
	Tms      uint32     `sunspec:"offset=11"`
	OutA     float32    `sunspec:"offset=13"`
	OutV     float32    `sunspec:"offset=15"`
	OutWh    float32    `sunspec:"offset=17"`
	OutW     float32    `sunspec:"offset=19"`
	Tmp      float32    `sunspec:"offset=21"`
	InA      float32    `sunspec:"offset=23"`
	InV      float32    `sunspec:"offset=25"`
	InWh     float32    `sunspec:"offset=27"`
	InW      float32    `sunspec:"offset=29"`
}

func (self *Block501) GetId() ModelId {
	return 501
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     501,
		Name:   "solar_module",
		Length: 31,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 31,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Stat", Offset: 0, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StatVend", Offset: 1, Type: "enum16"},
					smdx.PointElement{Id: "Evt", Offset: 2, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVend", Offset: 4, Type: "bitfield32"},
					smdx.PointElement{Id: "Ctl", Offset: 6, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "CtlVend", Offset: 7, Type: "enum32", Access: "rw"},
					smdx.PointElement{Id: "CtlVal", Offset: 9, Type: "int32", Access: "rw"},
					smdx.PointElement{Id: "Tms", Offset: 11, Type: "uint32", Units: "Secs"},
					smdx.PointElement{Id: "OutA", Offset: 13, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "OutV", Offset: 15, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "OutWh", Offset: 17, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "OutW", Offset: 19, Type: "float32", Units: "W"},
					smdx.PointElement{Id: "Tmp", Offset: 21, Type: "float32", Units: "C"},
					smdx.PointElement{Id: "InA", Offset: 23, Type: "float32", Units: "A"},
					smdx.PointElement{Id: "InV", Offset: 25, Type: "float32", Units: "V"},
					smdx.PointElement{Id: "InWh", Offset: 27, Type: "float32", Units: "Wh"},
					smdx.PointElement{Id: "InW", Offset: 29, Type: "float32", Units: "W"},
				},
			},
		}})
}

// Block502 - Solar Module - A solar module model supporing DC-DC converter

type Block502 struct {
	A_SF     ScaleFactor `sunspec:"offset=0"`
	V_SF     ScaleFactor `sunspec:"offset=1"`
	W_SF     ScaleFactor `sunspec:"offset=2"`
	Wh_SF    ScaleFactor `sunspec:"offset=3"`
	Stat     Enum16      `sunspec:"offset=4"`
	StatVend Enum16      `sunspec:"offset=5"`
	Evt      Bitfield32  `sunspec:"offset=6"`
	EvtVend  Bitfield32  `sunspec:"offset=8"`
	Ctl      Enum16      `sunspec:"offset=10,access=rw"`
	CtlVend  Enum32      `sunspec:"offset=11,access=rw"`
	CtlVal   int32       `sunspec:"offset=13,access=rw"`
	Tms      uint32      `sunspec:"offset=15"`
	OutA     int16       `sunspec:"offset=17,sf=A_SF"`
	OutV     int16       `sunspec:"offset=18,sf=V_SF"`
	OutWh    Acc32       `sunspec:"offset=19,sf=Wh_SF"`
	OutPw    int16       `sunspec:"offset=21,sf=W_SF"`
	Tmp      int16       `sunspec:"offset=22"`
	InA      int16       `sunspec:"offset=23,sf=A_SF"`
	InV      int16       `sunspec:"offset=24,sf=V_SF"`
	InWh     Acc32       `sunspec:"offset=25,sf=Wh_SF"`
	InW      int16       `sunspec:"offset=27,sf=W_SF"`
}

func (self *Block502) GetId() ModelId {
	return 502
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     502,
		Name:   "solar_module",
		Length: 28,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 28,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "A_SF", Offset: 0, Type: "sunssf"},
					smdx.PointElement{Id: "V_SF", Offset: 1, Type: "sunssf"},
					smdx.PointElement{Id: "W_SF", Offset: 2, Type: "sunssf"},
					smdx.PointElement{Id: "Wh_SF", Offset: 3, Type: "sunssf"},
					smdx.PointElement{Id: "Stat", Offset: 4, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "StatVend", Offset: 5, Type: "enum16"},
					smdx.PointElement{Id: "Evt", Offset: 6, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVend", Offset: 8, Type: "bitfield32"},
					smdx.PointElement{Id: "Ctl", Offset: 10, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "CtlVend", Offset: 11, Type: "enum32", Access: "rw"},
					smdx.PointElement{Id: "CtlVal", Offset: 13, Type: "int32", Access: "rw"},
					smdx.PointElement{Id: "Tms", Offset: 15, Type: "uint32", Units: "Secs"},
					smdx.PointElement{Id: "OutA", Offset: 17, Type: "int16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "OutV", Offset: 18, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "OutWh", Offset: 19, Type: "acc32", ScaleFactor: "Wh_SF", Units: "Wh"},
					smdx.PointElement{Id: "OutPw", Offset: 21, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "Tmp", Offset: 22, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "InA", Offset: 23, Type: "int16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "InV", Offset: 24, Type: "int16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "InWh", Offset: 25, Type: "acc32", ScaleFactor: "Wh_SF", Units: "Wh"},
					smdx.PointElement{Id: "InW", Offset: 27, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
				},
			},
		}})
}

// Block601 - Tracker Controller DRAFT 2 - Monitors and controls multiple trackers

type Block601Repeat struct {
	Id     String     `sunspec:"offset=0,len=8"`
	ElTrgt int32      `sunspec:"offset=8,sf=Dgr_SF"`
	AzTrgt int32      `sunspec:"offset=10,sf=SF"`
	ElPos  int32      `sunspec:"offset=12,sf=Dgr_SF"`
	AzPos  int32      `sunspec:"offset=14,sf=Dgr_SF"`
	ElCtl  int32      `sunspec:"offset=16,sf=Dgr_SF,access=rw"`
	AzCtl  int32      `sunspec:"offset=18,sf=Dgr_SF,access=rw"`
	Ctl    Enum16     `sunspec:"offset=20,access=rw"`
	Alm    Bitfield16 `sunspec:"offset=21"`
}

type Block601 struct {
	Nam       String      `sunspec:"offset=0,len=8"`
	Typ       Enum16      `sunspec:"offset=8"`
	DtLoc     String      `sunspec:"offset=9,len=5"`
	TmLoc     String      `sunspec:"offset=14,len=3"`
	Day       uint16      `sunspec:"offset=17"`
	GlblElCtl int32       `sunspec:"offset=18,sf=Dgr_SF,access=rw"`
	GlblAzCtl int32       `sunspec:"offset=20,sf=Dgr_SF,access=rw"`
	GlblCtl   Enum16      `sunspec:"offset=22,access=rw"`
	GlblAlm   Bitfield16  `sunspec:"offset=23"`
	Dgr_SF    ScaleFactor `sunspec:"offset=24"`
	N         uint16      `sunspec:"offset=25"`

	Repeats []Block601Repeat
}

func (self *Block601) GetId() ModelId {
	return 601
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     601,
		Name:   "tracker_controller",
		Length: 48,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 26,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Nam", Offset: 0, Type: "string", Length: 8},
					smdx.PointElement{Id: "Typ", Offset: 8, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "DtLoc", Offset: 9, Type: "string", Units: "YYYYMMDD", Length: 5},
					smdx.PointElement{Id: "TmLoc", Offset: 14, Type: "string", Units: "hhmmss", Length: 3},
					smdx.PointElement{Id: "Day", Offset: 17, Type: "uint16"},
					smdx.PointElement{Id: "GlblElCtl", Offset: 18, Type: "int32", ScaleFactor: "Dgr_SF", Units: "Degrees", Access: "rw"},
					smdx.PointElement{Id: "GlblAzCtl", Offset: 20, Type: "int32", ScaleFactor: "Dgr_SF", Units: "Degrees", Access: "rw"},
					smdx.PointElement{Id: "GlblCtl", Offset: 22, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "GlblAlm", Offset: 23, Type: "bitfield16"},
					smdx.PointElement{Id: "Dgr_SF", Offset: 24, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "N", Offset: 25, Type: "uint16", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "tracker",
				Length: 22,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Id", Offset: 0, Type: "string", Length: 8},
					smdx.PointElement{Id: "ElTrgt", Offset: 8, Type: "int32", ScaleFactor: "Dgr_SF", Units: "Degrees"},
					smdx.PointElement{Id: "AzTrgt", Offset: 10, Type: "int32", ScaleFactor: "SF", Units: "Degrees"},
					smdx.PointElement{Id: "ElPos", Offset: 12, Type: "int32", ScaleFactor: "Dgr_SF", Units: "Degrees"},
					smdx.PointElement{Id: "AzPos", Offset: 14, Type: "int32", ScaleFactor: "Dgr_SF", Units: "Degrees"},
					smdx.PointElement{Id: "ElCtl", Offset: 16, Type: "int32", ScaleFactor: "Dgr_SF", Units: "Degrees", Access: "rw"},
					smdx.PointElement{Id: "AzCtl", Offset: 18, Type: "int32", ScaleFactor: "Dgr_SF", Units: "Degrees", Access: "rw"},
					smdx.PointElement{Id: "Ctl", Offset: 20, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "Alm", Offset: 21, Type: "bitfield16"},
				},
			},
		}})
}

// Block801 - Energy Storage Base Model (DEPRECATED) - This model has been deprecated.

type Block801 struct {
	DEPRECATED Enum16 `sunspec:"offset=0"`
}

func (self *Block801) GetId() ModelId {
	return 801
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     801,
		Name:   "storage",
		Length: 1,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 1,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "DEPRECATED", Offset: 0, Type: "enum16", Mandatory: true},
				},
			},
		}})
}

// Block802 - Battery Base Model -

type Block802 struct {
	AHRtg            uint16      `sunspec:"offset=0,sf=AHRtg_SF"`
	WHRtg            uint16      `sunspec:"offset=1,sf=WHRtg_SF"`
	WChaRteMax       uint16      `sunspec:"offset=2,sf=WChaDisChaMax_SF"`
	WDisChaRteMax    uint16      `sunspec:"offset=3,sf=WChaDisChaMax_SF"`
	DisChaRte        uint16      `sunspec:"offset=4,sf=DisChaRte_SF"`
	SoCMax           uint16      `sunspec:"offset=5,sf=SoC_SF"`
	SoCMin           uint16      `sunspec:"offset=6,sf=SoC_SF"`
	SocRsvMax        uint16      `sunspec:"offset=7,sf=SoC_SF,access=rw"`
	SoCRsvMin        uint16      `sunspec:"offset=8,sf=SoC_SF,access=rw"`
	SoC              uint16      `sunspec:"offset=9,sf=SoC_SF"`
	DoD              uint16      `sunspec:"offset=10,sf=DoD_SF"`
	SoH              uint16      `sunspec:"offset=11,sf=SoH_SF"`
	NCyc             uint32      `sunspec:"offset=12"`
	ChaSt            Enum16      `sunspec:"offset=14"`
	LocRemCtl        Enum16      `sunspec:"offset=15"`
	Hb               uint16      `sunspec:"offset=16"`
	CtrlHb           uint16      `sunspec:"offset=17,access=rw"`
	AlmRst           uint16      `sunspec:"offset=18,access=rw"`
	Typ              Enum16      `sunspec:"offset=19"`
	State            Enum16      `sunspec:"offset=20"`
	Pad1             Pad         `sunspec:"offset=21"`
	WarrDt           uint32      `sunspec:"offset=22"`
	Evt1             Bitfield32  `sunspec:"offset=24"`
	Evt2             Bitfield32  `sunspec:"offset=26"`
	EvtVnd1          Bitfield32  `sunspec:"offset=28"`
	EvtVnd2          Bitfield32  `sunspec:"offset=30"`
	V                uint16      `sunspec:"offset=32,sf=V_SF"`
	VMax             uint16      `sunspec:"offset=33,sf=V_SF"`
	VMin             uint16      `sunspec:"offset=34,sf=V_SF"`
	CellVMax         uint16      `sunspec:"offset=35,sf=CellV_SF"`
	CellVMaxStr      uint16      `sunspec:"offset=36"`
	CellVMaxMod      uint16      `sunspec:"offset=37"`
	CellVMin         uint16      `sunspec:"offset=38,sf=CellV_SF"`
	CellVMinStr      uint16      `sunspec:"offset=39"`
	CellVMinMod      uint16      `sunspec:"offset=40"`
	CellVAvg         uint16      `sunspec:"offset=41,sf=CellV_SF"`
	A                int16       `sunspec:"offset=42,sf=A_SF"`
	AChaMax          uint16      `sunspec:"offset=43,sf=AMax_SF"`
	ADisChaMax       uint16      `sunspec:"offset=44,sf=AMax_SF"`
	W                int16       `sunspec:"offset=45,sf=W_SF"`
	ReqInvState      Enum16      `sunspec:"offset=46"`
	ReqW             int16       `sunspec:"offset=47,sf=W_SF"`
	SetOp            Enum16      `sunspec:"offset=48,access=rw"`
	SetInvState      Enum16      `sunspec:"offset=49,access=rw"`
	AHRtg_SF         ScaleFactor `sunspec:"offset=50"`
	WHRtg_SF         ScaleFactor `sunspec:"offset=51"`
	WChaDisChaMax_SF ScaleFactor `sunspec:"offset=52"`
	DisChaRte_SF     ScaleFactor `sunspec:"offset=53"`
	SoC_SF           ScaleFactor `sunspec:"offset=54"`
	DoD_SF           ScaleFactor `sunspec:"offset=55"`
	SoH_SF           ScaleFactor `sunspec:"offset=56"`
	V_SF             ScaleFactor `sunspec:"offset=57"`
	CellV_SF         ScaleFactor `sunspec:"offset=58"`
	A_SF             ScaleFactor `sunspec:"offset=59"`
	AMax_SF          ScaleFactor `sunspec:"offset=60"`
	W_SF             ScaleFactor `sunspec:"offset=61"`
}

func (self *Block802) GetId() ModelId {
	return 802
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     802,
		Name:   "battery",
		Length: 54,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 62,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "AHRtg", Offset: 0, Type: "uint16", ScaleFactor: "AHRtg_SF", Units: "Ah", Mandatory: true},
					smdx.PointElement{Id: "WHRtg", Offset: 1, Type: "uint16", ScaleFactor: "WHRtg_SF", Units: "Wh", Mandatory: true},
					smdx.PointElement{Id: "WChaRteMax", Offset: 2, Type: "uint16", ScaleFactor: "WChaDisChaMax_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "WDisChaRteMax", Offset: 3, Type: "uint16", ScaleFactor: "WChaDisChaMax_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "DisChaRte", Offset: 4, Type: "uint16", ScaleFactor: "DisChaRte_SF", Units: "%WHRtg"},
					smdx.PointElement{Id: "SoCMax", Offset: 5, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%WHRtg"},
					smdx.PointElement{Id: "SoCMin", Offset: 6, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%WHRtg"},
					smdx.PointElement{Id: "SocRsvMax", Offset: 7, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%WHRtg", Access: "rw"},
					smdx.PointElement{Id: "SoCRsvMin", Offset: 8, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%WHRtg", Access: "rw"},
					smdx.PointElement{Id: "SoC", Offset: 9, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%WHRtg", Mandatory: true},
					smdx.PointElement{Id: "DoD", Offset: 10, Type: "uint16", ScaleFactor: "DoD_SF", Units: "%"},
					smdx.PointElement{Id: "SoH", Offset: 11, Type: "uint16", ScaleFactor: "SoH_SF", Units: "%"},
					smdx.PointElement{Id: "NCyc", Offset: 12, Type: "uint32"},
					smdx.PointElement{Id: "ChaSt", Offset: 14, Type: "enum16"},
					smdx.PointElement{Id: "LocRemCtl", Offset: 15, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "Hb", Offset: 16, Type: "uint16"},
					smdx.PointElement{Id: "CtrlHb", Offset: 17, Type: "uint16", Access: "rw"},
					smdx.PointElement{Id: "AlmRst", Offset: 18, Type: "uint16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "Typ", Offset: 19, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "State", Offset: 20, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "Pad1", Offset: 21, Type: "pad", Mandatory: true},
					smdx.PointElement{Id: "WarrDt", Offset: 22, Type: "uint32"},
					smdx.PointElement{Id: "Evt1", Offset: 24, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 26, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd1", Offset: 28, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd2", Offset: 30, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "V", Offset: 32, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "VMax", Offset: 33, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "VMin", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "CellVMax", Offset: 35, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V"},
					smdx.PointElement{Id: "CellVMaxStr", Offset: 36, Type: "uint16"},
					smdx.PointElement{Id: "CellVMaxMod", Offset: 37, Type: "uint16"},
					smdx.PointElement{Id: "CellVMin", Offset: 38, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V"},
					smdx.PointElement{Id: "CellVMinStr", Offset: 39, Type: "uint16"},
					smdx.PointElement{Id: "CellVMinMod", Offset: 40, Type: "uint16"},
					smdx.PointElement{Id: "CellVAvg", Offset: 41, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V"},
					smdx.PointElement{Id: "A", Offset: 42, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "AChaMax", Offset: 43, Type: "uint16", ScaleFactor: "AMax_SF", Units: "A"},
					smdx.PointElement{Id: "ADisChaMax", Offset: 44, Type: "uint16", ScaleFactor: "AMax_SF", Units: "A"},
					smdx.PointElement{Id: "W", Offset: 45, Type: "int16", ScaleFactor: "W_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "ReqInvState", Offset: 46, Type: "enum16"},
					smdx.PointElement{Id: "ReqW", Offset: 47, Type: "int16", ScaleFactor: "W_SF", Units: "W"},
					smdx.PointElement{Id: "SetOp", Offset: 48, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "SetInvState", Offset: 49, Type: "enum16", Access: "rw", Mandatory: true},
					smdx.PointElement{Id: "AHRtg_SF", Offset: 50, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "WHRtg_SF", Offset: 51, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "WChaDisChaMax_SF", Offset: 52, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DisChaRte_SF", Offset: 53, Type: "sunssf"},
					smdx.PointElement{Id: "SoC_SF", Offset: 54, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "DoD_SF", Offset: 55, Type: "sunssf"},
					smdx.PointElement{Id: "SoH_SF", Offset: 56, Type: "sunssf"},
					smdx.PointElement{Id: "V_SF", Offset: 57, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "CellV_SF", Offset: 58, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "A_SF", Offset: 59, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "AMax_SF", Offset: 60, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "W_SF", Offset: 61, Type: "sunssf"},
				},
			},
		}})
}

// Block803 - Lithium-Ion Battery Bank Model -

type Block803Repeat struct {
	StrNMod         uint16     `sunspec:"offset=0"`
	StrSt           Bitfield32 `sunspec:"offset=1"`
	StrConFail      Enum16     `sunspec:"offset=3"`
	StrSoC          uint16     `sunspec:"offset=4"`
	StrSoH          uint16     `sunspec:"offset=5,sf=SoH_SF"`
	StrA            int16      `sunspec:"offset=6,sf=A_SF"`
	StrCellVMax     uint16     `sunspec:"offset=7,sf=CellV_SF"`
	StrCellVMaxMod  uint16     `sunspec:"offset=8"`
	StrCellVMin     uint16     `sunspec:"offset=9,sf=CellV_SF"`
	StrCellVMinMod  uint16     `sunspec:"offset=10"`
	StrCellVAvg     uint16     `sunspec:"offset=11,sf=CellV_SF"`
	StrModTmpMax    int16      `sunspec:"offset=12,sf=ModTmp_SF"`
	StrModTmpMaxMod uint16     `sunspec:"offset=13"`
	StrModTmpMin    int16      `sunspec:"offset=14,sf=ModTmp_SF"`
	StrModTmpMinMod uint16     `sunspec:"offset=15"`
	StrModTmpAvg    int16      `sunspec:"offset=16,sf=ModTmp_SF"`
	Pad3            Pad        `sunspec:"offset=17"`
	StrConSt        Bitfield32 `sunspec:"offset=18"`
	StrEvt1         Bitfield32 `sunspec:"offset=20"`
	StrEvt2         Bitfield32 `sunspec:"offset=22"`
	StrEvtVnd1      Bitfield32 `sunspec:"offset=24"`
	StrEvtVnd2      Bitfield32 `sunspec:"offset=26"`
	StrSetEna       Enum16     `sunspec:"offset=28,access=rw"`
	StrSetCon       Enum16     `sunspec:"offset=29,access=rw"`
	Pad4            Pad        `sunspec:"offset=30"`
	Pad5            Pad        `sunspec:"offset=31"`
}

type Block803 struct {
	NStr         uint16      `sunspec:"offset=0"`
	NStrCon      uint16      `sunspec:"offset=1"`
	ModTmpMax    int16       `sunspec:"offset=2,sf=ModTmp_SF"`
	ModTmpMaxStr uint16      `sunspec:"offset=3"`
	ModTmpMaxMod uint16      `sunspec:"offset=4"`
	ModTmpMin    int16       `sunspec:"offset=5,sf=ModTmp_SF"`
	ModTmpMinStr uint16      `sunspec:"offset=6"`
	ModTmpMinMod uint16      `sunspec:"offset=7"`
	ModTmpAvg    uint16      `sunspec:"offset=8"`
	StrVMax      uint16      `sunspec:"offset=9,sf=V_SF"`
	StrVMaxStr   uint16      `sunspec:"offset=10"`
	StrVMin      uint16      `sunspec:"offset=11,sf=V_SF"`
	StrVMinStr   uint16      `sunspec:"offset=12"`
	StrVAvg      uint16      `sunspec:"offset=13,sf=V_SF"`
	StrAMax      int16       `sunspec:"offset=14,sf=A_SF"`
	StrAMaxStr   uint16      `sunspec:"offset=15"`
	StrAMin      int16       `sunspec:"offset=16,sf=A_SF"`
	StrAMinStr   uint16      `sunspec:"offset=17"`
	StrAAvg      int16       `sunspec:"offset=18,sf=A_SF"`
	NCellBal     uint16      `sunspec:"offset=19"`
	CellV_SF     ScaleFactor `sunspec:"offset=20"`
	ModTmp_SF    ScaleFactor `sunspec:"offset=21"`
	A_SF         ScaleFactor `sunspec:"offset=22"`
	SoH_SF       ScaleFactor `sunspec:"offset=23"`
	Pad1         Pad         `sunspec:"offset=24"`
	Pad2         Pad         `sunspec:"offset=25"`

	Repeats []Block803Repeat
}

func (self *Block803) GetId() ModelId {
	return 803
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     803,
		Name:   "lithium_ion_bank",
		Length: 33,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 26,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "NStr", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "NStrCon", Offset: 1, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "ModTmpMax", Offset: 2, Type: "int16", ScaleFactor: "ModTmp_SF", Mandatory: true},
					smdx.PointElement{Id: "ModTmpMaxStr", Offset: 3, Type: "uint16"},
					smdx.PointElement{Id: "ModTmpMaxMod", Offset: 4, Type: "uint16"},
					smdx.PointElement{Id: "ModTmpMin", Offset: 5, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "ModTmpMinStr", Offset: 6, Type: "uint16"},
					smdx.PointElement{Id: "ModTmpMinMod", Offset: 7, Type: "uint16"},
					smdx.PointElement{Id: "ModTmpAvg", Offset: 8, Type: "uint16"},
					smdx.PointElement{Id: "StrVMax", Offset: 9, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "StrVMaxStr", Offset: 10, Type: "uint16"},
					smdx.PointElement{Id: "StrVMin", Offset: 11, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "StrVMinStr", Offset: 12, Type: "uint16"},
					smdx.PointElement{Id: "StrVAvg", Offset: 13, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "StrAMax", Offset: 14, Type: "int16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "StrAMaxStr", Offset: 15, Type: "uint16"},
					smdx.PointElement{Id: "StrAMin", Offset: 16, Type: "int16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "StrAMinStr", Offset: 17, Type: "uint16"},
					smdx.PointElement{Id: "StrAAvg", Offset: 18, Type: "int16", ScaleFactor: "A_SF", Units: "A"},
					smdx.PointElement{Id: "NCellBal", Offset: 19, Type: "uint16"},
					smdx.PointElement{Id: "CellV_SF", Offset: 20, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "ModTmp_SF", Offset: 21, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "A_SF", Offset: 22, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "SoH_SF", Offset: 23, Type: "sunssf"},
					smdx.PointElement{Id: "Pad1", Offset: 24, Type: "pad", Mandatory: true},
					smdx.PointElement{Id: "Pad2", Offset: 25, Type: "pad", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "string",
				Length: 28,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "StrNMod", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "StrSt", Offset: 1, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "StrConFail", Offset: 3, Type: "enum16"},
					smdx.PointElement{Id: "StrSoC", Offset: 4, Type: "uint16", Units: "%", Mandatory: true},
					smdx.PointElement{Id: "StrSoH", Offset: 5, Type: "uint16", ScaleFactor: "SoH_SF", Units: "%"},
					smdx.PointElement{Id: "StrA", Offset: 6, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "StrCellVMax", Offset: 7, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "StrCellVMaxMod", Offset: 8, Type: "uint16"},
					smdx.PointElement{Id: "StrCellVMin", Offset: 9, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "StrCellVMinMod", Offset: 10, Type: "uint16"},
					smdx.PointElement{Id: "StrCellVAvg", Offset: 11, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "StrModTmpMax", Offset: 12, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "StrModTmpMaxMod", Offset: 13, Type: "uint16"},
					smdx.PointElement{Id: "StrModTmpMin", Offset: 14, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "StrModTmpMinMod", Offset: 15, Type: "uint16"},
					smdx.PointElement{Id: "StrModTmpAvg", Offset: 16, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "Pad3", Offset: 17, Type: "pad", Mandatory: true},
					smdx.PointElement{Id: "StrConSt", Offset: 18, Type: "bitfield32"},
					smdx.PointElement{Id: "StrEvt1", Offset: 20, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "StrEvt2", Offset: 22, Type: "bitfield32"},
					smdx.PointElement{Id: "StrEvtVnd1", Offset: 24, Type: "bitfield32"},
					smdx.PointElement{Id: "StrEvtVnd2", Offset: 26, Type: "bitfield32"},
					smdx.PointElement{Id: "StrSetEna", Offset: 28, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "StrSetCon", Offset: 29, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "Pad4", Offset: 30, Type: "pad", Mandatory: true},
					smdx.PointElement{Id: "Pad5", Offset: 31, Type: "pad", Mandatory: true},
				},
			},
		}})
}

// Block804 - Lithium-Ion String Model -

type Block804Repeat struct {
	ModNCell          uint16 `sunspec:"offset=0"`
	ModSoC            uint16 `sunspec:"offset=1,sf=SoC_SF"`
	ModSoH            uint16 `sunspec:"offset=2,sf=SoH_SF"`
	ModCellVMax       uint16 `sunspec:"offset=3,sf=CellV_SF"`
	ModCellVMaxCell   uint16 `sunspec:"offset=4"`
	ModCellVMin       uint16 `sunspec:"offset=5,sf=CellV_SF"`
	ModCellVMinCell   uint16 `sunspec:"offset=6,sf=CellV_SF"`
	ModCellVAvg       uint16 `sunspec:"offset=7,sf=CellV_SF"`
	ModCellTmpMax     int16  `sunspec:"offset=8,sf=ModTmp_SF"`
	ModCellTmpMaxCell uint16 `sunspec:"offset=9"`
	ModCellTmpMin     int16  `sunspec:"offset=10,sf=ModTmp_SF"`
	ModCellTmpMinCell uint16 `sunspec:"offset=11"`
	ModCellTmpAvg     int16  `sunspec:"offset=12,sf=ModTmp_SF"`
	Pad2              Pad    `sunspec:"offset=13"`
	Pad3              Pad    `sunspec:"offset=14"`
	Pad4              Pad    `sunspec:"offset=15"`
}

type Block804 struct {
	Idx          uint16      `sunspec:"offset=0"`
	NMod         uint16      `sunspec:"offset=1"`
	St           Bitfield32  `sunspec:"offset=2"`
	ConFail      Enum16      `sunspec:"offset=4"`
	NCellBal     uint16      `sunspec:"offset=5"`
	SoC          uint16      `sunspec:"offset=6,sf=SoC_SF"`
	DoD          uint16      `sunspec:"offset=7,sf=StrDoC_SF"`
	NCyc         uint32      `sunspec:"offset=8"`
	SoH          uint16      `sunspec:"offset=9,sf=SoH_SF"`
	A            int16       `sunspec:"offset=10,sf=A_SF"`
	V            uint16      `sunspec:"offset=11,sf=V_SF"`
	CellVMax     uint16      `sunspec:"offset=12,sf=CellV_SF"`
	CellVMaxMod  uint16      `sunspec:"offset=13"`
	CellVMin     uint16      `sunspec:"offset=14,sf=CellV_SF"`
	CellVMinMod  uint16      `sunspec:"offset=15"`
	CellVAvg     uint16      `sunspec:"offset=16,sf=CellV_SF"`
	ModTmpMax    int16       `sunspec:"offset=17,sf=ModTmp_SF"`
	ModTmpMaxMod uint16      `sunspec:"offset=18"`
	ModTmpMin    int16       `sunspec:"offset=19,sf=ModTmp_SF"`
	ModTmpMinMod uint16      `sunspec:"offset=20"`
	ModTmpAvg    int16       `sunspec:"offset=21,sf=ModTmp_SF"`
	Evt1         Bitfield32  `sunspec:"offset=22"`
	Evt2         Bitfield32  `sunspec:"offset=24"`
	EvtVnd1      Bitfield32  `sunspec:"offset=26"`
	EvtVnd2      Bitfield32  `sunspec:"offset=28"`
	SetEna       Enum16      `sunspec:"offset=29,access=rw"`
	SetCon       Enum16      `sunspec:"offset=30,access=rw"`
	SoC_SF       ScaleFactor `sunspec:"offset=31"`
	SoH_SF       ScaleFactor `sunspec:"offset=32"`
	DoD_SF       ScaleFactor `sunspec:"offset=33"`
	A_SF         ScaleFactor `sunspec:"offset=34"`
	V_SF         ScaleFactor `sunspec:"offset=35"`
	CellV_SF     ScaleFactor `sunspec:"offset=36"`
	ModTmp_SF    ScaleFactor `sunspec:"offset=37"`

	Repeats []Block804Repeat
}

func (self *Block804) GetId() ModelId {
	return 804
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     804,
		Name:   "lithium_ion_string",
		Length: 56,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 38,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Idx", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "NMod", Offset: 1, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "St", Offset: 2, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "ConFail", Offset: 4, Type: "enum16"},
					smdx.PointElement{Id: "NCellBal", Offset: 5, Type: "uint16"},
					smdx.PointElement{Id: "SoC", Offset: 6, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%", Mandatory: true},
					smdx.PointElement{Id: "DoD", Offset: 7, Type: "uint16", ScaleFactor: "StrDoC_SF", Units: "%"},
					smdx.PointElement{Id: "NCyc", Offset: 8, Type: "uint32"},
					smdx.PointElement{Id: "SoH", Offset: 9, Type: "uint16", ScaleFactor: "SoH_SF", Units: "%"},
					smdx.PointElement{Id: "A", Offset: 10, Type: "int16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "V", Offset: 11, Type: "uint16", ScaleFactor: "V_SF", Units: "V"},
					smdx.PointElement{Id: "CellVMax", Offset: 12, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellVMaxMod", Offset: 13, Type: "uint16"},
					smdx.PointElement{Id: "CellVMin", Offset: 14, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellVMinMod", Offset: 15, Type: "uint16"},
					smdx.PointElement{Id: "CellVAvg", Offset: 16, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModTmpMax", Offset: 17, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "ModTmpMaxMod", Offset: 18, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "ModTmpMin", Offset: 19, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "ModTmpMinMod", Offset: 20, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "ModTmpAvg", Offset: 21, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "Evt1", Offset: 22, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 24, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd1", Offset: 26, Type: "bitfield32"},
					smdx.PointElement{Id: "EvtVnd2", Offset: 28, Type: "bitfield32"},
					smdx.PointElement{Id: "SetEna", Offset: 29, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "SetCon", Offset: 30, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "SoC_SF", Offset: 31, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "SoH_SF", Offset: 32, Type: "sunssf"},
					smdx.PointElement{Id: "DoD_SF", Offset: 33, Type: "sunssf"},
					smdx.PointElement{Id: "A_SF", Offset: 34, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 35, Type: "sunssf"},
					smdx.PointElement{Id: "CellV_SF", Offset: 36, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "ModTmp_SF", Offset: 37, Type: "sunssf", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "lithium_ion_string_module",
				Length: 16,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ModNCell", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "ModSoC", Offset: 1, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%"},
					smdx.PointElement{Id: "ModSoH", Offset: 2, Type: "uint16", ScaleFactor: "SoH_SF", Units: "%"},
					smdx.PointElement{Id: "ModCellVMax", Offset: 3, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModCellVMaxCell", Offset: 4, Type: "uint16"},
					smdx.PointElement{Id: "ModCellVMin", Offset: 5, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModCellVMinCell", Offset: 6, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModCellVAvg", Offset: 7, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModCellTmpMax", Offset: 8, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "ModCellTmpMaxCell", Offset: 9, Type: "uint16"},
					smdx.PointElement{Id: "ModCellTmpMin", Offset: 10, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "ModCellTmpMinCell", Offset: 11, Type: "uint16"},
					smdx.PointElement{Id: "ModCellTmpAvg", Offset: 12, Type: "int16", ScaleFactor: "ModTmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "Pad2", Offset: 13, Type: "pad", Mandatory: true},
					smdx.PointElement{Id: "Pad3", Offset: 14, Type: "pad", Mandatory: true},
					smdx.PointElement{Id: "Pad4", Offset: 15, Type: "pad", Mandatory: true},
				},
			},
		}})
}

// Block805 - Lithium-Ion Module Model -

type Block805Repeat struct {
	CellV   uint16     `sunspec:"offset=0,sf=CellV_SF"`
	CellTmp int16      `sunspec:"offset=1,sf=Tmp_SF"`
	CellSt  Bitfield32 `sunspec:"offset=2"`
}

type Block805 struct {
	Idx            uint16      `sunspec:"offset=0"`
	NCell          uint16      `sunspec:"offset=1"`
	SoC            uint16      `sunspec:"offset=2,sf=SoC_SF"`
	DoD            uint16      `sunspec:"offset=3,sf=DoD_SF"`
	NCyc           uint32      `sunspec:"offset=4"`
	SoH            uint16      `sunspec:"offset=6,sf=SoH_SF"`
	V              uint16      `sunspec:"offset=7,sf=V_SF"`
	CellVMax       uint16      `sunspec:"offset=8,sf=CellV_SF"`
	CellVMaxCell   uint16      `sunspec:"offset=9"`
	CellVMin       uint16      `sunspec:"offset=10,sf=CellV_SF"`
	CellVMinCell   uint16      `sunspec:"offset=11"`
	CellVAvg       uint16      `sunspec:"offset=12,sf=CellV_SF"`
	CellTmpMax     int16       `sunspec:"offset=13,sf=Tmp_SF"`
	CellTmpMaxCell uint16      `sunspec:"offset=14"`
	CellTmpMin     int16       `sunspec:"offset=15,sf=Tmp_SF"`
	CellTmpMinCell uint16      `sunspec:"offset=16"`
	CellTmpAvg     int16       `sunspec:"offset=17,sf=Tmp_SF"`
	SN             String      `sunspec:"offset=18,len=16"`
	NCellBal       uint16      `sunspec:"offset=34"`
	SoC_SF         ScaleFactor `sunspec:"offset=35"`
	SoH_SF         ScaleFactor `sunspec:"offset=36"`
	DoD_SF         ScaleFactor `sunspec:"offset=37"`
	V_SF           ScaleFactor `sunspec:"offset=38"`
	CellV_SF       ScaleFactor `sunspec:"offset=39"`
	Tmp_SF         ScaleFactor `sunspec:"offset=40"`
	Pad1           Pad         `sunspec:"offset=41"`

	Repeats []Block805Repeat
}

func (self *Block805) GetId() ModelId {
	return 805
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     805,
		Name:   "lithium-ion-module",
		Length: 2,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 42,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Idx", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "NCell", Offset: 1, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "SoC", Offset: 2, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%"},
					smdx.PointElement{Id: "DoD", Offset: 3, Type: "uint16", ScaleFactor: "DoD_SF", Units: "%"},
					smdx.PointElement{Id: "NCyc", Offset: 4, Type: "uint32"},
					smdx.PointElement{Id: "SoH", Offset: 6, Type: "uint16", ScaleFactor: "SoH_SF", Units: "%"},
					smdx.PointElement{Id: "V", Offset: 7, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellVMax", Offset: 8, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellVMaxCell", Offset: 9, Type: "uint16"},
					smdx.PointElement{Id: "CellVMin", Offset: 10, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellVMinCell", Offset: 11, Type: "uint16"},
					smdx.PointElement{Id: "CellVAvg", Offset: 12, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellTmpMax", Offset: 13, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "CellTmpMaxCell", Offset: 14, Type: "uint16"},
					smdx.PointElement{Id: "CellTmpMin", Offset: 15, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "CellTmpMinCell", Offset: 16, Type: "uint16"},
					smdx.PointElement{Id: "CellTmpAvg", Offset: 17, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "SN", Offset: 18, Type: "string", Length: 16},
					smdx.PointElement{Id: "NCellBal", Offset: 34, Type: "uint16"},
					smdx.PointElement{Id: "SoC_SF", Offset: 35, Type: "sunssf"},
					smdx.PointElement{Id: "SoH_SF", Offset: 36, Type: "sunssf"},
					smdx.PointElement{Id: "DoD_SF", Offset: 37, Type: "sunssf"},
					smdx.PointElement{Id: "V_SF", Offset: 38, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "CellV_SF", Offset: 39, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Tmp_SF", Offset: 40, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Pad1", Offset: 41, Type: "pad", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "lithium-ion-module-cell",
				Length: 4,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "CellV", Offset: 0, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellTmp", Offset: 1, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "CellSt", Offset: 2, Type: "bitfield32"},
				},
			},
		}})
}

// Block806 - Flow Battery Model -

type Block806Repeat struct {
	BatStTBD uint16 `sunspec:"offset=0"`
}

type Block806 struct {
	BatTBD uint16 `sunspec:"offset=0"`

	Repeats []Block806Repeat
}

func (self *Block806) GetId() ModelId {
	return 806
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     806,
		Name:   "flow_battery",
		Length: 2,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 1,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "BatTBD", Offset: 0, Type: "uint16", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "battery_string",
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "BatStTBD", Offset: 0, Type: "uint16", Mandatory: true},
				},
			},
		}})
}

// Block807 - Flow Battery String Model -

type Block807Repeat struct {
	ModIdx          uint16     `sunspec:"offset=0"`
	ModNStk         uint16     `sunspec:"offset=1"`
	ModSt           Bitfield32 `sunspec:"offset=2"`
	ModSoC          uint16     `sunspec:"offset=4,sf=SoC_SF"`
	ModOCV          uint16     `sunspec:"offset=5,sf=OCV_SF"`
	ModV            uint16     `sunspec:"offset=6,sf=ModV_SF"`
	ModCellVMax     uint16     `sunspec:"offset=7,sf=CellV_SF"`
	ModCellVMaxCell uint16     `sunspec:"offset=8"`
	ModCellVMin     uint16     `sunspec:"offset=9,sf=CellV_SF"`
	ModCellVMinCell uint16     `sunspec:"offset=10"`
	ModCellVAvg     uint16     `sunspec:"offset=11,sf=CellV_SF"`
	ModAnoTmp       uint16     `sunspec:"offset=12,sf=Tmp_SF"`
	ModCatTmp       uint16     `sunspec:"offset=13,sf=Tmp_SF"`
	ModConSt        Bitfield32 `sunspec:"offset=14"`
	ModEvt1         Bitfield32 `sunspec:"offset=16"`
	ModEvt2         Bitfield32 `sunspec:"offset=18"`
	ModConFail      Enum16     `sunspec:"offset=20"`
	ModSetEna       Enum16     `sunspec:"offset=21,access=rw"`
	ModSetCon       Enum16     `sunspec:"offset=22,access=rw"`
	Pad4            Pad        `sunspec:"offset=23"`
}

type Block807 struct {
	Idx         uint16      `sunspec:"offset=0"`
	NMod        uint16      `sunspec:"offset=1"`
	NModCon     uint16      `sunspec:"offset=2"`
	ModVMax     uint16      `sunspec:"offset=3,sf=ModV_SF"`
	ModVMaxMod  uint16      `sunspec:"offset=4"`
	ModVMin     uint16      `sunspec:"offset=5,sf=ModV_SF"`
	ModVMinMod  uint16      `sunspec:"offset=6"`
	ModVAvg     uint16      `sunspec:"offset=7,sf=ModV_SF"`
	CellVMax    uint16      `sunspec:"offset=8,sf=CellV_SF"`
	CellVMaxMod uint16      `sunspec:"offset=9"`
	CellVMaxStk uint16      `sunspec:"offset=10"`
	CellVMin    uint16      `sunspec:"offset=11,sf=CellV_SF"`
	CellVMinMod uint16      `sunspec:"offset=12"`
	CellVMinStk uint16      `sunspec:"offset=13"`
	CellVAvg    uint16      `sunspec:"offset=14,sf=CellV_SF"`
	TmpMax      int16       `sunspec:"offset=15,sf=Tmp_SF"`
	TmpMaxMod   uint16      `sunspec:"offset=16"`
	TmpMin      int16       `sunspec:"offset=17,sf=Tmp_SF"`
	TmpMinMod   uint16      `sunspec:"offset=18"`
	TmpAvg      int16       `sunspec:"offset=19,sf=Tmp_SF"`
	Evt1        Bitfield32  `sunspec:"offset=20"`
	Evt2        Bitfield32  `sunspec:"offset=22"`
	EvtVnd1     Bitfield32  `sunspec:"offset=24"`
	EvtVnd2     Bitfield32  `sunspec:"offset=26"`
	ModV_SF     ScaleFactor `sunspec:"offset=28"`
	CellV_SF    ScaleFactor `sunspec:"offset=29"`
	Tmp_SF      ScaleFactor `sunspec:"offset=30"`
	SoC_SF      ScaleFactor `sunspec:"offset=31"`
	OCV_SF      ScaleFactor `sunspec:"offset=32"`
	Pad1        Pad         `sunspec:"offset=33"`

	Repeats []Block807Repeat
}

func (self *Block807) GetId() ModelId {
	return 807
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     807,
		Name:   "flow_battery_string",
		Length: 36,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 34,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Idx", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "NMod", Offset: 1, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "NModCon", Offset: 2, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "ModVMax", Offset: 3, Type: "uint16", ScaleFactor: "ModV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModVMaxMod", Offset: 4, Type: "uint16"},
					smdx.PointElement{Id: "ModVMin", Offset: 5, Type: "uint16", ScaleFactor: "ModV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModVMinMod", Offset: 6, Type: "uint16"},
					smdx.PointElement{Id: "ModVAvg", Offset: 7, Type: "uint16", ScaleFactor: "ModV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellVMax", Offset: 8, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellVMaxMod", Offset: 9, Type: "uint16"},
					smdx.PointElement{Id: "CellVMaxStk", Offset: 10, Type: "uint16"},
					smdx.PointElement{Id: "CellVMin", Offset: 11, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CellVMinMod", Offset: 12, Type: "uint16"},
					smdx.PointElement{Id: "CellVMinStk", Offset: 13, Type: "uint16"},
					smdx.PointElement{Id: "CellVAvg", Offset: 14, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "TmpMax", Offset: 15, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "TmpMaxMod", Offset: 16, Type: "uint16"},
					smdx.PointElement{Id: "TmpMin", Offset: 17, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "TmpMinMod", Offset: 18, Type: "uint16"},
					smdx.PointElement{Id: "TmpAvg", Offset: 19, Type: "int16", ScaleFactor: "Tmp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "Evt1", Offset: 20, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "Evt2", Offset: 22, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd1", Offset: 24, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "EvtVnd2", Offset: 26, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "ModV_SF", Offset: 28, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "CellV_SF", Offset: 29, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Tmp_SF", Offset: 30, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "SoC_SF", Offset: 31, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "OCV_SF", Offset: 32, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Pad1", Offset: 33, Type: "pad", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "module",
				Length: 24,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ModIdx", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "ModNStk", Offset: 1, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "ModSt", Offset: 2, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "ModSoC", Offset: 4, Type: "uint16", ScaleFactor: "SoC_SF", Units: "%", Mandatory: true},
					smdx.PointElement{Id: "ModOCV", Offset: 5, Type: "uint16", ScaleFactor: "OCV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModV", Offset: 6, Type: "uint16", ScaleFactor: "ModV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModCellVMax", Offset: 7, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModCellVMaxCell", Offset: 8, Type: "uint16"},
					smdx.PointElement{Id: "ModCellVMin", Offset: 9, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModCellVMinCell", Offset: 10, Type: "uint16"},
					smdx.PointElement{Id: "ModCellVAvg", Offset: 11, Type: "uint16", ScaleFactor: "CellV_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ModAnoTmp", Offset: 12, Type: "uint16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "ModCatTmp", Offset: 13, Type: "uint16", ScaleFactor: "Tmp_SF", Units: "C"},
					smdx.PointElement{Id: "ModConSt", Offset: 14, Type: "bitfield32"},
					smdx.PointElement{Id: "ModEvt1", Offset: 16, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "ModEvt2", Offset: 18, Type: "bitfield32", Mandatory: true},
					smdx.PointElement{Id: "ModConFail", Offset: 20, Type: "enum16"},
					smdx.PointElement{Id: "ModSetEna", Offset: 21, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "ModSetCon", Offset: 22, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "Pad4", Offset: 23, Type: "pad", Mandatory: true},
				},
			},
		}})
}

// Block808 - Flow Battery Module Model -

type Block808Repeat struct {
	StackTBD uint16 `sunspec:"offset=0"`
}

type Block808 struct {
	ModuleTBD uint16 `sunspec:"offset=0"`

	Repeats []Block808Repeat
}

func (self *Block808) GetId() ModelId {
	return 808
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     808,
		Name:   "flow_battery_module",
		Length: 2,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 1,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "ModuleTBD", Offset: 0, Type: "uint16", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "stack",
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "StackTBD", Offset: 0, Type: "uint16", Mandatory: true},
				},
			},
		}})
}

// Block809 - Flow Battery Stack Model -

type Block809Repeat struct {
	CellTBD uint16 `sunspec:"offset=0"`
}

type Block809 struct {
	StackTBD uint16 `sunspec:"offset=0"`

	Repeats []Block809Repeat
}

func (self *Block809) GetId() ModelId {
	return 809
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     809,
		Name:   "flow_battery_stack",
		Length: 2,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 1,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "StackTBD", Offset: 0, Type: "uint16", Mandatory: true},
				},
			},
			smdx.BlockElement{Name: "cell",
				Length: 1,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "CellTBD", Offset: 0, Type: "uint16", Mandatory: true},
				},
			},
		}})
}

// Block63001 - SunSpec Test Model 1 -

type Block63001Repeat struct {
	sunssf_8  ScaleFactor `sunspec:"offset=0"`
	int16_11  int16       `sunspec:"offset=1,sf=sunssf_8,access=rw"`
	int16_12  int16       `sunspec:"offset=2,sf=sunssf_9"`
	int16_u   int16       `sunspec:"offset=3"`
	uint16_11 uint16      `sunspec:"offset=4,sf=sunssf_8,access=rw"`
	uint16_12 uint16      `sunspec:"offset=5,sf=sunssf_9"`
	uint16_13 uint16      `sunspec:"offset=6"`
	uint16_u  uint16      `sunspec:"offset=7"`
	int32     int32       `sunspec:"offset=8,sf=sunssf_1,access=rw"`
	int32_u   int32       `sunspec:"offset=10"`
	uint32    uint32      `sunspec:"offset=12,sf=sunssf_9,access=rw"`
	uint32_u  uint32      `sunspec:"offset=14"`
	sunssf_9  ScaleFactor `sunspec:"offset=16"`
	pad_2     Pad         `sunspec:"offset=17"`
}

type Block63001 struct {
	sunssf_1     ScaleFactor `sunspec:"offset=0"`
	sunssf_2     ScaleFactor `sunspec:"offset=1"`
	sunssf_3     ScaleFactor `sunspec:"offset=2"`
	sunssf_4     ScaleFactor `sunspec:"offset=3"`
	int16_1      int16       `sunspec:"offset=4,sf=sunssf_1"`
	int16_2      int16       `sunspec:"offset=5,sf=sunssf_2"`
	int16_3      int16       `sunspec:"offset=6,sf=sunssf_3"`
	int16_4      int16       `sunspec:"offset=7,sf=sunssf_4,access=rw"`
	int16_5      int16       `sunspec:"offset=8"`
	int16_u      int16       `sunspec:"offset=9"`
	uint16_1     uint16      `sunspec:"offset=10,sf=sunssf_1"`
	uint16_2     uint16      `sunspec:"offset=11,sf=sunssf_2"`
	uint16_3     uint16      `sunspec:"offset=12,sf=sunssf_3"`
	uint16_4     uint16      `sunspec:"offset=13,sf=sunssf_4,access=rw"`
	uint16_5     uint16      `sunspec:"offset=14"`
	uint16_u     uint16      `sunspec:"offset=15"`
	acc16        Acc16       `sunspec:"offset=16"`
	acc16_u      Acc16       `sunspec:"offset=17"`
	enum16       Enum16      `sunspec:"offset=18"`
	enum16_u     Enum16      `sunspec:"offset=19"`
	bitfield16   Bitfield16  `sunspec:"offset=20"`
	bitfield16_u Bitfield16  `sunspec:"offset=21"`
	int32_1      int32       `sunspec:"offset=22,sf=sunssf_5"`
	int32_2      int32       `sunspec:"offset=24,sf=sunssf_6"`
	int32_3      int32       `sunspec:"offset=26,sf=sunssf_7,access=rw"`
	int32_4      int32       `sunspec:"offset=28"`
	int32_5      int32       `sunspec:"offset=30"`
	int32_u      int32       `sunspec:"offset=32"`
	uint32_1     uint32      `sunspec:"offset=34,sf=sunssf_5"`
	uint32_2     uint32      `sunspec:"offset=36,sf=sunssf_6"`
	uint32_3     uint32      `sunspec:"offset=38,sf=sunssf_7,access=rw"`
	uint32_4     uint32      `sunspec:"offset=40,sf=1"`
	uint32_5     uint32      `sunspec:"offset=42"`
	uint32_u     uint32      `sunspec:"offset=44"`
	acc32        Acc32       `sunspec:"offset=46"`
	acc32_u      Acc32       `sunspec:"offset=48"`
	enum32       Enum32      `sunspec:"offset=50"`
	enum32_u     Enum32      `sunspec:"offset=52"`
	bitfield32   Bitfield32  `sunspec:"offset=54"`
	bitfield32_u Bitfield32  `sunspec:"offset=56"`
	ipaddr       Ipaddr      `sunspec:"offset=58,access=rw"`
	ipaddr_u     Ipaddr      `sunspec:"offset=60"`
	int64        int64       `sunspec:"offset=62,access=rw"`
	int64_u      int64       `sunspec:"offset=66"`
	acc64        Acc64       `sunspec:"offset=70"`
	acc64_u      Acc64       `sunspec:"offset=74"`
	ipv6addr     Ipv6addr    `sunspec:"offset=78"`
	ipv6addr_u   Ipv6addr    `sunspec:"offset=86"`
	float32      float32     `sunspec:"offset=94,access=rw"`
	float32_u    float32     `sunspec:"offset=96"`
	string       String      `sunspec:"offset=98,len=16,access=rw"`
	string_u     String      `sunspec:"offset=114,len=16"`
	sunssf_5     ScaleFactor `sunspec:"offset=130"`
	sunssf_6     ScaleFactor `sunspec:"offset=131"`
	sunssf_7     ScaleFactor `sunspec:"offset=132"`
	pad_1        Pad         `sunspec:"offset=133"`

	Repeats []Block63001Repeat
}

func (self *Block63001) GetId() ModelId {
	return 63001
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     63001,
		Name:   "",
		Length: 152,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 134,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "sunssf_1", Offset: 0, Type: "sunssf"},
					smdx.PointElement{Id: "sunssf_2", Offset: 1, Type: "sunssf"},
					smdx.PointElement{Id: "sunssf_3", Offset: 2, Type: "sunssf"},
					smdx.PointElement{Id: "sunssf_4", Offset: 3, Type: "sunssf"},
					smdx.PointElement{Id: "int16_1", Offset: 4, Type: "int16", ScaleFactor: "sunssf_1"},
					smdx.PointElement{Id: "int16_2", Offset: 5, Type: "int16", ScaleFactor: "sunssf_2"},
					smdx.PointElement{Id: "int16_3", Offset: 6, Type: "int16", ScaleFactor: "sunssf_3"},
					smdx.PointElement{Id: "int16_4", Offset: 7, Type: "int16", ScaleFactor: "sunssf_4", Access: "rw"},
					smdx.PointElement{Id: "int16_5", Offset: 8, Type: "int16"},
					smdx.PointElement{Id: "int16_u", Offset: 9, Type: "int16"},
					smdx.PointElement{Id: "uint16_1", Offset: 10, Type: "uint16", ScaleFactor: "sunssf_1"},
					smdx.PointElement{Id: "uint16_2", Offset: 11, Type: "uint16", ScaleFactor: "sunssf_2"},
					smdx.PointElement{Id: "uint16_3", Offset: 12, Type: "uint16", ScaleFactor: "sunssf_3"},
					smdx.PointElement{Id: "uint16_4", Offset: 13, Type: "uint16", ScaleFactor: "sunssf_4", Access: "rw"},
					smdx.PointElement{Id: "uint16_5", Offset: 14, Type: "uint16"},
					smdx.PointElement{Id: "uint16_u", Offset: 15, Type: "uint16"},
					smdx.PointElement{Id: "acc16", Offset: 16, Type: "acc16"},
					smdx.PointElement{Id: "acc16_u", Offset: 17, Type: "acc16"},
					smdx.PointElement{Id: "enum16", Offset: 18, Type: "enum16"},
					smdx.PointElement{Id: "enum16_u", Offset: 19, Type: "enum16"},
					smdx.PointElement{Id: "bitfield16", Offset: 20, Type: "bitfield16"},
					smdx.PointElement{Id: "bitfield16_u", Offset: 21, Type: "bitfield16"},
					smdx.PointElement{Id: "int32_1", Offset: 22, Type: "int32", ScaleFactor: "sunssf_5"},
					smdx.PointElement{Id: "int32_2", Offset: 24, Type: "int32", ScaleFactor: "sunssf_6"},
					smdx.PointElement{Id: "int32_3", Offset: 26, Type: "int32", ScaleFactor: "sunssf_7", Access: "rw"},
					smdx.PointElement{Id: "int32_4", Offset: 28, Type: "int32"},
					smdx.PointElement{Id: "int32_5", Offset: 30, Type: "int32"},
					smdx.PointElement{Id: "int32_u", Offset: 32, Type: "int32"},
					smdx.PointElement{Id: "uint32_1", Offset: 34, Type: "uint32", ScaleFactor: "sunssf_5"},
					smdx.PointElement{Id: "uint32_2", Offset: 36, Type: "uint32", ScaleFactor: "sunssf_6"},
					smdx.PointElement{Id: "uint32_3", Offset: 38, Type: "uint32", ScaleFactor: "sunssf_7", Access: "rw"},
					smdx.PointElement{Id: "uint32_4", Offset: 40, Type: "uint32", ScaleFactor: "1"},
					smdx.PointElement{Id: "uint32_5", Offset: 42, Type: "uint32"},
					smdx.PointElement{Id: "uint32_u", Offset: 44, Type: "uint32"},
					smdx.PointElement{Id: "acc32", Offset: 46, Type: "acc32"},
					smdx.PointElement{Id: "acc32_u", Offset: 48, Type: "acc32"},
					smdx.PointElement{Id: "enum32", Offset: 50, Type: "enum32"},
					smdx.PointElement{Id: "enum32_u", Offset: 52, Type: "enum32"},
					smdx.PointElement{Id: "bitfield32", Offset: 54, Type: "bitfield32"},
					smdx.PointElement{Id: "bitfield32_u", Offset: 56, Type: "bitfield32"},
					smdx.PointElement{Id: "ipaddr", Offset: 58, Type: "ipaddr", Access: "rw"},
					smdx.PointElement{Id: "ipaddr_u", Offset: 60, Type: "ipaddr"},
					smdx.PointElement{Id: "int64", Offset: 62, Type: "int64", Access: "rw"},
					smdx.PointElement{Id: "int64_u", Offset: 66, Type: "int64"},
					smdx.PointElement{Id: "acc64", Offset: 70, Type: "acc64"},
					smdx.PointElement{Id: "acc64_u", Offset: 74, Type: "acc64"},
					smdx.PointElement{Id: "ipv6addr", Offset: 78, Type: "ipv6addr"},
					smdx.PointElement{Id: "ipv6addr_u", Offset: 86, Type: "ipv6addr"},
					smdx.PointElement{Id: "float32", Offset: 94, Type: "float32", Access: "rw"},
					smdx.PointElement{Id: "float32_u", Offset: 96, Type: "float32"},
					smdx.PointElement{Id: "string", Offset: 98, Type: "string", Access: "rw", Length: 16},
					smdx.PointElement{Id: "string_u", Offset: 114, Type: "string", Length: 16},
					smdx.PointElement{Id: "sunssf_5", Offset: 130, Type: "sunssf"},
					smdx.PointElement{Id: "sunssf_6", Offset: 131, Type: "sunssf"},
					smdx.PointElement{Id: "sunssf_7", Offset: 132, Type: "sunssf"},
					smdx.PointElement{Id: "pad_1", Offset: 133, Type: "pad"},
				},
			},
			smdx.BlockElement{
				Length: 18,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "sunssf_8", Offset: 0, Type: "sunssf"},
					smdx.PointElement{Id: "int16_11", Offset: 1, Type: "int16", ScaleFactor: "sunssf_8", Access: "rw"},
					smdx.PointElement{Id: "int16_12", Offset: 2, Type: "int16", ScaleFactor: "sunssf_9"},
					smdx.PointElement{Id: "int16_u", Offset: 3, Type: "int16"},
					smdx.PointElement{Id: "uint16_11", Offset: 4, Type: "uint16", ScaleFactor: "sunssf_8", Access: "rw"},
					smdx.PointElement{Id: "uint16_12", Offset: 5, Type: "uint16", ScaleFactor: "sunssf_9"},
					smdx.PointElement{Id: "uint16_13", Offset: 6, Type: "uint16"},
					smdx.PointElement{Id: "uint16_u", Offset: 7, Type: "uint16"},
					smdx.PointElement{Id: "int32", Offset: 8, Type: "int32", ScaleFactor: "sunssf_1", Access: "rw"},
					smdx.PointElement{Id: "int32_u", Offset: 10, Type: "int32"},
					smdx.PointElement{Id: "uint32", Offset: 12, Type: "uint32", ScaleFactor: "sunssf_9", Access: "rw"},
					smdx.PointElement{Id: "uint32_u", Offset: 14, Type: "uint32"},
					smdx.PointElement{Id: "sunssf_9", Offset: 16, Type: "sunssf"},
					smdx.PointElement{Id: "pad_2", Offset: 17, Type: "pad"},
				},
			},
		}})
}

// Block63002 - SunSpec Test Model 2 -

type Block63002Repeat struct {
	sunssf_1 ScaleFactor `sunspec:"offset=0"`
	int16_1  int16       `sunspec:"offset=1,sf=sunssf_1,access=rw"`
	int16_2  int16       `sunspec:"offset=2,sf=sunssf_2"`
	sunssf_2 ScaleFactor `sunspec:"offset=3"`
}

type Block63002 struct {
	Repeats []Block63002Repeat
}

func (self *Block63002) GetId() ModelId {
	return 63002
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     63002,
		Name:   "",
		Length: 8,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 4,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "sunssf_1", Offset: 0, Type: "sunssf"},
					smdx.PointElement{Id: "int16_1", Offset: 1, Type: "int16", ScaleFactor: "sunssf_1", Access: "rw"},
					smdx.PointElement{Id: "int16_2", Offset: 2, Type: "int16", ScaleFactor: "sunssf_2"},
					smdx.PointElement{Id: "sunssf_2", Offset: 3, Type: "sunssf"},
				},
			},
		}})
}

// Block64001 - Veris Status and Configuration -

type Block64001 struct {
	Cmd      Enum16     `sunspec:"offset=0,access=rw"`
	HWRev    uint16     `sunspec:"offset=1"`
	RSFWRev  uint16     `sunspec:"offset=2"`
	OSFWRev  uint16     `sunspec:"offset=3"`
	ProdRev  String     `sunspec:"offset=4,len=2"`
	Boots    uint16     `sunspec:"offset=6"`
	Switch   Bitfield16 `sunspec:"offset=7"`
	Sensors  uint16     `sunspec:"offset=8"`
	Talking  uint16     `sunspec:"offset=9"`
	Status   Bitfield16 `sunspec:"offset=10"`
	Config   Bitfield16 `sunspec:"offset=11"`
	LEDblink uint16     `sunspec:"offset=12"`
	LEDon    uint16     `sunspec:"offset=13"`
	Reserved uint16     `sunspec:"offset=14"`
	Loc      String     `sunspec:"offset=15,len=16"`
	S1ID     Enum16     `sunspec:"offset=31"`
	S1Addr   uint16     `sunspec:"offset=32"`
	S1OSVer  uint16     `sunspec:"offset=33"`
	S1Ver    String     `sunspec:"offset=34,len=2"`
	S1Serial String     `sunspec:"offset=36,len=5"`
	S2ID     Enum16     `sunspec:"offset=41"`
	S2Addr   uint16     `sunspec:"offset=42"`
	S2OSVer  uint16     `sunspec:"offset=43"`
	S2Ver    String     `sunspec:"offset=44,len=2"`
	S2Serial String     `sunspec:"offset=46,len=5"`
	S3ID     Enum16     `sunspec:"offset=51"`
	S3Addr   uint16     `sunspec:"offset=52"`
	S3OSVer  uint16     `sunspec:"offset=53"`
	S3Ver    String     `sunspec:"offset=54,len=2"`
	S3Serial String     `sunspec:"offset=56,len=5"`
	S4ID     Enum16     `sunspec:"offset=61"`
	S4Addr   uint16     `sunspec:"offset=62"`
	S4OSVer  uint16     `sunspec:"offset=63"`
	S4Ver    String     `sunspec:"offset=64,len=2"`
	S4Serial String     `sunspec:"offset=66,len=5"`
}

func (self *Block64001) GetId() ModelId {
	return 64001
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     64001,
		Name:   "",
		Length: 71,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 71,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Cmd", Offset: 0, Type: "enum16", Access: "rw"},
					smdx.PointElement{Id: "HWRev", Offset: 1, Type: "uint16"},
					smdx.PointElement{Id: "RSFWRev", Offset: 2, Type: "uint16"},
					smdx.PointElement{Id: "OSFWRev", Offset: 3, Type: "uint16"},
					smdx.PointElement{Id: "ProdRev", Offset: 4, Type: "string", Length: 2},
					smdx.PointElement{Id: "Boots", Offset: 6, Type: "uint16"},
					smdx.PointElement{Id: "Switch", Offset: 7, Type: "bitfield16"},
					smdx.PointElement{Id: "Sensors", Offset: 8, Type: "uint16"},
					smdx.PointElement{Id: "Talking", Offset: 9, Type: "uint16"},
					smdx.PointElement{Id: "Status", Offset: 10, Type: "bitfield16"},
					smdx.PointElement{Id: "Config", Offset: 11, Type: "bitfield16"},
					smdx.PointElement{Id: "LEDblink", Offset: 12, Type: "uint16", Units: "Pct"},
					smdx.PointElement{Id: "LEDon", Offset: 13, Type: "uint16", Units: "Pct"},
					smdx.PointElement{Id: "Reserved", Offset: 14, Type: "uint16"},
					smdx.PointElement{Id: "Loc", Offset: 15, Type: "string", Length: 16},
					smdx.PointElement{Id: "S1ID", Offset: 31, Type: "enum16"},
					smdx.PointElement{Id: "S1Addr", Offset: 32, Type: "uint16"},
					smdx.PointElement{Id: "S1OSVer", Offset: 33, Type: "uint16"},
					smdx.PointElement{Id: "S1Ver", Offset: 34, Type: "string", Length: 2},
					smdx.PointElement{Id: "S1Serial", Offset: 36, Type: "string", Length: 5},
					smdx.PointElement{Id: "S2ID", Offset: 41, Type: "enum16"},
					smdx.PointElement{Id: "S2Addr", Offset: 42, Type: "uint16"},
					smdx.PointElement{Id: "S2OSVer", Offset: 43, Type: "uint16"},
					smdx.PointElement{Id: "S2Ver", Offset: 44, Type: "string", Length: 2},
					smdx.PointElement{Id: "S2Serial", Offset: 46, Type: "string", Length: 5},
					smdx.PointElement{Id: "S3ID", Offset: 51, Type: "enum16"},
					smdx.PointElement{Id: "S3Addr", Offset: 52, Type: "uint16"},
					smdx.PointElement{Id: "S3OSVer", Offset: 53, Type: "uint16"},
					smdx.PointElement{Id: "S3Ver", Offset: 54, Type: "string", Length: 2},
					smdx.PointElement{Id: "S3Serial", Offset: 56, Type: "string", Length: 5},
					smdx.PointElement{Id: "S4ID", Offset: 61, Type: "enum16"},
					smdx.PointElement{Id: "S4Addr", Offset: 62, Type: "uint16"},
					smdx.PointElement{Id: "S4OSVer", Offset: 63, Type: "uint16"},
					smdx.PointElement{Id: "S4Ver", Offset: 64, Type: "string", Length: 2},
					smdx.PointElement{Id: "S4Serial", Offset: 66, Type: "string", Length: 5},
				},
			},
		}})
}

// Block64020 - Mersen GreenString -

type Block64020Repeat struct {
	SerialNumber String `sunspec:"offset=0,len=9"`
	Firmware     String `sunspec:"offset=9,len=6"`
	Hardware     uint16 `sunspec:"offset=15"`
}

type Block64020 struct {
	Aux0Tmp           int16       `sunspec:"offset=0"`
	Aux1Tmp           int16       `sunspec:"offset=1"`
	Aux2Tmp           int16       `sunspec:"offset=2"`
	Aux3Tmp           int16       `sunspec:"offset=3"`
	Aux4Tmp           int16       `sunspec:"offset=4"`
	ProbeTmp          int16       `sunspec:"offset=6"`
	MainTmp           int16       `sunspec:"offset=5"`
	SensorV_SF        ScaleFactor `sunspec:"offset=7"`
	SensorA_SF        ScaleFactor `sunspec:"offset=8"`
	SensorHz_SF       ScaleFactor `sunspec:"offset=9"`
	Sensor1Voltage    int16       `sunspec:"offset=10,sf=SensorV_SF"`
	Sensor2Voltage    int16       `sunspec:"offset=11,sf=SensorV_SF"`
	Sensor3Voltage    int16       `sunspec:"offset=12,sf=SensorV_SF"`
	Sensor4Voltage    int16       `sunspec:"offset=13,sf=SensorV_SF"`
	Sensor5Voltage    int16       `sunspec:"offset=14,sf=SensorV_SF"`
	Sensor6Voltage    int16       `sunspec:"offset=15,sf=SensorV_SF"`
	Sensor7Voltage    int16       `sunspec:"offset=16,sf=SensorV_SF"`
	Sensor1Current    int16       `sunspec:"offset=17,sf=SensorA_SF"`
	Sensor2Current    int16       `sunspec:"offset=18,sf=SensorA_SF"`
	Sensor3Current    int16       `sunspec:"offset=19,sf=SensorA_SF"`
	Sensor4Current    int16       `sunspec:"offset=20,sf=SensorA_SF"`
	Sensor5Current    int16       `sunspec:"offset=21,sf=SensorA_SF"`
	Sensor6Current    int16       `sunspec:"offset=22,sf=SensorA_SF"`
	Sensor7Current    int16       `sunspec:"offset=23,sf=SensorA_SF"`
	Sensor8           uint16      `sunspec:"offset=24,sf=SensorHz_SF"`
	Relay1            uint16      `sunspec:"offset=25"`
	Relay2            uint16      `sunspec:"offset=26"`
	Relay3            uint16      `sunspec:"offset=27"`
	ResetAccumulators uint16      `sunspec:"offset=28"`
	Reset             uint16      `sunspec:"offset=29"`

	Repeats []Block64020Repeat
}

func (self *Block64020) GetId() ModelId {
	return 64020
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     64020,
		Name:   "",
		Length: 46,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 30,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Aux0Tmp", Offset: 0, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "Aux1Tmp", Offset: 1, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "Aux2Tmp", Offset: 2, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "Aux3Tmp", Offset: 3, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "Aux4Tmp", Offset: 4, Type: "int16", Units: "C"},
					smdx.PointElement{Id: "ProbeTmp", Offset: 6, Type: "int16", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "MainTmp", Offset: 5, Type: "int16", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "SensorV_SF", Offset: 7, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "SensorA_SF", Offset: 8, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "SensorHz_SF", Offset: 9, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "Sensor1Voltage", Offset: 10, Type: "int16", ScaleFactor: "SensorV_SF", Units: "V"},
					smdx.PointElement{Id: "Sensor2Voltage", Offset: 11, Type: "int16", ScaleFactor: "SensorV_SF", Units: "V"},
					smdx.PointElement{Id: "Sensor3Voltage", Offset: 12, Type: "int16", ScaleFactor: "SensorV_SF", Units: "V"},
					smdx.PointElement{Id: "Sensor4Voltage", Offset: 13, Type: "int16", ScaleFactor: "SensorV_SF", Units: "V"},
					smdx.PointElement{Id: "Sensor5Voltage", Offset: 14, Type: "int16", ScaleFactor: "SensorV_SF", Units: "V"},
					smdx.PointElement{Id: "Sensor6Voltage", Offset: 15, Type: "int16", ScaleFactor: "SensorV_SF", Units: "V"},
					smdx.PointElement{Id: "Sensor7Voltage", Offset: 16, Type: "int16", ScaleFactor: "SensorV_SF", Units: "V"},
					smdx.PointElement{Id: "Sensor1Current", Offset: 17, Type: "int16", ScaleFactor: "SensorA_SF", Units: "A"},
					smdx.PointElement{Id: "Sensor2Current", Offset: 18, Type: "int16", ScaleFactor: "SensorA_SF", Units: "A"},
					smdx.PointElement{Id: "Sensor3Current", Offset: 19, Type: "int16", ScaleFactor: "SensorA_SF", Units: "A"},
					smdx.PointElement{Id: "Sensor4Current", Offset: 20, Type: "int16", ScaleFactor: "SensorA_SF", Units: "A"},
					smdx.PointElement{Id: "Sensor5Current", Offset: 21, Type: "int16", ScaleFactor: "SensorA_SF", Units: "A"},
					smdx.PointElement{Id: "Sensor6Current", Offset: 22, Type: "int16", ScaleFactor: "SensorA_SF", Units: "A"},
					smdx.PointElement{Id: "Sensor7Current", Offset: 23, Type: "int16", ScaleFactor: "SensorA_SF", Units: "A"},
					smdx.PointElement{Id: "Sensor8", Offset: 24, Type: "uint16", ScaleFactor: "SensorHz_SF", Units: "Hz"},
					smdx.PointElement{Id: "Relay1", Offset: 25, Type: "uint16"},
					smdx.PointElement{Id: "Relay2", Offset: 26, Type: "uint16"},
					smdx.PointElement{Id: "Relay3", Offset: 27, Type: "uint16"},
					smdx.PointElement{Id: "ResetAccumulators", Offset: 28, Type: "uint16"},
					smdx.PointElement{Id: "Reset", Offset: 29, Type: "uint16"},
				},
			},
			smdx.BlockElement{
				Length: 16,
				Type:   "repeating",
				Points: []smdx.PointElement{
					smdx.PointElement{Id: "SerialNumber", Offset: 0, Type: "string", Length: 9, Mandatory: true},
					smdx.PointElement{Id: "Firmware", Offset: 9, Type: "string", Length: 6, Mandatory: true},
					smdx.PointElement{Id: "Hardware", Offset: 15, Type: "uint16", Mandatory: true},
				},
			},
		}})
}

// Block64101 - Eltek Inverter Extension -

type Block64101 struct {
	Eltek_Country_Code   uint16 `sunspec:"offset=0"`
	Eltek_Feeding_Phase  uint16 `sunspec:"offset=1"`
	Eltek_APD_Method     uint16 `sunspec:"offset=2"`
	Eltek_APD_Power_Ref  uint16 `sunspec:"offset=3"`
	Eltek_RPS_Method     uint16 `sunspec:"offset=4"`
	Eltek_RPS_Q_Ref      uint16 `sunspec:"offset=5"`
	Eltek_RPS_CosPhi_Ref int16  `sunspec:"offset=6"`
}

func (self *Block64101) GetId() ModelId {
	return 64101
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     64101,
		Name:   "",
		Length: 7,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 7,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Eltek_Country_Code", Offset: 0, Type: "uint16"},
					smdx.PointElement{Id: "Eltek_Feeding_Phase", Offset: 1, Type: "uint16"},
					smdx.PointElement{Id: "Eltek_APD_Method", Offset: 2, Type: "uint16"},
					smdx.PointElement{Id: "Eltek_APD_Power_Ref", Offset: 3, Type: "uint16"},
					smdx.PointElement{Id: "Eltek_RPS_Method", Offset: 4, Type: "uint16"},
					smdx.PointElement{Id: "Eltek_RPS_Q_Ref", Offset: 5, Type: "uint16"},
					smdx.PointElement{Id: "Eltek_RPS_CosPhi_Ref", Offset: 6, Type: "int16"},
				},
			},
		}})
}

// Block64110 - OutBack AXS device -

type Block64110 struct {
	MajorFWRev        uint16      `sunspec:"offset=0"`
	MidFWRev          uint16      `sunspec:"offset=1"`
	MinorFWRev        uint16      `sunspec:"offset=2"`
	EncrypKey         uint16      `sunspec:"offset=3"`
	MAC_Address       String      `sunspec:"offset=4,len=7"`
	WritePassword     String      `sunspec:"offset=11,len=8"`
	EnableDHCP        Enum16      `sunspec:"offset=19"`
	TCPIP_address     Ipaddr      `sunspec:"offset=20"`
	Gateway_address   Ipaddr      `sunspec:"offset=22"`
	TCPIP_Netmask     Ipaddr      `sunspec:"offset=24"`
	DNS1_address      Ipaddr      `sunspec:"offset=26"`
	DNS2_address      Ipaddr      `sunspec:"offset=28"`
	Modbus_port       uint16      `sunspec:"offset=30"`
	SMTP_server_nm    String      `sunspec:"offset=31,len=20"`
	SMTP_account_nm   String      `sunspec:"offset=51,len=16"`
	SMTP_enable_SSL   Enum16      `sunspec:"offset=67"`
	SMTP_password     String      `sunspec:"offset=68,len=8"`
	SMTP_user_nm      String      `sunspec:"offset=76,len=20"`
	Stat_email_int    uint16      `sunspec:"offset=96"`
	Stat_start_HR     uint16      `sunspec:"offset=97"`
	Stat_email_sub    String      `sunspec:"offset=98,len=25"`
	Stat_email_addr1  String      `sunspec:"offset=123,len=20"`
	Stat_email_addr2  String      `sunspec:"offset=143,len=20"`
	Alarm_email_en    Enum16      `sunspec:"offset=163"`
	Alarm_email_sub   String      `sunspec:"offset=164,len=25"`
	Alarm_email_addr1 String      `sunspec:"offset=189,len=20"`
	Alarm_email_addr2 String      `sunspec:"offset=209,len=20"`
	FTP_password      String      `sunspec:"offset=229,len=8"`
	TELNET_password   String      `sunspec:"offset=237,len=8"`
	Log_write_int     uint16      `sunspec:"offset=245"`
	Log_retain        uint16      `sunspec:"offset=246"`
	Log_mode          Enum16      `sunspec:"offset=247"`
	NTP_server_nm     String      `sunspec:"offset=248,len=20"`
	NTP_enable        Enum16      `sunspec:"offset=268"`
	TimeZone          int16       `sunspec:"offset=269"`
	Date_year         uint16      `sunspec:"offset=270"`
	Date_month        uint16      `sunspec:"offset=271"`
	Date_Day          uint16      `sunspec:"offset=272"`
	Time_hour         uint16      `sunspec:"offset=273"`
	Time_minute       uint16      `sunspec:"offset=274"`
	Time_second       uint16      `sunspec:"offset=275"`
	Battery_temp      int16       `sunspec:"offset=276,sf=Temp_SF"`
	Ambient_temp      int16       `sunspec:"offset=277,sf=Temp_SF"`
	Temp_SF           ScaleFactor `sunspec:"offset=278"`
	AXS_Error         Bitfield16  `sunspec:"offset=279"`
	AXS_Status        Bitfield16  `sunspec:"offset=280"`
	AXS_Spare         uint16      `sunspec:"offset=281"`
}

func (self *Block64110) GetId() ModelId {
	return 64110
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     64110,
		Name:   "",
		Length: 282,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 282,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "MajorFWRev", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "MidFWRev", Offset: 1, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "MinorFWRev", Offset: 2, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "EncrypKey", Offset: 3, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "MAC_Address", Offset: 4, Type: "string", Length: 7, Mandatory: true},
					smdx.PointElement{Id: "WritePassword", Offset: 11, Type: "string", Length: 8, Mandatory: true},
					smdx.PointElement{Id: "EnableDHCP", Offset: 19, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "TCPIP_address", Offset: 20, Type: "ipaddr", Mandatory: true},
					smdx.PointElement{Id: "Gateway_address", Offset: 22, Type: "ipaddr", Mandatory: true},
					smdx.PointElement{Id: "TCPIP_Netmask", Offset: 24, Type: "ipaddr", Mandatory: true},
					smdx.PointElement{Id: "DNS1_address", Offset: 26, Type: "ipaddr", Mandatory: true},
					smdx.PointElement{Id: "DNS2_address", Offset: 28, Type: "ipaddr", Mandatory: true},
					smdx.PointElement{Id: "Modbus_port", Offset: 30, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "SMTP_server_nm", Offset: 31, Type: "string", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "SMTP_account_nm", Offset: 51, Type: "string", Length: 16, Mandatory: true},
					smdx.PointElement{Id: "SMTP_enable_SSL", Offset: 67, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "SMTP_password", Offset: 68, Type: "string", Length: 8, Mandatory: true},
					smdx.PointElement{Id: "SMTP_user_nm", Offset: 76, Type: "string", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "Stat_email_int", Offset: 96, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "Stat_start_HR", Offset: 97, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "Stat_email_sub", Offset: 98, Type: "string", Length: 25, Mandatory: true},
					smdx.PointElement{Id: "Stat_email_addr1", Offset: 123, Type: "string", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "Stat_email_addr2", Offset: 143, Type: "string", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "Alarm_email_en", Offset: 163, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "Alarm_email_sub", Offset: 164, Type: "string", Length: 25, Mandatory: true},
					smdx.PointElement{Id: "Alarm_email_addr1", Offset: 189, Type: "string", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "Alarm_email_addr2", Offset: 209, Type: "string", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "FTP_password", Offset: 229, Type: "string", Length: 8, Mandatory: true},
					smdx.PointElement{Id: "TELNET_password", Offset: 237, Type: "string", Length: 8, Mandatory: true},
					smdx.PointElement{Id: "Log_write_int", Offset: 245, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "Log_retain", Offset: 246, Type: "uint16", Units: "Tmd", Mandatory: true},
					smdx.PointElement{Id: "Log_mode", Offset: 247, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "NTP_server_nm", Offset: 248, Type: "string", Length: 20, Mandatory: true},
					smdx.PointElement{Id: "NTP_enable", Offset: 268, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "TimeZone", Offset: 269, Type: "int16", Units: "Tmh", Mandatory: true},
					smdx.PointElement{Id: "Date_year", Offset: 270, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "Date_month", Offset: 271, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "Date_Day", Offset: 272, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "Time_hour", Offset: 273, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "Time_minute", Offset: 274, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "Time_second", Offset: 275, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "Battery_temp", Offset: 276, Type: "int16", ScaleFactor: "Temp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "Ambient_temp", Offset: 277, Type: "int16", ScaleFactor: "Temp_SF", Units: "C", Mandatory: true},
					smdx.PointElement{Id: "Temp_SF", Offset: 278, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "AXS_Error", Offset: 279, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: "AXS_Status", Offset: 280, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: "AXS_Spare", Offset: 281, Type: "uint16", Mandatory: true},
				},
			},
		}})
}

// Block64111 - Basic Charge Controller -

type Block64111 struct {
	Port            uint16      `sunspec:"offset=0"`
	V_SF            ScaleFactor `sunspec:"offset=1"`
	A_SF            ScaleFactor `sunspec:"offset=2"`
	P_SF            ScaleFactor `sunspec:"offset=3"`
	AH_SF           ScaleFactor `sunspec:"offset=4"`
	KWH_SF          ScaleFactor `sunspec:"offset=5"`
	BattV           uint16      `sunspec:"offset=6,sf=V_SF"`
	ArrayV          uint16      `sunspec:"offset=7,sf=V_SF"`
	OutputA         uint16      `sunspec:"offset=8,sf=A_SF"`
	InputA          uint16      `sunspec:"offset=9,sf=P_SF"`
	ChargerSt       Enum16      `sunspec:"offset=10"`
	OutputW         uint16      `sunspec:"offset=11,sf=P_SF"`
	TodayMinBatV    uint16      `sunspec:"offset=12,sf=V_SF"`
	TodayMaxBatV    uint16      `sunspec:"offset=13,sf=V_SF"`
	VOCV            uint16      `sunspec:"offset=14,sf=V_SF"`
	TodayMaxVOC     uint16      `sunspec:"offset=15,sf=V_SF"`
	TodaykWhOutput  uint16      `sunspec:"offset=16,sf=KWH_SF"`
	TodayAHOutput   uint16      `sunspec:"offset=17,sf=AH_SF"`
	LifeTimeKWHOut  uint16      `sunspec:"offset=18,sf=P_SF"`
	LifeTimeAHOut   uint16      `sunspec:"offset=19,sf=KWH_SF"`
	LifeTimeMaxOut  uint16      `sunspec:"offset=20,sf=P_SF"`
	LifeTimeMaxBatt uint16      `sunspec:"offset=21,sf=V_SF"`
	LifeTimeMaxVOC  uint16      `sunspec:"offset=22,sf=V_SF"`
}

func (self *Block64111) GetId() ModelId {
	return 64111
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     64111,
		Name:   "",
		Length: 23,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 23,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Port", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 1, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "A_SF", Offset: 2, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "P_SF", Offset: 3, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "AH_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "KWH_SF", Offset: 5, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "BattV", Offset: 6, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "ArrayV", Offset: 7, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "OutputA", Offset: 8, Type: "uint16", ScaleFactor: "A_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "InputA", Offset: 9, Type: "uint16", ScaleFactor: "P_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "ChargerSt", Offset: 10, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "OutputW", Offset: 11, Type: "uint16", ScaleFactor: "P_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "TodayMinBatV", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "TodayMaxBatV", Offset: 13, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "VOCV", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "TodayMaxVOC", Offset: 15, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "TodaykWhOutput", Offset: 16, Type: "uint16", ScaleFactor: "KWH_SF", Units: "kWh", Mandatory: true},
					smdx.PointElement{Id: "TodayAHOutput", Offset: 17, Type: "uint16", ScaleFactor: "AH_SF", Units: "AH", Mandatory: true},
					smdx.PointElement{Id: "LifeTimeKWHOut", Offset: 18, Type: "uint16", ScaleFactor: "P_SF", Units: "kWh", Mandatory: true},
					smdx.PointElement{Id: "LifeTimeAHOut", Offset: 19, Type: "uint16", ScaleFactor: "KWH_SF", Units: "kAH", Mandatory: true},
					smdx.PointElement{Id: "LifeTimeMaxOut", Offset: 20, Type: "uint16", ScaleFactor: "P_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "LifeTimeMaxBatt", Offset: 21, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "LifeTimeMaxVOC", Offset: 22, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
				},
			},
		}})
}

// Block64112 - OutBack FM Charge Controller -

type Block64112 struct {
	Port                          uint16      `sunspec:"offset=0"`
	V_SF                          ScaleFactor `sunspec:"offset=1"`
	C_SF                          ScaleFactor `sunspec:"offset=2"`
	H_SF                          ScaleFactor `sunspec:"offset=3"`
	P_SF                          ScaleFactor `sunspec:"offset=4"`
	AH_SF                         ScaleFactor `sunspec:"offset=5"`
	KWH_SF                        ScaleFactor `sunspec:"offset=6"`
	CC_Config_fault               Bitfield16  `sunspec:"offset=7"`
	CC_Config_absorb_V            uint16      `sunspec:"offset=8,sf=V_SF"`
	CC_Config_absorb_Hr           uint16      `sunspec:"offset=9,sf=H_SF"`
	CC_Config_absorb_End_A        uint16      `sunspec:"offset=10,sf=V_SF"`
	CC_Config_rebulk_V            uint16      `sunspec:"offset=11,sf=V_SF"`
	CC_Config_float_V             uint16      `sunspec:"offset=12,sf=V_SF"`
	CC_Config_max_Chg_A           uint16      `sunspec:"offset=13,sf=V_SF"`
	CC_Config_equalize_V          uint16      `sunspec:"offset=14,sf=V_SF"`
	CC_Config_equalize_Hr         uint16      `sunspec:"offset=15"`
	CC_Config_auto_equalize       uint16      `sunspec:"offset=16"`
	CC_Config_MPPT_mode           Enum16      `sunspec:"offset=17"`
	CC_Config_sweep_width         Enum16      `sunspec:"offset=18"`
	CC_Config_sweep_max           Enum16      `sunspec:"offset=19"`
	CC_Config_U_Pick_Duty_cyc     uint16      `sunspec:"offset=20,sf=V_SF"`
	CC_Config_grid_tie            Enum16      `sunspec:"offset=21"`
	CC_Config_temp_comp           Enum16      `sunspec:"offset=22"`
	CC_Config_temp_comp_llimt     uint16      `sunspec:"offset=23,sf=V_SF"`
	CC_Config_temp_comp_hlimt     uint16      `sunspec:"offset=24,sf=V_SF"`
	CC_Config_auto_restart        Enum16      `sunspec:"offset=25"`
	CC_Config_wakeup_VOC          uint16      `sunspec:"offset=26,sf=V_SF"`
	CC_Config_snooze_mode_A       uint16      `sunspec:"offset=27,sf=V_SF"`
	CC_Config_wakeup_interval     uint16      `sunspec:"offset=28"`
	CC_Config_AUX_mode            Enum16      `sunspec:"offset=29"`
	CC_Config_AUX_control         Enum16      `sunspec:"offset=30"`
	CC_Config_AUX_state           Enum16      `sunspec:"offset=31"`
	CC_Config_AUX_polarity        Enum16      `sunspec:"offset=32"`
	CC_Config_AUX_L_Batt_disc     uint16      `sunspec:"offset=33,sf=V_SF"`
	CC_Config_AUX_L_Batt_rcon     uint16      `sunspec:"offset=34,sf=V_SF"`
	CC_Config_AUX_L_Batt_dly      uint16      `sunspec:"offset=35"`
	CC_Config_AUX_Vent_fan_V      uint16      `sunspec:"offset=36,sf=V_SF"`
	CC_Config_AUX_PV_triggerV     uint16      `sunspec:"offset=37,sf=V_SF"`
	CC_Config_AUX_PV_trg_h_tm     uint16      `sunspec:"offset=38"`
	CC_Config_AUX_Nlite_ThrsV     uint16      `sunspec:"offset=39,sf=V_SF"`
	CC_Config_AUX_Nlite_On_tm     uint16      `sunspec:"offset=40,sf=H_SF"`
	CC_Config_AUX_Nlite_On_hist   uint16      `sunspec:"offset=41"`
	CC_Config_AUX_Nlite_Off_hist  uint16      `sunspec:"offset=42"`
	CC_Config_AUX_Error_batt_V    uint16      `sunspec:"offset=43,sf=V_SF"`
	CC_Config_AUX_Divert_h_time   uint16      `sunspec:"offset=44,sf=V_SF"`
	CC_Config_AUX_Divert_dly_time uint16      `sunspec:"offset=45"`
	CC_Config_AUX_Divert_Rel_V    uint16      `sunspec:"offset=46,sf=V_SF"`
	CC_Config_AUX_Divert_Hyst_V   uint16      `sunspec:"offset=47,sf=V_SF"`
	CC_Config_MajorFWRev          uint16      `sunspec:"offset=48"`
	CC_Config_MidFWRev            uint16      `sunspec:"offset=49"`
	CC_Config_MinorFWRev          uint16      `sunspec:"offset=50"`
	CC_Config_DataLog_Day_offset  uint16      `sunspec:"offset=51"`
	CC_Config_DataLog_Cur_Day_off uint16      `sunspec:"offset=52"`
	CC_Config_DataLog_Daily_AH    uint16      `sunspec:"offset=53"`
	CC_Config_DataLog_Daily_KWH   uint16      `sunspec:"offset=54,sf=KWH_SF"`
	CC_Config_DataLog_Max_Out_A   uint16      `sunspec:"offset=55,sf=V_SF"`
	CC_Config_DataLog_Max_Out_W   uint16      `sunspec:"offset=56,sf=V_SF"`
	CC_Config_DataLog_Absorb_T    uint16      `sunspec:"offset=57"`
	CC_Config_DataLog_Float_T     uint16      `sunspec:"offset=58"`
	CC_Config_DataLog_Min_Batt_V  uint16      `sunspec:"offset=59,sf=V_SF"`
	CC_Config_DataLog_Max_Batt_V  uint16      `sunspec:"offset=60,sf=V_SF"`
	CC_Config_DataLog_Max_Input_V uint16      `sunspec:"offset=61,sf=V_SF"`
	CC_Config_DataLog_Clear       uint16      `sunspec:"offset=62"`
	CC_Config_DataLog_Clr_Comp    uint16      `sunspec:"offset=63"`
}

func (self *Block64112) GetId() ModelId {
	return 64112
}

func init() {
	smdx.RegisterModel(&smdx.ModelElement{
		Id:     64112,
		Name:   "",
		Length: 64,
		Blocks: []smdx.BlockElement{
			smdx.BlockElement{
				Length: 64,

				Points: []smdx.PointElement{
					smdx.PointElement{Id: "Port", Offset: 0, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "V_SF", Offset: 1, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "C_SF", Offset: 2, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "H_SF", Offset: 3, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "P_SF", Offset: 4, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "AH_SF", Offset: 5, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "KWH_SF", Offset: 6, Type: "sunssf", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_fault", Offset: 7, Type: "bitfield16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_absorb_V", Offset: 8, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_absorb_Hr", Offset: 9, Type: "uint16", ScaleFactor: "H_SF", Units: "Tmh", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_absorb_End_A", Offset: 10, Type: "uint16", ScaleFactor: "V_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_rebulk_V", Offset: 11, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_float_V", Offset: 12, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_max_Chg_A", Offset: 13, Type: "uint16", ScaleFactor: "V_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_equalize_V", Offset: 14, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_equalize_Hr", Offset: 15, Type: "uint16", Units: "Tmh", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_auto_equalize", Offset: 16, Type: "uint16", Units: "Tmd", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_MPPT_mode", Offset: 17, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_sweep_width", Offset: 18, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_sweep_max", Offset: 19, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_U_Pick_Duty_cyc", Offset: 20, Type: "uint16", ScaleFactor: "V_SF", Units: "Pct", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_grid_tie", Offset: 21, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_temp_comp", Offset: 22, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_temp_comp_llimt", Offset: 23, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_temp_comp_hlimt", Offset: 24, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_auto_restart", Offset: 25, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_wakeup_VOC", Offset: 26, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_snooze_mode_A", Offset: 27, Type: "uint16", ScaleFactor: "V_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_wakeup_interval", Offset: 28, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_mode", Offset: 29, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_control", Offset: 30, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_state", Offset: 31, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_polarity", Offset: 32, Type: "enum16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_L_Batt_disc", Offset: 33, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_L_Batt_rcon", Offset: 34, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_L_Batt_dly", Offset: 35, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Vent_fan_V", Offset: 36, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_PV_triggerV", Offset: 37, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_PV_trg_h_tm", Offset: 38, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Nlite_ThrsV", Offset: 39, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Nlite_On_tm", Offset: 40, Type: "uint16", ScaleFactor: "H_SF", Units: "Tmh", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Nlite_On_hist", Offset: 41, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Nlite_Off_hist", Offset: 42, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Error_batt_V", Offset: 43, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Divert_h_time", Offset: 44, Type: "uint16", ScaleFactor: "V_SF", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Divert_dly_time", Offset: 45, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Divert_Rel_V", Offset: 46, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_AUX_Divert_Hyst_V", Offset: 47, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_MajorFWRev", Offset: 48, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_MidFWRev", Offset: 49, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_MinorFWRev", Offset: 50, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Day_offset", Offset: 51, Type: "uint16", Units: "Tmd", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Cur_Day_off", Offset: 52, Type: "uint16", Units: "Tmd", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Daily_AH", Offset: 53, Type: "uint16", Units: "Ah", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Daily_KWH", Offset: 54, Type: "uint16", ScaleFactor: "KWH_SF", Units: "kWh", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Max_Out_A", Offset: 55, Type: "uint16", ScaleFactor: "V_SF", Units: "A", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Max_Out_W", Offset: 56, Type: "uint16", ScaleFactor: "V_SF", Units: "W", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Absorb_T", Offset: 57, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Float_T", Offset: 58, Type: "uint16", Units: "Tms", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Min_Batt_V", Offset: 59, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Max_Batt_V", Offset: 60, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Max_Input_V", Offset: 61, Type: "uint16", ScaleFactor: "V_SF", Units: "V", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Clear", Offset: 62, Type: "uint16", Mandatory: true},
					smdx.PointElement{Id: "CC_Config_DataLog_Clr_Comp", Offset: 63, Type: "uint16", Mandatory: true},
				},
			},
		}})
}
